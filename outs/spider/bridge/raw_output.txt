{"index": 0, "beams": [{"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE singer.Is_male = \"VALUE\"", "score": -5.075631141662598, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer UNION SELECT COUNT(*) FROM singer", "score": -5.89489221572876, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID", "score": -6.248686790466309, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -6.344751834869385, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Is_male", "score": -7.948759078979492, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer GROUP BY singer.Is_male", "score": -7.998092174530029, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM singer", "score": -8.102215766906738, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) AS singer.Singer_ID FROM singer", "score": -8.418213844299316, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -8.44524097442627, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -8.450840950012207, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Name", "score": -8.745613098144531, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -8.815078735351562, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -8.881691932678223, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT * FROM stadium", "score": -8.948373794555664, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers do we have?", "inferred_code": "SELECT T(*) FROM singer", "score": -9.299874305725098, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8605923087238365, "gold_bleu_score": 0.6495279402461448}
{"index": 1, "beams": [{"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE singer.Is_male = \"VALUE\"", "score": -5.450786113739014, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY COUNT(*)", "score": -6.478480339050293, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID", "score": -6.546449184417725, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE singer.Is_male < \"VALUE\"", "score": -6.560690879821777, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -7.881966590881348, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE singer.Is_male", "score": -8.189699172973633, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer GROUP BY \"What\"", "score": -8.239238739013672, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Is_male", "score": -8.466854095458984, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.487265586853027, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.48912239074707, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.503849029541016, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.717425346374512, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM singer", "score": -8.795744895935059, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.911532402038574, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the total number of singers?", "inferred_code": "SELECT * FROM stadium", "score": -8.974727630615234, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.922429019280673, "gold_bleu_score": 0.3135472746964853}
{"index": 4, "beams": [{"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -7.408574447254068e-07, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) = MAX(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -2.6139302253723145, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -2.7338836193084717, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -2.8584675788879395, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -2.920414924621582, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(DISTINCT singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -2.951979398727417, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.0467100143432617, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.086850881576538, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.191527843475342, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Country = \"France\" OR singer.Country = \"France\"", "score": -3.2291431427001953, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.2658824920654297, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = \"France\" OR singer.Country = \"France\"", "score": -3.2888576984405518, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.2901792526245117, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), SUM(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -3.3866848945617676, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT * FROM stadium", "score": -3.391310930252075, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age of all singers from France?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Country = \"France\"", "score": -3.433974266052246, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9398420572845301, "gold_bleu_score": 0.6390160970047499}
{"index": 5, "beams": [{"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = \"French\"", "score": -0.00022391781385522336, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT * FROM stadium", "score": -1.3941552639007568, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Age < (SELECT AVG(singer.Age) FROM singer)", "score": -1.5665794610977173, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Age >= (SELECT AVG(singer.Age) FROM singer WHERE singer.Is_male = \"French\")", "score": -1.615949034690857, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT * FROM stadium", "score": -1.7587518692016602, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Age < (SELECT AVG(singer.Age) FROM singer WHERE singer.Is_male = \"French\")", "score": -1.8294825553894043, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Age = (SELECT AVG(singer.Age) FROM singer WHERE singer.Is_male = \"French\")", "score": -1.8879982233047485, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Is_male = \"French\"", "score": -1.9056473970413208, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Age", "score": -1.9254827499389648, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age) FROM singer WHERE singer.Age >= (SELECT AVG(singer.Age) FROM singer)", "score": -1.9877020120620728, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer JOIN singer ON singer.Singer_ID = singer.Age WHERE singer.Is_male = \"French\"", "score": -2.033757448196411, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Name = \"French\"", "score": -2.1484334468841553, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT AVG(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Age >= (SELECT AVG(singer.Age) FROM singer WHERE singer.Is_male = \"French\")", "score": -2.191352128982544, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT * FROM stadium", "score": -2.1988608837127686, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT * FROM stadium", "score": -2.523221969604492, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}, {"orig_question": "What is the average, minimum, and maximum age for all French singers?", "inferred_code": "SELECT singer.Age, MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = \"yes\"", "score": -2.546643018722534, "correct_code": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8462404710009974, "gold_bleu_score": 0.554632835741874}
{"index": 6, "beams": [{"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -0.0003225250984542072, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -2.5037877559661865, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -4.213029384613037, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)", "score": -4.364150047302246, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age ASC LIMIT 1", "score": -4.392988681793213, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID ORDER BY singer.Age LIMIT 1", "score": -4.515911102294922, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer) ORDER BY singer.Age LIMIT 1", "score": -4.600658416748047, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -4.738582134246826, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age DESC LIMIT 1", "score": -5.326243877410889, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Song_Name, singer.Song_release_year FROM singer", "score": -5.41108512878418, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT * FROM stadium", "score": -5.609961986541748, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -5.6846923828125, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -5.903625011444092, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY (singer.Age - singer.Age) LIMIT 1", "score": -6.001132488250732, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Name, singer.Song_release_year FROM singer", "score": -6.047189712524414, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "Show the name and the release year of the song by the youngest singer.", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT \"singer\"", "score": -6.1378350257873535, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3232421549290564, "gold_bleu_score": 0.4527067839685026}
{"index": 7, "beams": [{"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -0.012023917399346828, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -1.2169556617736816, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age ASC LIMIT 1", "score": -3.7230188846588135, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -4.155725955963135, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age DESC LIMIT 1", "score": -4.316713809967041, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(singer.Age) FROM singer)", "score": -4.479356288909912, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -4.552337169647217, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age ASC LIMIT 1", "score": -4.856609344482422, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID ORDER BY singer.Age LIMIT 1", "score": -4.879847049713135, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Song_Name, singer.Song_release_year FROM singer", "score": -4.957164764404297, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -5.1875691413879395, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Name, singer.Song_release_year FROM singer ORDER BY singer.Age DESC LIMIT 1", "score": -5.450320243835449, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age EXCEPT SELECT singer.Name, singer.Song_release_year FROM singer", "score": -5.522640228271484, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY (singer.Age - singer.Age) LIMIT 1", "score": -5.701652526855469, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT * FROM stadium", "score": -5.865945339202881, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}, {"orig_question": "What are the names and release years for all the songs of the youngest singer?", "inferred_code": "SELECT singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1", "score": -5.918492317199707, "correct_code": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4461086934872468, "gold_bleu_score": 0.6404646620352227}
{"index": 8, "beams": [{"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20", "score": -2.960647123018134e-07, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 EXCEPT SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20", "score": -4.2882561683654785, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT * FROM stadium", "score": -4.393126487731934, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer JOIN singer ON singer.Singer_ID = singer.Singer_ID WHERE singer.Age > 20", "score": -4.438126087188721, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age > 20", "score": -5.0480546951293945, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = 1", "score": -5.205563068389893, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age >= 20", "score": -5.490087985992432, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = 20", "score": -5.559327125549316, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = \"VALUE\"", "score": -5.62801456451416, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT MIN(DISTINCT singer.Country) FROM singer WHERE singer.Age > 20", "score": -6.2167534828186035, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 GROUP BY singer.Country", "score": -6.487313270568848, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND 20", "score": -6.907250881195068, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT * FROM stadium", "score": -6.9735212326049805, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT * FROM stadium", "score": -7.1307477951049805, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT * FROM stadium", "score": -7.511853218078613, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are all distinct countries where singers above age 20 are from?", "inferred_code": "SELECT * FROM stadium", "score": -7.542511940002441, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.5503382763012086}
{"index": 9, "beams": [{"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20", "score": -9.109682252983475e-08, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 EXCEPT SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20", "score": -4.3036065101623535, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age > 20", "score": -4.416745662689209, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT * FROM stadium", "score": -4.904051780700684, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = 20", "score": -5.178988933563232, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer JOIN singer_in_concert ON singer.Country = singer_in_concert.concert_ID WHERE singer.Age > 20", "score": -5.217678546905518, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = \"VALUE\"", "score": -5.250097751617432, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer JOIN singer ON singer.Singer_ID = singer.Singer_ID WHERE singer.Age > 20", "score": -5.2741780281066895, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 AND singer.Name = 1", "score": -5.400676250457764, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT MIN(singer.Country) FROM singer WHERE singer.Age > 20", "score": -6.342337608337402, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20 GROUP BY singer.Country", "score": -6.473463535308838, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT DISTINCT singer.Country FROM singer WHERE singer.Age >= 20", "score": -6.560925006866455, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT * FROM stadium", "score": -6.762325286865234, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT * FROM stadium", "score": -6.8805694580078125, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT * FROM stadium", "score": -6.967503547668457, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}, {"orig_question": "What are  the different countries with singers above age 20?", "inferred_code": "SELECT * FROM stadium", "score": -7.07709264755249, "correct_code": "SELECT DISTINCT country FROM singer WHERE age  >  20"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.5246721747448196}
{"index": 14, "beams": [{"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000", "score": -1.3148608104529558e-06, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND 10000", "score": -3.3001017570495605, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 10000", "score": -3.845946788787842, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.093203067779541, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000", "score": -4.146198749542236, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity > 10000", "score": -4.176684379577637, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.256094455718994, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.280182361602783, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.281973838806152, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.833468914031982, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.9162774085998535, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -4.952434539794922, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -5.009930610656738, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -5.21297550201416, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -5.234960079193115, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "inferred_code": "SELECT * FROM stadium", "score": -5.3102498054504395, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.496415885342366, "gold_bleu_score": 0.4298473228968171}
{"index": 15, "beams": [{"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000", "score": -1.2082499551979708e-06, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND 10000", "score": -3.299198865890503, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 10000", "score": -3.932713031768799, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity > 10000", "score": -4.035600185394287, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000 EXCEPT SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000", "score": -4.069754123687744, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -4.109482288360596, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -4.265168190002441, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -4.2736616134643555, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT stadium.Location, stadium.Name FROM stadium JOIN stadium ON stadium.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity BETWEEN 5000 AND 10000", "score": -4.404539585113525, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -4.4464030265808105, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -4.517999172210693, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -5.038473129272461, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -5.053583145141602, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -5.101584434509277, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -5.104744911193848, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}, {"orig_question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "inferred_code": "SELECT * FROM stadium", "score": -5.1077446937561035, "correct_code": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.34300567229724765, "gold_bleu_score": 0.5080463440118614}
{"index": 16, "beams": [{"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium", "score": -2.7119822334498167e-05, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Capacity) FROM stadium", "score": -2.953655958175659, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -3.487016439437866, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium", "score": -3.504596471786499, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT AVG(stadium.Capacity), AVG(stadium.Average) FROM stadium", "score": -4.289069175720215, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT MAX(stadium.Average) FROM stadium", "score": -4.739259719848633, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium ORDER BY AVG(stadium.Average)", "score": -4.9925217628479, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT AVG(stadium.Average) FROM stadium", "score": -5.2014055252075195, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), MAX(stadium.Average) FROM stadium", "score": -5.350281715393066, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium ORDER BY AVG(stadium.Capacity)", "score": -5.375565052032471, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium GROUP BY stadium.Capacity", "score": -5.4421586990356445, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity / stadium.Average), AVG(stadium.Average) FROM stadium", "score": -5.529484272003174, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT AVG(stadium.Capacity) FROM stadium", "score": -5.650437831878662, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium INTERSECT SELECT MAX(stadium.Capacity), stadium.Average FROM stadium", "score": -5.746251583099365, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -5.753134727478027, "correct_code": "select max(capacity), average from stadium"}, {"orig_question": "What is the maximum capacity and the average of all stadiums ?", "inferred_code": "SELECT MAX(stadium.Capacity, stadium.Average), AVG(stadium.Average) FROM stadium", "score": -5.753665447235107, "correct_code": "select max(capacity), average from stadium"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8227274680990679, "gold_bleu_score": 0.6558561980334291}
{"index": 17, "beams": [{"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity) FROM stadium", "score": -6.419224519049749e-05, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Average), MAX(stadium.Capacity) FROM stadium", "score": -2.6849377155303955, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Average) FROM stadium", "score": -4.151574611663818, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -4.559016704559326, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity), \"maximum\" FROM stadium GROUP BY stadium.Average", "score": -4.932798862457275, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -4.972028732299805, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity), \"capacities\" FROM stadium GROUP BY stadium.Average", "score": -4.998389720916748, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity) FROM stadium GROUP BY stadium.Average", "score": -5.055912017822266, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity) FROM stadium WHERE stadium.Average", "score": -5.0819854736328125, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -5.2418718338012695, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity / stadium.Average), MAX(stadium.Capacity) FROM stadium", "score": -5.52175235748291, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity), \"for\" FROM stadium GROUP BY stadium.Average", "score": -5.525636672973633, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -5.570821285247803, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), MAX(stadium.Capacity), stadium.Average FROM stadium GROUP BY stadium.Average", "score": -5.671647071838379, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT AVG(stadium.Capacity), SUM(stadium.Capacity) FROM stadium", "score": -5.850777626037598, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}, {"orig_question": "What is the average and maximum capacities for all stadiums ?", "inferred_code": "SELECT * FROM stadium", "score": -6.106971740722656, "correct_code": "select avg(capacity) ,  max(capacity) from stadium"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6933199120478338}
{"index": 18, "beams": [{"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1", "score": -4.7128319238254335e-06, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY AVG(stadium.Average) DESC LIMIT 1", "score": -3.0596323013305664, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT AVG(stadium.Average) FROM stadium) ORDER BY stadium.Average DESC LIMIT 1", "score": -3.098398447036743, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY AVG(stadium.Average) DESC LIMIT 1", "score": -3.9460337162017822, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average LIMIT 1", "score": -4.0558905601501465, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.111734867095947, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average + stadium.Average DESC LIMIT 1", "score": -4.220528602600098, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.366174221038818, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY (stadium.Average - stadium.Average) DESC LIMIT 1", "score": -4.411527156829834, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium GROUP BY stadium.Average ORDER BY AVG(stadium.Average) DESC LIMIT 1", "score": -4.487796783447266, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1", "score": -4.742641925811768, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.757192611694336, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY (stadium.Average - stadium.Average) DESC LIMIT 1", "score": -4.935596942901611, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT AVG(stadium.Average) FROM stadium) ORDER BY stadium.Capacity DESC LIMIT 1", "score": -4.964263916015625, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -5.075925827026367, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -5.7092156410217285, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8157365128135114, "gold_bleu_score": 0.5315772844935617}
{"index": 19, "beams": [{"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1", "score": -6.5101221480290405e-06, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT AVG(stadium.Average) FROM stadium) ORDER BY stadium.Average DESC LIMIT 1", "score": -3.261728048324585, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY AVG(stadium.Average) DESC LIMIT 1", "score": -3.3220295906066895, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average LIMIT 1", "score": -3.914541006088257, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average + stadium.Average DESC LIMIT 1", "score": -4.079568862915039, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.232765197753906, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY AVG(stadium.Average) DESC LIMIT 1", "score": -4.266205310821533, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.336729526519775, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY (stadium.Average - stadium.Average) DESC LIMIT 1", "score": -4.4235711097717285, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1", "score": -4.620415210723877, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.709339141845703, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY (stadium.Average - stadium.Average) DESC LIMIT 1", "score": -4.836556911468506, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -4.956889629364014, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT AVG(stadium.Average) FROM stadium) ORDER BY stadium.Capacity DESC LIMIT 1", "score": -5.106080532073975, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Capacity DESC LIMIT 1", "score": -5.730747222900391, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}, {"orig_question": "What is the name and capacity for the stadium with the highest average attendance?", "inferred_code": "SELECT * FROM stadium", "score": -5.854675769805908, "correct_code": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7833740160876568, "gold_bleu_score": 0.5335794942619748}
{"index": 37, "beams": [{"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -3.871574640274048, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014", "score": -4.170827388763428, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer_in_concert.Singer_ID HAVING COUNT(*) = 2014", "score": -4.615620136260986, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -5.495959281921387, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -6.186283111572266, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.215921401977539, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.470889091491699, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.539006233215332, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Song_release_year = 2014", "score": -6.5415449142456055, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.57108211517334, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.5970845222473145, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.618062973022461, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -6.694284915924072, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -7.1590704917907715, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT * FROM stadium", "score": -7.263222694396973, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "List all singer names in concerts in year 2014.", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID", "score": -7.5980401039123535, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8169189647016428, "gold_bleu_score": 0.43155958694929036}
{"index": 38, "beams": [{"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -0.3582231104373932, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014", "score": -3.0578436851501465, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014 EXCEPT SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -3.5228021144866943, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON concert.Stadium_ID = concert.concert_ID WHERE concert.Year = 2014", "score": -3.8263766765594482, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Song_release_year = 2014", "score": -3.8728575706481934, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -4.306885242462158, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014", "score": -4.3268232345581055, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014 AND singer.Song_release_year = 2014", "score": -4.450314998626709, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Is_male = 2014", "score": -4.72886848449707, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT * FROM stadium", "score": -4.95495080947876, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_release_year = 2014", "score": -5.033179759979248, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT * FROM stadium", "score": -5.038545608520508, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT * FROM stadium", "score": -5.339757919311523, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Song_release_year = 2014", "score": -5.4647722244262695, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT * FROM stadium", "score": -5.50272798538208, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}, {"orig_question": "What are the names of the singers who performed in a concert in 2014?", "inferred_code": "SELECT * FROM stadium", "score": -5.627659320831299, "correct_code": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8837033884687949, "gold_bleu_score": 0.7810167884139785}
{"index": 39, "beams": [{"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE \"% Hey %\"", "score": -6.734688895448926e-08, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Song_Name LIKE \"% Hey %\"", "score": -3.48341703414917, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE \"% Hey %\" AND singer.Country LIKE \"% Hey %\"", "score": -3.828403949737549, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE MOD(\"% Hey %\", singer.Name) LIKE \"% Hey %\"", "score": -3.9096384048461914, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE MOD(\"% Hey %\", singer.Name) LIKE \"% singer.Country %\"", "score": -4.247340679168701, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name NOT LIKE \"% Hey %\"", "score": -4.565396785736084, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -4.915805339813232, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -4.9747633934021, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -4.981688976287842, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -5.045753479003906, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -5.294798374176025, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -5.357728481292725, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE MOD(singer.Song_Name, \"% Hey %\")", "score": -5.488840103149414, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -5.493037700653076, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT * FROM stadium", "score": -5.53711462020874, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE MOD(singer.Song_Name, \"Hey\")", "score": -5.580445289611816, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5488147115065772, "gold_bleu_score": 0.41258833651951116}
{"index": 40, "beams": [{"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE \"% Hey %\"", "score": -6.734688895448926e-08, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Song_Name LIKE \"% Hey %\"", "score": -3.602418899536133, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE \"% Hey %\" AND singer.Song_Name LIKE \"% Hey %\"", "score": -3.695030450820923, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE MOD(\"% Hey %\", singer.Song_Name) LIKE \"% Hey %\"", "score": -3.7481985092163086, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE MOD(\"% Hey %\", singer.Name) LIKE \"% Hey %\"", "score": -3.8832144737243652, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE MOD(\"% Hey %\", singer.Name) LIKE \"% singer.Country %\"", "score": -4.15067720413208, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -4.419356346130371, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name NOT LIKE \"% Hey %\"", "score": -4.463547706604004, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -4.863168716430664, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -4.894641399383545, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -4.945224285125732, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT singer.Name, singer.Country FROM singer WHERE MOD(singer.Song_Name, \"% Hey %\")", "score": -5.007569789886475, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -5.024947643280029, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -5.195300102233887, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -5.368311405181885, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}, {"orig_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "inferred_code": "SELECT * FROM stadium", "score": -5.382706642150879, "correct_code": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"}], "db_name": "concert_singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4897110706418868, "gold_bleu_score": 0.39519217433928816}
{"index": 45, "beams": [{"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10", "score": -3.195123383648024e-07, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 OR Pets.weight > 10", "score": -4.033503532409668, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.weight > 10", "score": -4.433941841125488, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND Pets.pet_age > 10", "score": -4.61934232711792, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Student", "score": -4.732787609100342, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 ORDER BY Pets.weight", "score": -5.311347961425781, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 GROUP BY 10", "score": -5.589268207550049, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) AS * FROM Pets WHERE Pets.weight > 10", "score": -5.624788761138916, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND \"Find\"", "score": -5.63845682144165, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND 10", "score": -5.706076622009277, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Student", "score": -5.721313953399658, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Student", "score": -5.843273639678955, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 100", "score": -6.010032653808594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT T(*) FROM Pets WHERE Pets.weight > 10", "score": -6.07774019241333, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Pets WHERE Pets.weight > 10", "score": -6.158519268035889, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "Find the number of pets whose weight is heavier than 10.", "inferred_code": "SELECT * FROM Student", "score": -6.2994842529296875, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7901339668801045, "gold_bleu_score": 0.4692432044538143}
{"index": 46, "beams": [{"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10", "score": -4.193600489088567e-07, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 OR Pets.weight > 10", "score": -3.8452389240264893, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.weight > 10", "score": -4.301045894622803, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND Pets.weight > 10", "score": -4.451752662658691, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -4.474143981933594, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND Pets.pet_age > 10", "score": -4.766013145446777, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 ORDER BY Pets.weight", "score": -5.30613374710083, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10 AND \"How\"", "score": -5.542016506195068, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT SUM(Pets.weight) FROM Pets WHERE Pets.weight > 10", "score": -5.548027515411377, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -5.5882768630981445, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -5.637454509735107, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -5.738216400146484, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT T(Pets.weight) FROM Pets WHERE Pets.weight > 10", "score": -5.752054691314697, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT COUNT(*) AS * FROM Pets WHERE Pets.weight > 10", "score": -5.752835750579834, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -5.89984655380249, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}, {"orig_question": "How many pets have a greater weight than 10?", "inferred_code": "SELECT * FROM Student", "score": -6.153451442718506, "correct_code": "SELECT count(*) FROM pets WHERE weight  >  10"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7847074838908663, "gold_bleu_score": 0.5099879247202272}
{"index": 47, "beams": [{"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -0.0007669926271773875, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age DESC LIMIT 1", "score": -4.275765895843506, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(Pets.pet_age) FROM Pets) ORDER BY Pets.pet_age ASC LIMIT 1", "score": -4.372872352600098, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(Pets.pet_age) FROM Pets)", "score": -4.497978687286377, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MAX(Pets.pet_age) FROM Pets)", "score": -4.5306477546691895, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT * FROM Student", "score": -4.563147068023682, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MAX(Pets.pet_age) FROM Pets) ORDER BY Pets.pet_age ASC LIMIT 1", "score": -4.585721969604492, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets JOIN Student ON Pets.PetID = Student.StuID ORDER BY Pets.pet_age ASC LIMIT 1", "score": -4.671113014221191, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"dog\"", "score": -5.120884895324707, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -5.163475513458252, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"youngest\"", "score": -5.897377967834473, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -5.955168724060059, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT * FROM Student", "score": -5.9977593421936035, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"the\"", "score": -6.4905900955200195, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT * FROM Student", "score": -6.5906782150268555, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the weight of the youngest dog.", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"of\"", "score": -6.7952423095703125, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4962362210439739, "gold_bleu_score": 0.33292391770749236}
{"index": 48, "beams": [{"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -0.04580683633685112, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT 1", "score": -0.8348473310470581, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -3.1546168327331543, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT SUM(Pets.weight) FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -4.167616844177246, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age DESC LIMIT 1", "score": -4.426713466644287, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT * FROM Student", "score": -4.874888896942139, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"dog\"", "score": -5.385339736938477, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT SUM(Pets.weight) FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -5.500981330871582, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.weight DESC LIMIT 1", "score": -5.837483882904053, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -5.885741710662842, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.weight LIMIT 1", "score": -5.988358497619629, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"weigh\"", "score": -5.9918341636657715, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT \"dog\"", "score": -6.076848030090332, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT * FROM Student", "score": -6.297067642211914, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT * FROM Student", "score": -6.338658809661865, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "How much does the youngest dog weigh?", "inferred_code": "SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"youngest\"", "score": -6.354613780975342, "correct_code": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4513675108845683, "gold_bleu_score": 0.24527760535281445}
{"index": 51, "beams": [{"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -0.0002490880433470011, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -1.2869287729263306, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Student.Age WHERE Student.Age > 20", "score": -1.8114728927612305, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Pets.pet_age WHERE Student.Age > 20", "score": -2.3128652572631836, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)", "score": -2.4138526916503906, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 OR Student.Age > 20", "score": -2.4270479679107666, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -2.627995491027832, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -2.6647303104400635, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -2.8024039268493652, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -2.8273792266845703, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 AND 20", "score": -3.025285005569458, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -3.0316412448883057, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 AND Student.Age > 20", "score": -3.0431222915649414, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 AND Pets.pet_age > 20", "score": -3.1044554710388184, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -3.2054178714752197, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "Find number of pets owned by students who are older than 20.", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.StuID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -3.2494421005249023, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7305965855449745, "gold_bleu_score": 0.49480331778468073}
{"index": 52, "beams": [{"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -0.0003753443597815931, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -1.2163963317871094, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Student.Age WHERE Student.Age > 20", "score": -1.6862879991531372, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.StuID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -1.8713566064834595, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Pets.pet_age WHERE Student.Age > 20", "score": -2.277495861053467, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)", "score": -2.424795627593994, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 OR Student.Age > 20", "score": -2.5314013957977295, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -2.6466667652130127, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -2.8305811882019043, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20", "score": -2.9407546520233154, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20", "score": -3.01363468170166, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Age > 20 AND 20", "score": -3.1187641620635986, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.StuID JOIN Student ON Student.StuID = Student.Age WHERE Student.Age > 20", "score": -3.2043936252593994, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Student", "score": -3.2400121688842773, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Student", "score": -3.3155739307403564, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}, {"orig_question": "How many pets are owned by students that have an age greater than 20?", "inferred_code": "SELECT * FROM Student", "score": -3.6929032802581787, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.820245542375528, "gold_bleu_score": 0.6038077483903634}
{"index": 53, "beams": [{"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"F\"", "score": -0.03598231077194214, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"F\"", "score": -0.3030727505683899, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"F\"", "score": -1.7539302110671997, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"F\"", "score": -2.0477590560913086, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"F\"", "score": -2.4758238792419434, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT Has_Pet.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"F\"", "score": -2.6462297439575195, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -2.771855592727661, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -2.9510366916656494, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -2.9837684631347656, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Student.Age WHERE Student.Sex = \"F\"", "score": -2.984379529953003, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"F\"", "score": -3.000666618347168, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -3.0476996898651123, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -3.0923428535461426, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT DISTINCT Has_Pet.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"F\"", "score": -3.1467905044555664, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -3.1669697761535645, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "Find the number of dog pets that are raised by female students (with sex F).", "inferred_code": "SELECT * FROM Student", "score": -3.2141969203948975, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6187161687779154, "gold_bleu_score": 0.4395136940629912}
{"index": 54, "beams": [{"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"dog\"", "score": -0.0031052851118147373, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"VALUE\"", "score": -0.755797266960144, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\"", "score": -0.7894406318664551, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"dog\"", "score": -0.8847579956054688, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"female\" AND Pets.PetType = \"dog\"", "score": -1.3435622453689575, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"many dog\"", "score": -1.548781394958496, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Student.Sex = \"dog\"", "score": -1.59585440158844, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"VALUE\"", "score": -1.6897050142288208, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"female\"", "score": -1.828417420387268, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"dog\"", "score": -1.8972963094711304, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Student.StuID = Has_Pet.StuID WHERE Student.Sex = \"VALUE\"", "score": -1.9009487628936768, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"VALUE dog\"", "score": -1.9061537981033325, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"VALUE\" AND Pets.PetType = \"How dog\"", "score": -2.0903754234313965, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"female\" AND Pets.PetType = \"VALUE\"", "score": -2.096301555633545, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT * FROM Student", "score": -2.180901288986206, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}, {"orig_question": "How many dog pets are raised by female students?", "inferred_code": "SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = \"female\"", "score": -2.40370512008667, "correct_code": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.09604420312594864, "gold_bleu_score": 0.360633671100424}
{"index": 55, "beams": [{"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT * FROM Student", "score": -4.8040289878845215, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets INTERSECT SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -5.089899063110352, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets ORDER BY COUNT(DISTINCT Pets.PetType)", "score": -5.2882304191589355, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT * FROM Student", "score": -5.612977027893066, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets WHERE Pets.PetType = \"VALUE\"", "score": -5.72293758392334, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) > COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -5.971461772918701, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -6.126893520355225, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType), COUNT(DISTINCT Pets.PetID) FROM Pets", "score": -6.238946437835693, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets WHERE Pets.PetType", "score": -6.856335639953613, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) > COUNT(DISTINCT Pets.PetID) FROM Pets", "score": -6.956242084503174, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT * FROM Student", "score": -7.0431294441223145, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT * FROM Student", "score": -7.467081069946289, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -7.488223075866699, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT T(DISTINCT Pets.PetType) FROM Pets", "score": -7.893054485321045, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "Find the number of distinct type of pets.", "inferred_code": "SELECT * FROM Student", "score": -7.897401809692383, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.5684519754157443}
{"index": 56, "beams": [{"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": 0.0, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -4.206905364990234, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets INTERSECT SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -4.766853332519531, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets EXCEPT SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -4.933021068572998, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -4.94033670425415, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets ORDER BY COUNT(DISTINCT Pets.PetType)", "score": -4.971056938171387, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -5.240939140319824, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) > COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -5.241922378540039, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -5.301542282104492, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType), COUNT(DISTINCT Pets.PetID) FROM Pets", "score": -5.770748615264893, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -5.780641555786133, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets", "score": -5.943400859832764, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -6.029725074768066, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) > COUNT(DISTINCT Pets.PetID) FROM Pets", "score": -6.089713096618652, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT COUNT(DISTINCT Pets.PetType) FROM Pets WHERE Pets.PetType", "score": -6.9500837326049805, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}, {"orig_question": "How many different types of pet are there?", "inferred_code": "SELECT * FROM Student", "score": -7.015099048614502, "correct_code": "SELECT count(DISTINCT pettype) FROM pets"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.7789520674608175}
{"index": 67, "beams": [{"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -0.002810725709423423, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -1.7090026140213013, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -3.3235528469085693, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets JOIN Student ON Pets.PetID = Student.StuID ORDER BY Pets.pet_age ASC LIMIT 1", "score": -3.8739736080169678, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -3.980898380279541, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -4.168529987335205, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -4.288150310516357, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -4.31181526184082, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age DESC LIMIT 1", "score": -4.322364330291748, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets", "score": -4.434669494628906, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"pet\"", "score": -4.624348163604736, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -4.6681108474731445, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -5.020185470581055, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -5.050687313079834, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT * FROM Student", "score": -5.056838035583496, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "Find the type and weight of the youngest pet.", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT \"youngest\"", "score": -5.087668418884277, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6822250261701632, "gold_bleu_score": 0.45397179740455745}
{"index": 68, "beams": [{"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -0.04180062189698219, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight LIMIT 1", "score": -0.9302695989608765, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT 1", "score": -1.2751728296279907, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -1.4589359760284424, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.pet_age FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -2.399219036102295, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT 1", "score": -2.8808634281158447, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.pet_age FROM Pets ORDER BY Pets.weight LIMIT 1", "score": -3.035639524459839, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT 1", "score": -3.1968770027160645, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight LIMIT 1", "score": -3.2618298530578613, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.pet_age FROM Pets ORDER BY Pets.weight ASC LIMIT 1", "score": -3.343883991241455, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT * FROM Student", "score": -3.34511399269104, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age DESC LIMIT 1", "score": -3.492288827896118, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age EXCEPT SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1", "score": -3.519777297973633, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT * FROM Student", "score": -3.653043031692505, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.weight DESC LIMIT 1", "score": -3.8010942935943604, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}, {"orig_question": "What type of pet is the youngest animal, and how much does it weigh?", "inferred_code": "SELECT Pets.PetType, Pets.pet_age FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1", "score": -3.834362268447876, "correct_code": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7168664083377443, "gold_bleu_score": 0.43709116404382253}
{"index": 69, "beams": [{"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1", "score": -8.512810723004804e-08, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 EXCEPT SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1", "score": -4.040510177612305, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.pet_age > 1", "score": -4.215926647186279, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 AND Pets.weight > 1", "score": -5.686212539672852, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1.1", "score": -5.70936918258667, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -5.838252544403076, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 OR Pets.pet_age > 1", "score": -5.9114990234375, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 GROUP BY Pets.PetID", "score": -6.076786041259766, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 ORDER BY Pets.pet_age", "score": -6.334271430969238, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -6.339644908905029, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -6.450471878051758, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -6.680802822113037, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -6.784124374389648, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age < 1", "score": -7.159504413604736, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -7.308280944824219, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "Find the id and weight of all pets whose age is older than 1.", "inferred_code": "SELECT * FROM Student", "score": -7.315321445465088, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7760914813497575, "gold_bleu_score": 0.5451571519942929}
{"index": 70, "beams": [{"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1", "score": -2.1282029649682954e-07, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 EXCEPT SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1", "score": -3.9692254066467285, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.pet_age > 1", "score": -4.153411865234375, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1.1", "score": -5.425467491149902, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 AND Pets.weight > 1", "score": -5.525633811950684, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -5.6709303855896, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 GROUP BY Pets.PetID", "score": -5.926059246063232, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1 ORDER BY Pets.pet_age", "score": -6.15859842300415, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.177291393280029, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.225687503814697, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.226484775543213, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.313165664672852, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.355727672576904, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.646721839904785, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT * FROM Student", "score": -6.662070274353027, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}, {"orig_question": "What is the id and weight of every pet who is older than 1?", "inferred_code": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age < 1", "score": -7.186043739318848, "correct_code": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9053772812919615, "gold_bleu_score": 0.5041573612056691}
{"index": 75, "beams": [{"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "score": -0.019092664122581482, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "score": -0.8772873878479004, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = (SELECT DISTINCT Has_Pet.StuID FROM Has_Pet)", "score": -2.576767921447754, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -2.8475489616394043, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -3.1990513801574707, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -3.273340940475464, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -3.483804702758789, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = 0", "score": -3.4856157302856445, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT * FROM Student", "score": -3.7283713817596436, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -3.7699410915374756, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT MIN(Student.Fname), Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "score": -3.957909345626831, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT * FROM Student", "score": -4.244162559509277, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID ORDER BY \"Has_Pet\"", "score": -4.3752617835998535, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age, Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "score": -4.472248554229736, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT * FROM Student", "score": -4.495673656463623, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "Find the first name and age of students who have a pet.", "inferred_code": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.StuID", "score": -4.58673620223999, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9208954405452506, "gold_bleu_score": 0.6900602525540834}
{"index": 76, "beams": [{"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID", "score": -0.0349956713616848, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -0.4929109811782837, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -1.5806118249893188, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age, Pets.pet_age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -1.9537745714187622, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -2.0367181301116943, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -2.1808700561523438, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = (SELECT DISTINCT Has_Pet.StuID FROM Has_Pet)", "score": -2.3180809020996094, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IN (SELECT Has_Pet.StuID FROM Has_Pet)", "score": -2.3551974296569824, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age, \"Has_Pet\" FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -2.4057514667510986, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -2.5008435249328613, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -2.51131534576416, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -2.5430057048797607, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT * FROM Student", "score": -2.5625157356262207, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age, Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -2.6544151306152344, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age, Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -2.66833233833313, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}, {"orig_question": "What are the different first names and ages of the students who do have pets?", "inferred_code": "SELECT DISTINCT Student.Fname, Student.Age, Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID", "score": -2.877251148223877, "correct_code": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9054040467497486, "gold_bleu_score": 0.6642094554712518}
{"index": 83, "beams": [{"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -0.006719255354255438, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age = 3", "score": -1.2100164890289307, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Has_Pet.StuID WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -1.7979283332824707, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Pets.PetID WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -1.9076412916183472, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3", "score": -1.9324734210968018, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.StuID = \"cat\"", "score": -1.9446934461593628, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT * FROM Student", "score": -2.0161352157592773, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = \"cat\"", "score": -2.03918194770813, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT * FROM Student", "score": -2.0974881649017334, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.StuID = \"cat\" INTERSECT SELECT Student.LName FROM Student WHERE Student.Age = 3", "score": -2.161180019378662, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.Age = 3", "score": -2.1886255741119385, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Pets.pet_age WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -2.2361793518066406, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.StuID = \"cat\" INTERSECT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \"cat\"", "score": -2.4400086402893066, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \"cat\"", "score": -2.47163987159729, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT * FROM Student", "score": -2.6875174045562744, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "Find the last name of the student who has a cat that is age 3.", "inferred_code": "SELECT * FROM Student", "score": -2.8441970348358154, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5903025343708495, "gold_bleu_score": 0.4701936104733091}
{"index": 84, "beams": [{"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3", "score": -0.12678439915180206, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -0.42784106731414795, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age = 3 AND Pets.PetType = \"cat\"", "score": -0.4784875810146332, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.Age = 3 AND Student.StuID = \"cat\"", "score": -0.8869545459747314, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age = 3", "score": -1.2022541761398315, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Has_Pet.StuID = 3", "score": -1.3149189949035645, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.StuID = \"cat\"", "score": -1.4063166379928589, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Pets.PetID WHERE Pets.PetType = \"cat\" AND Student.Age = 3", "score": -1.4368585348129272, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Pets.PetID = Pets.PetID WHERE Student.Age = 3 AND Pets.PetType = \"cat\"", "score": -1.5472854375839233, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.Age = 3 AND Student.StuID = 3", "score": -1.5595003366470337, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Has_Pet.StuID = \"cat\"", "score": -1.6958229541778564, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.StuID = 3", "score": -1.707040786743164, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \"cat\"", "score": -1.9017775058746338, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = \"cat\"", "score": -1.9669604301452637, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID AND Student.StuID = Has_Pet.StuID WHERE Student.Age = 3", "score": -2.0420644283294678, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}, {"orig_question": "What is the last name of the student who has a cat that is 3 years old?", "inferred_code": "SELECT Student.LName FROM Student WHERE Student.Age = 3 AND Student.Age = 3", "score": -2.1166582107543945, "correct_code": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"}], "db_name": "pets_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5986461536157968, "gold_bleu_score": 0.4787780529997716}
{"index": 87, "beams": [{"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.291956901550293, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE \"How\"", "score": -7.455921173095703, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "score": -7.516194820404053, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE \"many\"", "score": -7.781882286071777, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.832127571105957, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -7.871365070343018, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "score": -8.079309463500977, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.430919647216797, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.676907539367676, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.787812232971191, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -8.976128578186035, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT T(continents.Continent) FROM continents", "score": -9.205021858215332, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT SUM(continents.Continent) FROM continents", "score": -9.404534339904785, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -9.529059410095215, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "How many continents are there?", "inferred_code": "SELECT * FROM continents", "score": -9.590599060058594, "correct_code": "SELECT count(*) FROM CONTINENTS"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 88, "beams": [{"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents", "score": 0.0, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents UNION SELECT COUNT(*) FROM continents", "score": -5.735091209411621, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE \"What\"", "score": -7.747452735900879, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -7.7616448402404785, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM continents", "score": -7.846981048583984, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents ORDER BY continents.Continent", "score": -7.892343044281006, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE \"the\"", "score": -7.9945573806762695, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) AS continents.Continent FROM continents", "score": -8.304198265075684, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE \"number\"", "score": -8.364245414733887, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -8.388310432434082, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT COUNT(*) AS continents.ContId FROM continents", "score": -8.4446439743042, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -8.909480094909668, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT T(continents.Continent) FROM continents", "score": -9.35429859161377, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT SUM(continents.Continent) FROM continents", "score": -9.36870288848877, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -9.601141929626465, "correct_code": "SELECT count(*) FROM CONTINENTS"}, {"orig_question": "What is the number of continents?", "inferred_code": "SELECT * FROM continents", "score": -9.704046249389648, "correct_code": "SELECT count(*) FROM CONTINENTS"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9632251234280759, "gold_bleu_score": 0.4436616545831824}
{"index": 91, "beams": [{"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE \"How\"", "score": -7.275554656982422, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.3115105628967285, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "score": -7.4732842445373535, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE \"many\"", "score": -7.4821977615356445, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.53261137008667, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -7.555185317993164, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) AS countries.CountryName FROM countries", "score": -7.607938289642334, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) AS countries.CountryId FROM countries", "score": -8.096624374389648, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.530613899230957, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.621058464050293, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.724148750305176, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -8.748512268066406, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT COUNT(*) FROM countries AS 0", "score": -8.80543041229248, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -9.460039138793945, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries are listed?", "inferred_code": "SELECT * FROM continents", "score": -9.525529861450195, "correct_code": "SELECT count(*) FROM COUNTRIES"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9347368650219564, "gold_bleu_score": 0.7784171087249697}
{"index": 92, "beams": [{"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries", "score": 0.0, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.1315598487854, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries ORDER BY COUNT(*)", "score": -7.236883163452148, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE \"How\"", "score": -7.424388408660889, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE \"many\"", "score": -7.580938816070557, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.620875358581543, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -7.668680667877197, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries", "score": -7.98726749420166, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) FROM countries ORDER BY countries.CountryName", "score": -8.12243366241455, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.523938179016113, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.658432960510254, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.712503433227539, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.739093780517578, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT COUNT(*) AS countries.CountryId FROM countries", "score": -8.819731712341309, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT * FROM continents", "score": -8.860655784606934, "correct_code": "SELECT count(*) FROM COUNTRIES"}, {"orig_question": "How many countries exist?", "inferred_code": "SELECT T(*) FROM countries", "score": -9.239806175231934, "correct_code": "SELECT count(*) FROM COUNTRIES"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9951419219081963, "gold_bleu_score": 0.6593146670851964}
{"index": 95, "beams": [{"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -0.00018191523849964142, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -2.961756944656372, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MIN(cars_data.Horsepower) LIMIT 1", "score": -4.692885875701904, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -4.744735240936279, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -4.86749267578125, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY (cars_data.Horsepower - cars_data.MPG) LIMIT 1", "score": -5.492258071899414, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.633941650390625, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.MPG LIMIT 1", "score": -5.689480304718018, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.726852893829346, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower < cars_data.Cylinders LIMIT 1", "score": -5.80606746673584, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY (cars_data.Horsepower - cars_data.Cylinders) LIMIT 1", "score": -5.823376178741455, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.970090389251709, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -5.990005016326904, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -6.003685474395752, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT * FROM continents", "score": -6.108670711517334, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "Which model of the car has the minimum horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders LIMIT 1", "score": -6.150160789489746, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.533777924897108, "gold_bleu_score": 0.5233909686175094}
{"index": 96, "beams": [{"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -0.1361255794763565, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -2.199432611465454, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MIN(cars_data.Horsepower) FROM cars_data) ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -2.927875518798828, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -3.4050774574279785, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) ASC LIMIT 1", "score": -3.9054062366485596, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MIN(cars_data.Horsepower) FROM cars_data) ORDER BY cars_data.Horsepower LIMIT 1", "score": -4.609982490539551, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) ASC LIMIT 1", "score": -4.622377872467041, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1", "score": -4.6509294509887695, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT * FROM continents", "score": -4.910742282867432, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = (SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1)", "score": -4.9962263107299805, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.Horsepower = (SELECT MIN(cars_data.Horsepower) FROM cars_data)", "score": -5.255618095397949, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1", "score": -5.3747663497924805, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MIN(cars_data.Horsepower) FROM cars_data) ORDER BY cars_data.Horsepower", "score": -5.520144939422607, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1)", "score": -5.6247711181640625, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MIN(cars_data.Horsepower) FROM cars_data)", "score": -5.628939151763916, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}, {"orig_question": "What is the model of the car with the smallest amount of horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -5.63499116897583, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.521297538194571, "gold_bleu_score": 0.5370274810298894}
{"index": 99, "beams": [{"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970", "score": -1.2391597032546997, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Id = 1970", "score": -1.6332526206970215, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make LIKE \"1970 %\"", "score": -2.2373762130737305, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.3046834468841553, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = 1970", "score": -2.7804017066955566, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.824237823486328, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970", "score": -2.86356520652771, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Model = 1970", "score": -2.978029727935791, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.13959002494812, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.2070531845092773, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.2611136436462402, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Id = 1970", "score": -3.3043441772460938, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.3501129150390625, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.4874539375305176, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.5333924293518066, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "Find the name of the makers that produced some cars in the year of 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.5493664741516113, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5697427297227443, "gold_bleu_score": 0.33716969479961123}
{"index": 100, "beams": [{"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970", "score": -1.7064911127090454, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970", "score": -2.307213068008423, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -2.419294834136963, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Model = 1970", "score": -3.0221011638641357, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.1044023036956787, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE \"cars_data\" = 1970", "score": -3.3498663902282715, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.355962038040161, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.3611981868743896, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.386733055114746, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Id = 1970", "score": -3.3951478004455566, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.405379295349121, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.4876837730407715, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.565185785293579, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.576805591583252, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT DISTINCT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Model = 1970", "score": -3.6020760536193848, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}, {"orig_question": "What is the name of the different car makers who produced a car in 1970?", "inferred_code": "SELECT * FROM continents", "score": -3.6405534744262695, "correct_code": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6078346012645711, "gold_bleu_score": 0.4190385829767351}
{"index": 103, "beams": [{"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -3.7133846282958984, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -3.7863659858703613, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > \"after 1980\"", "score": -4.1062750816345215, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.106478214263916, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.243335723876953, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.356201648712158, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make LIKE \"1980 %\"", "score": -4.420217514038086, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -4.532747268676758, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.554187774658203, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model WHERE car_names.Make > 1980", "score": -4.640380382537842, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.727887153625488, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.757996082305908, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON car_names.Model = model_list.Model WHERE car_names.Make > 1980", "score": -4.790756702423096, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId WHERE car_names.Make > 1980", "score": -4.822389602661133, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.83681058883667, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "Which distinct car models are the produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.859866619110107, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6324317324932079, "gold_bleu_score": 0.38568966480540096}
{"index": 104, "beams": [{"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -2.6708343029022217, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id WHERE cars_data.Year > 1980", "score": -3.024026870727539, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"% 1980 %\"", "score": -3.1687393188476562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.347339630126953, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.3666625022888184, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.5540173053741455, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -3.7920780181884766, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker LIKE \"1980 %\"", "score": -3.857045888900757, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.141607284545898, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker > 1980", "score": -4.422467231750488, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker IN (SELECT model_list.Model FROM model_list WHERE 1980)", "score": -4.729543209075928, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.795156955718994, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker = 1980", "score": -4.898097038269043, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.920012950897217, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.086368083953857, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}, {"orig_question": "What are the different models for the cards produced after 1980?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id WHERE cars_data.Accelerate > 1980", "score": -5.152319431304932, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3296367547361341, "gold_bleu_score": 0.39657492397635297}
{"index": 111, "beams": [{"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw\"", "score": -2.6327614784240723, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw\"", "score": -2.7052624225616455, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw sw\"", "score": -2.829586982727051, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw\"", "score": -2.9081015586853027, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -2.9714138507843018, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -3.033278226852417, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -3.1487009525299072, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw sw\"", "score": -3.3908586502075195, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -3.4838085174560547, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw\"", "score": -3.4906086921691895, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw\"", "score": -3.5012876987457275, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -3.6971194744110107, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -3.963179588317871, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw sw\"", "score": -4.074957370758057, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.354617118835449, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.380729675292969, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7756555996183027, "gold_bleu_score": 0.5737072422516987}
{"index": 112, "beams": [{"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -2.7328004837036133, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -2.9669318199157715, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\"", "score": -3.3266913890838623, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"sw\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -3.6511056423187256, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw sw)\"", "score": -3.7980847358703613, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -3.889164447784424, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -3.979125499725342, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM continents", "score": -4.022599220275879, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"car_names\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw sw)\"", "score": -4.048001289367676, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw)\"", "score": -4.098222255706787, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw)\"", "score": -4.159835338592529, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw)\"", "score": -4.251463890075684, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw)\"", "score": -4.360431671142578, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw sw\"", "score": -4.714039325714111, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT \"cars_data\" FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw sw)\"", "score": -4.716909885406494, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}, {"orig_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "inferred_code": "SELECT * FROM car_names WHERE car_names.Make = \"amc hornet sportabout (sw)\" AND car_names.Model = \"amc hornet sportabout (sw sw sw)\"", "score": -5.025534629821777, "correct_code": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.670266005827687, "gold_bleu_score": 0.535150711315085}
{"index": 113, "beams": [{"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\"", "score": -0.00023803385556675494, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = \"france\"", "score": -3.2128937244415283, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\" AND countries.Continent = \"france\"", "score": -3.605031728744507, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\" AND car_makers.Country = \"france\"", "score": -3.7398054599761963, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\"", "score": -3.91021990776062, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"france\" ORDER BY COUNT(*)", "score": -3.9104068279266357, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.092915058135986, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.26344633102417, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.2880120277404785, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.330225944519043, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.452691555023193, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.481133460998535, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.490850925445557, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.569299221038818, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.610018253326416, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "How many car makers are there in france?", "inferred_code": "SELECT * FROM continents", "score": -4.638680934906006, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3945539413049298, "gold_bleu_score": 0.4512770116685854}
{"index": 114, "beams": [{"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"", "score": -7.752325473120436e-06, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryName = \"France\"", "score": -2.938812494277954, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = \"France\"", "score": -3.1611924171447754, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\" AND car_makers.Maker = \"France\"", "score": -3.4953107833862305, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\" AND car_makers.Country = \"France\"", "score": -3.6247525215148926, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -3.746640682220459, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"", "score": -3.9278767108917236, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.140201568603516, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.2176337242126465, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) AS car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"", "score": -4.3148417472839355, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.3494768142700195, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.4438347816467285, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.500499725341797, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.5097455978393555, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName LIKE \"France\"", "score": -4.642597675323486, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}, {"orig_question": "What is the number of makers of care in France?", "inferred_code": "SELECT * FROM continents", "score": -4.679065704345703, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.11155600984978531, "gold_bleu_score": 0.3051365360302862}
{"index": 115, "beams": [{"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "score": -8.195891859941185e-05, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -2.2953028678894043, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -3.197758436203003, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -3.5252344608306885, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\" OR countries.CountryName = \"usa\"", "score": -3.9981672763824463, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\" OR countries.Continent = \"usa\"", "score": -4.050644397735596, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -4.06455135345459, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries JOIN countries ON countries.Continent = countries.CountryId WHERE countries.CountryName = \"usa\"", "score": -4.397671699523926, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -4.454626083374023, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM countries WHERE countries.CountryName = \"usa\"", "score": -5.088419437408447, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.2264723777771, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.240957260131836, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.265318393707275, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = MOD(\"usa\", countries.Continent)", "score": -5.312150955200195, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.325707912445068, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "How many car models are produced in the usa?", "inferred_code": "SELECT * FROM continents", "score": -5.496725559234619, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.11796224567561697, "gold_bleu_score": 0.32952410232413465}
{"index": 116, "beams": [{"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.CountryName = \"VALUE VALUE\"", "score": -0.46678483486175537, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.CountryName = \"VALUE\"", "score": -0.56637042760849, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN continents ON model_list.Maker = continents.ContId WHERE continents.Continent = \"VALUE VALUE\"", "score": -1.168687105178833, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.CountryName = \"United VALUE\"", "score": -1.1848199367523193, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN continents ON model_list.Maker = continents.ContId WHERE continents.Continent = \"VALUE\"", "score": -1.282179355621338, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.CountryName = \"United\"", "score": -1.3979368209838867, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN continents ON model_list.Maker = continents.ContId WHERE continents.Continent = \"United VALUE\"", "score": -1.8789948225021362, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.CountryName = \"VALUE States\"", "score": -2.046031951904297, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN continents ON model_list.Maker = continents.ContId WHERE continents.Continent = \"United\"", "score": -2.0961356163024902, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN countries ON model_list.Maker = countries.CountryId WHERE countries.Continent = \"VALUE\"", "score": -2.19154691696167, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"VALUE VALUE\"", "score": -2.214221239089966, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.2585930824279785, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.3356473445892334, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT * FROM continents", "score": -2.552602767944336, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM countries WHERE countries.CountryName = \"United VALUE\"", "score": -2.834479570388794, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}, {"orig_question": "What is the count of the car models produced in the United States?", "inferred_code": "SELECT COUNT(*) FROM continents WHERE continents.Continent = \"VALUE VALUE\"", "score": -3.0265579223632812, "correct_code": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2221017090663765, "gold_bleu_score": 0.35058877337520394}
{"index": 117, "beams": [{"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.09767207503318787, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.460622638463974, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Cylinders = 4", "score": -4.164313316345215, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -4.270905017852783, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -4.489478588104248, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Cylinders = 4", "score": -4.531736373901367, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -4.639925479888916, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 %\"", "score": -4.657232284545898, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.934581756591797, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -4.976866722106934, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -5.004710674285889, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -5.005251407623291, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -5.0196123123168945, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.MPG) FROM cars_data WHERE cars_data.MPG = 4", "score": -5.084888458251953, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -5.251007556915283, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) AS cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4", "score": -5.4762163162231445, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4306726347626191, "gold_bleu_score": 0.5615306825682217}
{"index": 118, "beams": [{"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4", "score": -0.0052492753602564335, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -1.2611223459243774, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4", "score": -2.314445734024048, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Cylinders = 4", "score": -3.7439119815826416, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = 4 AND cars_data.Cylinders = 4", "score": -4.579904079437256, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.586221694946289, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.593893051147461, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders LIKE \"4 : %\"", "score": -5.007563591003418, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = \"with 4\"", "score": -5.130006790161133, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders <= 4", "score": -5.178349018096924, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.246155261993408, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.MPG = with", "score": -5.584965229034424, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.64150857925415, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) AS cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4", "score": -5.733649730682373, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Id = 4", "score": -6.059383392333984, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}, {"orig_question": "What is the average miles per gallon of all the cards with 4 cylinders?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 4", "score": -6.114271640777588, "correct_code": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5062855161350062, "gold_bleu_score": 0.5998369108855235}
{"index": 119, "beams": [{"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1", "score": -0.15799041092395782, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -0.5265297889709473, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight LIMIT 1", "score": -0.5512807965278625, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders DESC LIMIT 1", "score": -0.7897455096244812, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 EXCEPT SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974", "score": -1.793596625328064, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Cylinders LIMIT 1974", "score": -1.967226266860962, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight ASC LIMIT 1", "score": -2.022749900817871, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "score": -2.0280590057373047, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight EXCEPT SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974", "score": -2.0906882286071777, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight EXCEPT SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "score": -2.120621919631958, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -2.1591572761535645, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight EXCEPT SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 1974", "score": -2.195486307144165, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 ORDER BY cars_data.Weight DESC LIMIT 1", "score": -2.2450382709503174, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "score": -2.3525915145874023, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "score": -2.446901798248291, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 EXCEPT SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 1974", "score": -2.634509801864624, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5328093211516977, "gold_bleu_score": 0.35134229728206146}
{"index": 120, "beams": [{"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974", "score": -0.12527801096439362, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8", "score": -0.5204443335533142, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 8", "score": -0.5629496574401855, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 1974", "score": -0.9445576071739197, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.MPG = 8", "score": -1.0580251216888428, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 8", "score": -1.1367437839508057, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8", "score": -1.302892804145813, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT * FROM continents", "score": -1.3067653179168701, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 1974", "score": -1.3553903102874756, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 1974", "score": -1.4826912879943848, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 8", "score": -1.5496478080749512, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 1974", "score": -1.5750043392181396, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Horsepower = 8", "score": -1.6296266317367554, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders = 1974", "score": -1.6526281833648682, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 8", "score": -1.733515739440918, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}, {"orig_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "inferred_code": "SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Id = 8", "score": -1.8343510627746582, "correct_code": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3875925619916706, "gold_bleu_score": 0.4177744744793047}
{"index": 121, "beams": [{"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Model FROM model_list", "score": -6.75762414932251, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Maker, model_list.Model FROM model_list", "score": -7.024619102478027, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.Maker, model_list.Model FROM model_list", "score": -7.512301445007324, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.530071258544922, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.ModelId, model_list.Model FROM model_list", "score": -7.599713325500488, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -8.29935073852539, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.Model FROM model_list", "score": -8.36371898651123, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Maker FROM model_list", "score": -8.940637588500977, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.ModelId, model_list.Model FROM model_list", "score": -9.117402076721191, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.Maker FROM model_list", "score": -9.210886001586914, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.248181343078613, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.353439331054688, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.ModelId FROM model_list", "score": -9.61120319366455, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.ModelId FROM model_list", "score": -10.824075698852539, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.118500709533691, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are all the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.98186206817627, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7619606669896174, "gold_bleu_score": 0.7354024465560612}
{"index": 122, "beams": [{"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker", "score": -5.4410881996154785, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id", "score": -5.523560047149658, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.462263584136963, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.654947280883789, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -6.971635341644287, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id", "score": -7.236696720123291, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.740418910980225, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.783396244049072, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.80366325378418, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT model_list.Maker, model_list.Model FROM model_list", "score": -7.945985317230225, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -7.977357387542725, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -8.688998222351074, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -8.855775833129883, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.045021057128906, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -9.423761367797852, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}, {"orig_question": "What are the makers and models?", "inferred_code": "SELECT * FROM continents", "score": -11.370327949523926, "correct_code": "SELECT Maker ,  Model FROM MODEL_LIST"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7952944295437917, "gold_bleu_score": 0.7453771966019811}
{"index": 125, "beams": [{"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "score": -1.9969519371443312e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 OR cars_data.Horsepower > 150", "score": -4.056581020355225, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 ORDER BY COUNT(*)", "score": -4.772099494934082, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -4.8779616355896, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "score": -5.013363361358643, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Horsepower > 150", "score": -5.1872239112854, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders", "score": -5.195068836212158, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 OR cars_data.Horsepower < 150", "score": -5.205615520477295, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.6899333000183105, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) AS cars_data.Id FROM cars_data WHERE cars_data.Horsepower > 150", "score": -5.938746452331543, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 ORDER BY cars_data.Horsepower", "score": -6.010568618774414, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.022346019744873, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "score": -6.059757709503174, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.132729530334473, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.164302349090576, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of the cars with horsepower more than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.168044567108154, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2768556786621631, "gold_bleu_score": 0.5670265403942741}
{"index": 126, "beams": [{"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150", "score": -3.794210101659701e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 OR cars_data.Horsepower > 150", "score": -3.853395700454712, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders > 150", "score": -4.600048542022705, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 ORDER BY COUNT(*)", "score": -4.695878982543945, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -4.900256156921387, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders < 150", "score": -4.992789268493652, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Horsepower > 150", "score": -5.138468265533447, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150 AND cars_data.Cylinders", "score": -5.207671642303467, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.561070442199707, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) AS cars_data.Id FROM cars_data WHERE cars_data.Horsepower > 150", "score": -5.8508076667785645, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.855607032775879, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -5.870899677276611, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 1500", "score": -6.114899635314941, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.116250038146973, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT * FROM continents", "score": -6.127025127410889, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}, {"orig_question": "What is the number of cars with a horsepower greater than 150?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower = 150", "score": -6.37589168548584, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.23696665203912448, "gold_bleu_score": 0.5424972916306144}
{"index": 131, "beams": [{"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.007672721520066261, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.935111403465271, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -0.9555193185806274, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.2344446182250977, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.396161437034607, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.881677269935608, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.9421378374099731, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -1.9533963203430176, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.0659050941467285, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.107313871383667, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.123568296432495, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.3056998252868652, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.4373674392700195, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.462261915206909, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.751944065093994, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -2.9324581623077393, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.12940742238583525, "gold_bleu_score": 0.4059074075887936}
{"index": 132, "beams": [{"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model WHERE cars_data.Cylinders = 3", "score": -0.087344229221344, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -0.2896858751773834, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -0.7035402059555054, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.0678576231002808, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model GROUP BY car_names.Model HAVING MAX(cars_data.Cylinders) = 3", "score": -1.2814635038375854, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.4641211032867432, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model GROUP BY car_names.MakeId HAVING MAX(cars_data.Cylinders) = 3", "score": -1.554072380065918, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.6600061655044556, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.7003365755081177, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.7461260557174683, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -1.8296951055526733, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model WHERE cars_data.Cylinders <= 3", "score": -1.8688468933105469, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT cars_data.Horsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model GROUP BY car_names.Model ORDER BY MAX(cars_data.Cylinders) DESC LIMIT 3", "score": -1.9176007509231567, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3", "score": -2.0238254070281982, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT MAX(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model", "score": -2.1271979808807373, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "inferred_code": "SELECT * FROM continents", "score": -2.288769245147705, "correct_code": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4564941627572079, "gold_bleu_score": 0.36384442252305327}
{"index": 133, "beams": [{"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.23087178170681, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 1", "score": -1.9010581970214844, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY MAX(cars_data.Horsepower) DESC LIMIT 1", "score": -2.352836847305298, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data) ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -2.912599563598633, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.08874773979187, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Cylinders ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.1155381202697754, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -3.2503514289855957, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -3.3430182933807373, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT CAR_NAMES(cars_data.Horsepower) FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.4565813541412354, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.548572063446045, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.MPG ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.7765135765075684, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Edispl ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.795302152633667, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT MAX(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -4.224949836730957, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT * FROM continents", "score": -4.382745742797852, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data)", "score": -4.706263542175293, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}, {"orig_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY \"cars_data\" ORDER BY cars_data.Horsepower DESC LIMIT 1", "score": -4.807730674743652, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.27617264443734724, "gold_bleu_score": 0.3466161861071316}
{"index": 134, "beams": [{"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "score": -0.00011682649346766993, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT 1", "score": -2.731677770614624, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT * FROM continents", "score": -3.8159265518188477, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.342207431793213, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY SUM(cars_data.MPG) DESC LIMIT 1", "score": -4.740118503570557, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1", "score": -4.993327617645264, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY MAX(cars_data.MPG) DESC LIMIT 1", "score": -5.019182205200195, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.Id FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1", "score": -5.333491325378418, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG ASC LIMIT 1", "score": -5.646669387817383, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT \"mp\"", "score": -5.761899471282959, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data)", "score": -5.78992223739624, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data GROUP BY cars_data.MPG ORDER BY cars_data.MPG DESC LIMIT 1", "score": -6.03068733215332, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT * FROM continents", "score": -6.062188148498535, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC", "score": -6.201369762420654, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT \"highest\"", "score": -6.278343677520752, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}, {"orig_question": "What is the car model with the highest mpg ?", "inferred_code": "SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.MPG DESC LIMIT \"mp\"", "score": -6.417850494384766, "correct_code": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.551539738355725, "gold_bleu_score": 0.32271786982877265}
{"index": 135, "beams": [{"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -1.1981711622865987e-07, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 EXCEPT SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.3314907550811768, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 INTERSECT SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.5198214054107666, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980", "score": -3.724273920059204, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model WHERE cars_data.Year < 1980", "score": -4.238885402679443, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 ORDER BY AVG(cars_data.Horsepower)", "score": -4.337562561035156, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Year < 1980", "score": -4.479599952697754, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.527399063110352, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT {'avg': 'cars_data.Horsepower'} IN (cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.743976593017578, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -4.780360698699951, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) != AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.825684070587158, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.873350143432617, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "score": -5.027876853942871, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT AVG(cars_data.Horsepower) AS avg FROM cars_data WHERE cars_data.Year < 1980 LIMIT 1", "score": -5.4790544509887695, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.557376384735107, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}, {"orig_question": "What is the average horsepower of the cars before 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.3695526123046875, "correct_code": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3922101614771868, "gold_bleu_score": 0.6124526275973162}
{"index": 136, "beams": [{"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.9939038742886623e-08, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 EXCEPT SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.4048545360565186, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 INTERSECT SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -3.619478940963745, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980", "score": -3.8825461864471436, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.Model WHERE cars_data.Year < 1980", "score": -4.201425075531006, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 ORDER BY AVG(cars_data.Horsepower)", "score": -4.3376264572143555, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -4.629858016967773, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT {'avg': 'cars_data.Horsepower'} IN (cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.852139472961426, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) != AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.869232654571533, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -4.897749900817871, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980", "score": -4.962843894958496, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980 AND cars_data.Year < 1980", "score": -5.196766376495361, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year LIKE \"1980 %\"", "score": -5.490911960601807, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -5.569945812225342, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -6.252115249633789, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}, {"orig_question": "What is the average horsepower for all cars produced before 1980 ?", "inferred_code": "SELECT * FROM continents", "score": -6.294867038726807, "correct_code": "select avg(horsepower) from cars_data where year  <  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4445976933306387, "gold_bleu_score": 0.6108103954149584}
{"index": 137, "beams": [{"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\"", "score": -0.001414021011441946, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -1.5901645421981812, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -2.884117364883423, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -2.9180831909179688, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.213289976119995, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN cars_data ON cars_data.Id = cars_data.Id WHERE car_makers.FullName = \"volvo\"", "score": -3.237156391143799, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\"", "score": -3.285083293914795, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY AVG(cars_data.Edispl)", "score": -3.621159553527832, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.MPG = car_names.MakeId WHERE car_names.Model = \"volvo\"", "score": -3.6408746242523193, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.7501299381256104, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -3.7518887519836426, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -4.089545726776123, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.110544204711914, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.47190523147583, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT * FROM continents", "score": -5.663363456726074, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl of the cars of model volvo?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY AVG(cars_data.Edispl) DESC LIMIT 1", "score": -5.744853973388672, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6659678323001148, "gold_bleu_score": 0.605423970816063}
{"index": 138, "beams": [{"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data", "score": -7.384247965092072e-06, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -3.6510016918182373, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.032522678375244, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.2019758224487305, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id", "score": -5.237082004547119, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -5.3350677490234375, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"What\"", "score": -5.937413215637207, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"car_names\"", "score": -5.989086627960205, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"the\"", "score": -6.120386600494385, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -6.136113166809082, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"iss\"", "score": -6.481410980224609, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"average\"", "score": -6.535648822784424, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT * FROM continents", "score": -6.6486101150512695, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"ed\"", "score": -6.720694541931152, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data AS whereis", "score": -6.958806991577148, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}, {"orig_question": "What is the average edispl for all volvos?", "inferred_code": "SELECT AVG(cars_data.Edispl) FROM cars_data WHERE \"model_list\"", "score": -7.002309322357178, "correct_code": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4194086653405703, "gold_bleu_score": 0.4932617008320769}
{"index": 143, "beams": [{"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "score": -5.19207560500945e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 OR cars_data.Cylinders > 4", "score": -3.8451650142669678, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4)", "score": -4.15529203414917, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.344629287719727, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Cylinders > 4", "score": -4.610682010650635, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 ORDER BY COUNT(*)", "score": -4.65875244140625, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.732686996459961, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Cylinders > 4", "score": -5.231445789337158, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.732029914855957, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 GROUP BY 4", "score": -5.74698543548584, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.8969011306762695, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 ORDER BY cars_data.Cylinders", "score": -6.000972747802734, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.026483058929443, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT T(*) FROM cars_data WHERE cars_data.Cylinders > 4", "score": -6.030074596405029, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "score": -6.0645527839660645, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "How many cars have more than 4 cylinders?", "inferred_code": "SELECT * FROM cars_data WHERE cars_data.Cylinders > 4", "score": -6.1585774421691895, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.11138662891325302, "gold_bleu_score": 0.3939225942056884}
{"index": 144, "beams": [{"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4", "score": -1.9969519371443312e-07, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 OR cars_data.Cylinders > 4", "score": -4.193165302276611, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"VALUE\"", "score": -4.5961151123046875, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 ORDER BY COUNT(*)", "score": -4.6959123611450195, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.752493381500244, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.760835647583008, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.785176753997803, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower > \"cars\"", "score": -4.802501201629639, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower < \"cars\"", "score": -4.803396224975586, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.175678730010986, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.20155143737793, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Cylinders > 4", "score": -5.4262566566467285, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 AND cars_data.Horsepower", "score": -5.555148601531982, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4 GROUP BY cars_data.Horsepower", "score": -5.56852388381958, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.060754776000977, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}, {"orig_question": "What is the number of cars with more than 4 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 40", "score": -6.154446125030518, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2629488809756473, "gold_bleu_score": 0.5315765230722859}
{"index": 145, "beams": [{"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "score": -0.005916190799325705, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Year = 1980", "score": -4.7475972175598145, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = 1980", "score": -4.770602703094482, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980 OR cars_data.Year = 1980", "score": -5.04902458190918, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -5.080465793609619, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -5.459898948669434, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.635180950164795, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.753092288970947, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.876776218414307, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980 GROUP BY \"cars_data\"", "score": -5.878722190856934, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -5.94625997543335, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.0040693283081055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980", "score": -6.084928035736084, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) AS cars_data.Id FROM cars_data WHERE cars_data.Year = 1980", "score": -6.263185977935791, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate = 1980", "score": -6.473299026489258, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "how many cars were produced in 1980?", "inferred_code": "SELECT * FROM continents", "score": -6.748212814331055, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.21911248262874694, "gold_bleu_score": 0.3783819804034498}
{"index": 146, "beams": [{"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -0.00015109905507415533, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980", "score": -2.3180899620056152, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"made\"", "score": -2.8640923500061035, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"cars\"", "score": -2.9426441192626953, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -2.9609100818634033, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = 1980", "score": -2.969128131866455, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"were\"", "score": -3.0418667793273926, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"many\"", "score": -3.1634392738342285, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.3111867904663086, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.466942071914673, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"?\"", "score": -3.5199155807495117, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.526643753051758, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "score": -3.888476848602295, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT * FROM continents", "score": -3.965538263320923, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*) FROM car_names WHERE car_names.Make = 1980 AND car_names.Make = \"how\"", "score": -4.19045352935791, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}, {"orig_question": "In 1980, how many cars were made?", "inferred_code": "SELECT COUNT(*), car_names.Make FROM car_names WHERE car_names.Make = 1980 GROUP BY car_names.Make", "score": -4.575756072998047, "correct_code": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.20387137811219647, "gold_bleu_score": 0.33920677816953354}
{"index": 147, "beams": [{"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American Motor Company\"", "score": -0.13791455328464508, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -1.8268818855285645, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.1009111404418945, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.486635684967041, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = car_names.MakeId WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.4945456981658936, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.5394866466522217, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.MakeId WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.5547938346862793, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"name Motor Company\"", "score": -2.6253364086151123, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"name American Motor Company\"", "score": -2.855275869369507, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.9139649868011475, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.9748196601867676, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American American Motor Company\"", "score": -3.001105546951294, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.FullName = \"American Motor Company\"", "score": -3.3806071281433105, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = \"American Motor Company\"", "score": -3.5358798503875732, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.7548587322235107, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "How many car models were produced by the maker with full name American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers WHERE car_makers.Maker = \"American Motor Company\"", "score": -4.177405834197998, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7007598747530759, "gold_bleu_score": 0.7058107614759019}
{"index": 148, "beams": [{"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -0.0004480645584408194, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \"American Motor Company\"", "score": -1.434835433959961, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"American Motor Company\"", "score": -2.2255349159240723, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = car_names.MakeId WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.438065767288208, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.4401211738586426, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.6226816177368164, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.656128168106079, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.MakeId WHERE car_makers.FullName = \"American Motor Company\"", "score": -2.7024765014648438, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -2.8888087272644043, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\" OR car_makers.Maker = \"American Motor Company\"", "score": -2.923967123031616, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -3.0208778381347656, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.0809028148651123, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM car_names JOIN model_list ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Company\"", "score": -3.0851752758026123, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American American Motor Company\"", "score": -3.268996000289917, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \"American Motor Motor Company\"", "score": -3.594447135925293, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}, {"orig_question": "What is the number of car models created by the car maker American Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -3.8523905277252197, "correct_code": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5982855768368908, "gold_bleu_score": 0.5900002716032439}
{"index": 153, "beams": [{"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -0.0005183249595575035, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -1.5599467754364014, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight <= 4000", "score": -1.9704757928848267, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.4220869541168213, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND 4000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -2.443385124206543, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 UNION SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -2.5678536891937256, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.699467420578003, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight != 4000", "score": -2.8859782218933105, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight = 4000", "score": -3.0229270458221436, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight LIKE \"4000 %\"", "score": -3.135340452194214, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Weight FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -3.2678020000457764, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.330404043197632, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.4270544052124023, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight <= 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000", "score": -3.447697877883911, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight <= 4000", "score": -3.4953129291534424, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.5068929195404053, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5904965611672178, "gold_bleu_score": 0.4239048106764749}
{"index": 154, "beams": [{"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000", "score": -0.008852876722812653, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000", "score": -0.8037902116775513, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT MIN(cars_data.Year) FROM cars_data WHERE cars_data.Weight > 3000", "score": -1.8624849319458008, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.3748700618743896, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.743429660797119, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT MAX(cars_data.Year) FROM cars_data WHERE cars_data.Weight > 3000", "score": -2.771023750305176, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.8678183555603027, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.891146183013916, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -2.9428935050964355, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.0073964595794678, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.007648468017578, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.1886520385742188, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT * FROM continents", "score": -3.2525248527526855, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000", "score": -3.4172279834747314, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000", "score": -3.4697277545928955, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}, {"orig_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "inferred_code": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT \"null\" FROM cars_data WHERE cars_data.Weight > 3000", "score": -3.5544612407684326, "correct_code": "select distinct year from cars_data where weight between 3000 and 4000"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6762079277645955, "gold_bleu_score": 0.5346358076812705}
{"index": 155, "beams": [{"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": 0.0, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -3.540684700012207, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)", "score": -4.99694299697876, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -5.765807628631592, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data UNION SELECT cars_data.Accelerate FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -6.000018119812012, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.243270397186279, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.693021297454834, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -6.8733296394348145, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -6.999965667724609, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT accelerate", "score": -7.072926044464111, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT accelerate", "score": -7.101769924163818, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -7.119807720184326, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT \"largest\"", "score": -7.202441215515137, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC", "score": -7.2892937660217285, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT \"largest\"", "score": -7.354898452758789, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the largest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.52866792678833, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.18752809948438076, "gold_bleu_score": 0.5542370615058021}
{"index": 156, "beams": [{"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -4.5548411264917377e-08, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -3.65476655960083, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)", "score": -4.58125638961792, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -5.754569053649902, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.223166465759277, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.5420966148376465, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -6.841711521148682, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT accelerate", "score": -6.914744853973389, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1", "score": -6.948338031768799, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT \"greatest\"", "score": -7.122628211975098, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT accelerate", "score": -7.151718616485596, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT \"greatest\"", "score": -7.1983866691589355, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC", "score": -7.354388236999512, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC", "score": -7.358246326446533, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.382383346557617, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}, {"orig_question": "What is the horsepower of the car with the greatest accelerate?", "inferred_code": "SELECT * FROM continents", "score": -7.507164001464844, "correct_code": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.17951181223677637, "gold_bleu_score": 0.5612099675566639}
{"index": 157, "beams": [{"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -0.11120099574327469, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -0.4570893347263336, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Cylinders ASC LIMIT 1", "score": -0.5563997030258179, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.6288705468177795, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -0.6357476115226746, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.7437626123428345, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.7801700234413147, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8410961627960205, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8670201301574707, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.8883029222488403, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.9396228194236755, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Cylinders ASC LIMIT 1", "score": -0.9547371864318848, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -0.9992488622665405, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -1.000414252281189, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.0305577516555786, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For model volvo, how many cylinders does the car with the least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.0314688682556152, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6002821125134425, "gold_bleu_score": 0.43757963377680087}
{"index": 158, "beams": [{"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.018774151802063, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -1.1920830011367798, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -1.317847490310669, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.3722591400146484, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4026113748550415, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4554768800735474, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4643347263336182, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.4784400463104248, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -1.5193908214569092, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -1.5839217901229858, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT * FROM continents", "score": -1.7438961267471313, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT SUM(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -1.8878684043884277, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -1.9360451698303223, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate LIMIT 1", "score": -2.0404341220855713, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -2.1229398250579834, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}, {"orig_question": "For a volvo model, how many cylinders does the version with least accelerate have?", "inferred_code": "SELECT SUM(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Accelerate = car_names.MakeId WHERE car_names.Model = \"volvo\" ORDER BY cars_data.Accelerate ASC LIMIT 1", "score": -2.1262617111206055, "correct_code": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5879672553283128, "gold_bleu_score": 0.4319393524061408}
{"index": 163, "beams": [{"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "score": -1.3978663560010318e-07, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 OR cars_data.Cylinders > 6", "score": -4.166453838348389, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY COUNT(*)", "score": -4.769432544708252, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "score": -4.801814079284668, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.84943151473999, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.275798320770264, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.301884651184082, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.326570510864258, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Cylinders > 6", "score": -5.3341569900512695, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY COUNT(*) LIMIT 6", "score": -5.581953525543213, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.82020902633667, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY COUNT(*) > 6", "score": -5.841616630554199, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "score": -5.859222412109375, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.097009181976318, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "score": -6.29135274887085, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "How many cars has over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "score": -6.294322490692139, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.1668599766188711, "gold_bleu_score": 0.27032067046673747}
{"index": 164, "beams": [{"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6", "score": -1.597561549715465e-07, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 OR cars_data.Cylinders > 6", "score": -4.3589067459106445, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.651314735412598, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -4.752523422241211, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 AND cars_data.Cylinders > 6", "score": -4.843636989593506, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6 ORDER BY cars_data.Cylinders", "score": -5.527300834655762, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) AS * FROM cars_data WHERE cars_data.Cylinders > 6", "score": -5.557094573974609, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data GROUP BY cars_data.Cylinders > 6", "score": -5.726434230804443, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -5.765541076660156, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.004866123199463, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.018706798553467, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders < 6", "score": -6.321897983551025, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT T(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders > 6", "score": -6.365344524383545, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT COUNT(*) FROM cars_data WHERE cars_data.MPG > 6", "score": -6.438681602478027, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.488813877105713, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}, {"orig_question": "What is the number of carsw ith over 6 cylinders?", "inferred_code": "SELECT * FROM continents", "score": -6.489576816558838, "correct_code": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.34126970998048645, "gold_bleu_score": 0.3842713563666531}
{"index": 165, "beams": [{"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -0.0011672991095110774, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -1.789736270904541, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.8121243715286255, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.9922280311584473, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 3", "score": -2.282999038696289, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.4435760974884033, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.5058603286743164, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT \"largest\"", "score": -2.5696706771850586, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.6289122104644775, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.816019296646118, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -2.838643789291382, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT horsepower", "score": -2.893439531326294, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.9847335815429688, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -2.998171806335449, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -3.051023006439209, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For the cars with 4 cylinders, which model has the largest horsepower?", "inferred_code": "SELECT * FROM continents", "score": -3.117065668106079, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3046224257932473, "gold_bleu_score": 0.42037625234386566}
{"index": 166, "beams": [{"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -0.02579222433269024, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.0519295930862427, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.4818800687789917, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.48287832736969, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -1.7841918468475342, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -1.810464859008789, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders <= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -1.983041763305664, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.5563290119171143, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY COUNT(*) DESC LIMIT 4", "score": -2.6305298805236816, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Horsepower ORDER BY SUM(cars_data.Horsepower) DESC LIMIT 4", "score": -2.7722015380859375, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders >= 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -2.937474012374878, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Cylinders DESC LIMIT 4", "score": -3.068101406097412, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data GROUP BY cars_data.Cylinders ORDER BY COUNT(*) DESC LIMIT 4", "score": -3.0982825756073, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4", "score": -3.208996295928955, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT \"most\"", "score": -3.3674874305725098, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}, {"orig_question": "For all of the 4 cylinder cars, which model has the most horsepower?", "inferred_code": "SELECT * FROM continents", "score": -3.417833089828491, "correct_code": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.37060829230381254, "gold_bleu_score": 0.40143644157112357}
{"index": 171, "beams": [{"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.022272443398833275, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.42398005723953247, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.43542900681495667, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.4785546064376831, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5069093704223633, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.Model WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5340136289596558, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5432360172271729, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5640526413917542, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 3500 EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5671948790550232, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" GROUP BY model_list.Model HAVING COUNT(*) < 3500", "score": -0.567571759223938, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.578926146030426, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.5951356887817383, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND model_list.Model < 3500", "score": -0.6221035718917847, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND model_list.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.6318598985671997, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT * FROM continents", "score": -0.6873964071273804, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "inferred_code": "SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker != \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.7072874903678894, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.09536007264364699, "gold_bleu_score": 0.2996867735609207}
{"index": 172, "beams": [{"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.0720069408416748, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND car_names.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.24287699162960052, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND model_list.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.3499419093132019, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford0\" AND car_makers.FullName = \"Ford Motor Company\"", "score": -0.37654414772987366, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.38853007555007935, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.39461323618888855, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 3500 EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.4120503067970276, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker != \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.4284747838973999, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND car_names.Model != 3500", "score": -0.4673486351966858, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND car_names.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.47126153111457825, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford 3500\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.47881099581718445, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.49711328744888306, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT * FROM continents", "score": -0.5055397748947144, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\"", "score": -0.5335257649421692, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.ModelId FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND car_names.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.5338456034660339, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}, {"orig_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "inferred_code": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\" AND car_names.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = \"Ford Motor Company\")", "score": -0.5356866717338562, "correct_code": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"}], "db_name": "car_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2337764392114936, "gold_bleu_score": 0.41757615686371763}
{"index": 179, "beams": [{"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.6663761138916016, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "score": -3.7398247718811035, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.808126211166382, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Abbreviation = \"JetBlue Airways\"", "score": -3.829998731613159, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.DestAirport WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.01546049118042, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.321323394775391, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.482344627380371, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "score": -5.027170658111572, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.488305568695068, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.549091339111328, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" ORDER BY airlines.Country", "score": -5.559958457946777, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlue Airways Airways\"", "score": -5.654284477233887, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "score": -5.760393142700195, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -5.9618611335754395, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which country does Airline \"JetBlue Airways\" belong to?", "inferred_code": "SELECT * FROM airlines", "score": -6.1285223960876465, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5271370980500587, "gold_bleu_score": 0.4365132279669307}
{"index": 180, "beams": [{"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "score": -2.8429408871488704e-07, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Abbreviation = \"Jetblue Airways\"", "score": -3.5209665298461914, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -3.8058013916015625, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.DestAirport WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.04038667678833, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.124034404754639, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "score": -4.230990409851074, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.357387542724609, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.565038681030273, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "score": -4.858499050140381, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "score": -5.109387397766113, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -5.27521276473999, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -5.57223653793335, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Country", "score": -5.60804557800293, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = \"Jetblue Airways Airways\"", "score": -5.662479400634766, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -6.052522659301758, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What country is Jetblue Airways affiliated with?", "inferred_code": "SELECT * FROM airlines", "score": -6.131583213806152, "correct_code": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5356669331322401, "gold_bleu_score": 0.42454618383148485}
{"index": 181, "beams": [{"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" AND airlines.Airline = \"JetBlue Airways\"", "score": -3.566352605819702, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlue Airways\" OR airlines.Airline = \"JetBlue Airways\"", "score": -3.8005292415618896, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.8190078735351562, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.912994146347046, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.DestAirport WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.131916046142578, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.421708106994629, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode WHERE airlines.Airline = \"JetBlue Airways\"", "score": -4.487490653991699, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlueue Airways\"", "score": -4.516797065734863, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.610762119293213, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.647361755371094, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"JetBlBlue Airways\"", "score": -5.229634761810303, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.282508850097656, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.491376876831055, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.8047895431518555, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jet JetBlue Airways\"", "score": -5.804904460906982, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7961134202667737, "gold_bleu_score": 0.6176357889041771}
{"index": 182, "beams": [{"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\"", "score": -7.107350086243969e-08, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" AND airlines.Airline = \"Jetblue Airways\"", "score": -3.4482550621032715, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -3.509284496307373, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" OR airlines.Airline = \"Jetblue Airways\"", "score": -3.8839993476867676, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.094886302947998, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.DestAirport WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.132674217224121, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.339177131652832, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"Jetblue Airways\"", "score": -4.349541664123535, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblblue Airways\"", "score": -4.811966896057129, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblueue Airways\"", "score": -4.918034553527832, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.441532611846924, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"Jetblue Airways\"", "score": -5.481477737426758, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" GROUP BY airlines.Abbreviation", "score": -5.598526954650879, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.741070747375488, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = \"Jetblue Airways\" ORDER BY airlines.Abbreviation", "score": -5.763967514038086, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}, {"orig_question": "Which abbreviation corresponds to Jetblue Airways?", "inferred_code": "SELECT * FROM airlines", "score": -5.877294540405273, "correct_code": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6806078868131921, "gold_bleu_score": 0.41701230016239116}
{"index": 183, "beams": [{"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "score": -3.761256550660619e-08, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Country = \"USA\"", "score": -3.9801225662231445, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "score": -4.355149745941162, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -4.802872657775879, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -4.954703330993652, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.101895809173584, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.243779182434082, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" GROUP BY airlines.Airline", "score": -5.763529300689697, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.773098945617676, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "score": -5.778575897216797, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "score": -5.899850845336914, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.908492565155029, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -5.948218822479248, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -6.352853775024414, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country LIKE \"USA\"", "score": -6.410703182220459, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "List all airline names and their abbreviations in \"USA\".", "inferred_code": "SELECT * FROM airlines", "score": -6.485710620880127, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7024978578679977, "gold_bleu_score": 0.5313038806254238}
{"index": 184, "beams": [{"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\"", "score": -3.761256550660619e-08, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Country = \"USA\"", "score": -3.8071963787078857, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.490057468414307, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.518424987792969, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" AND airlines.Abbreviation = \"USA\"", "score": -4.57762336730957, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.612013339996338, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Abbreviation = \"USA\"", "score": -4.778006076812744, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.797461032867432, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -4.86134672164917, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.523301601409912, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.818968772888184, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = \"USA\" ORDER BY airlines.Airline", "score": -5.967303276062012, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country != \"USA\"", "score": -6.2296576499938965, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.231725215911865, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.283820152282715, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "What are the airline names and abbreviations for airlines in the USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.388658046722412, "correct_code": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8624322971921188, "gold_bleu_score": 0.7258711496948096}
{"index": 185, "beams": [{"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "score": -5.6418844707195603e-08, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "score": -3.866150379180908, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Anthony\"", "score": -4.8148393630981445, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.141557216644287, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" GROUP BY airports.AirportCode", "score": -5.424038410186768, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" GROUP BY airports.AirportName", "score": -5.493821620941162, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "score": -5.705026149749756, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.733761310577393, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.774832725524902, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.799069881439209, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.8332929611206055, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "score": -6.036545753479004, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT \"airports.AirportCode.airports.AirportName\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.1533074378967285, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, \"List\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.225200653076172, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City != \"Anthony\"", "score": -6.425869464874268, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "List the airport code and name in the city of Anthony.", "inferred_code": "SELECT airports.AirportCode, \"the\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.450075626373291, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6658904918662707, "gold_bleu_score": 0.5917573139487922}
{"index": 186, "beams": [{"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\"", "score": -3.761256550660619e-08, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" AND airports.AirportName = \"Anthony\"", "score": -3.8394124507904053, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Anthony\"", "score": -4.469442844390869, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -4.756727695465088, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -4.794468402862549, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.3060407638549805, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.City FROM airports WHERE airports.City = \"Anthony\"", "score": -5.323810577392578, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = \"Anthony\" ORDER BY airports.AirportCode", "score": -5.5532917976379395, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.Country FROM airports WHERE airports.City = \"Anthony\"", "score": -5.576722145080566, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.7667670249938965, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, \"Give\" FROM airports WHERE airports.City = \"Anthony\"", "score": -5.996471405029297, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT * FROM airlines", "score": -5.998163223266602, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, airports.CountryAbbrev FROM airports WHERE airports.City = \"Anthony\"", "score": -6.076553821563721, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT \"airports.AirportCode.airports.AirportName\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.196632385253906, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, \"Anthony\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.470270156860352, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}, {"orig_question": "Give the airport code and airport name corresonding to the city Anthony.", "inferred_code": "SELECT airports.AirportCode, \"the\" FROM airports WHERE airports.City = \"Anthony\"", "score": -6.516183853149414, "correct_code": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7158899261574242, "gold_bleu_score": 0.507861109687594}
{"index": 187, "beams": [{"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline", "score": -6.081025123596191, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.609917163848877, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.980129241943359, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.103776931762695, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.186854362487793, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.559047222137451, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.571653842926025, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY \"many\"", "score": -8.164360046386719, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY \"How\"", "score": -8.248665809631348, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.375746726989746, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "score": -8.424336433410645, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.537690162658691, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT COUNT(*) FROM airlines ORDER BY airlines.uid", "score": -8.546615600585938, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.734166145324707, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "How many airlines do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.879465103149414, "correct_code": "SELECT count(*) FROM AIRLINES"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8952001366375074, "gold_bleu_score": 0.6628644313758412}
{"index": 188, "beams": [{"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT COUNT(*) FROM airlines", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT COUNT(*) FROM airlines ORDER BY COUNT(*)", "score": -6.731622695922852, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.156261920928955, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.496209621429443, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.59024715423584, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.610933303833008, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.692974090576172, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -7.702687740325928, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.103033065795898, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.207052230834961, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -8.666377067565918, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines", "score": -8.754829406738281, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT T(*) FROM airlines", "score": -9.1495361328125, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -9.327065467834473, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT * FROM airlines", "score": -9.332447052001953, "correct_code": "SELECT count(*) FROM AIRLINES"}, {"orig_question": "What is the total number of airlines?", "inferred_code": "SELECT SUM(*) FROM airlines", "score": -9.469494819641113, "correct_code": "SELECT count(*) FROM AIRLINES"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9353485511021732, "gold_bleu_score": 0.3355714735652192}
{"index": 189, "beams": [{"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.983628273010254, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.2493510246276855, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.4735212326049805, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.699441909790039, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "score": -8.17699146270752, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(* - airports.AirportCode) FROM airports", "score": -8.250248908996582, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports ORDER BY airports.AirportName", "score": -8.396836280822754, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.578642845153809, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.628341674804688, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.748631477355957, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT COUNT(*) FROM airports AS 0", "score": -8.810380935668945, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.828990936279297, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.86860179901123, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT * FROM airlines", "score": -9.421735763549805, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "How many airports do we have?", "inferred_code": "SELECT T(*) FROM airports", "score": -9.598586082458496, "correct_code": "SELECT count(*) FROM AIRPORTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9082358311655422, "gold_bleu_score": 0.6628644313758412}
{"index": 190, "beams": [{"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports ORDER BY COUNT(*)", "score": -6.813945293426514, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.203625202178955, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.233107566833496, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.364910125732422, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.370512962341309, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.668999195098877, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -7.674875259399414, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports", "score": -7.758955478668213, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports GROUP BY airports.AirportCode", "score": -7.986560821533203, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT COUNT(*) FROM airports WHERE \"Return\"", "score": -8.202620506286621, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.419659614562988, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.660313606262207, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.681207656860352, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.832653999328613, "correct_code": "SELECT count(*) FROM AIRPORTS"}, {"orig_question": "Return the number of  airports.", "inferred_code": "SELECT * FROM airlines", "score": -8.843290328979492, "correct_code": "SELECT count(*) FROM AIRPORTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8642848361771773, "gold_bleu_score": 0.3931301082680342}
{"index": 191, "beams": [{"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights UNION SELECT COUNT(*) FROM flights", "score": -5.60394287109375, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"VALUE\"", "score": -5.681738376617432, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -6.917156219482422, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.108794689178467, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -7.143751621246338, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights GROUP BY flights.SourceAirport", "score": -7.541974067687988, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE \"How\"", "score": -7.551546573638916, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "score": -7.919802665710449, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) AS flights.FlightNo FROM flights", "score": -7.921767234802246, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE \"many\"", "score": -8.02273941040039, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "score": -8.05838394165039, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "score": -8.205730438232422, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.639145851135254, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT * FROM airlines", "score": -8.97812557220459, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "How many flights do we have?", "inferred_code": "SELECT T(flights.FlightNo) FROM flights", "score": -9.066563606262207, "correct_code": "SELECT count(*) FROM FLIGHTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8831699117549304, "gold_bleu_score": 0.6495279402461448}
{"index": 192, "beams": [{"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights", "score": 0.0, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights UNION SELECT COUNT(*) FROM flights", "score": -5.628265857696533, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -6.357100009918213, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -7.486105442047119, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE \"the\"", "score": -7.502925395965576, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -7.534646987915039, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE \"Return\"", "score": -7.80246639251709, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights ORDER BY flights.FlightNo", "score": -7.862836837768555, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE \"of\"", "score": -8.114012718200684, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights", "score": -8.211039543151855, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT T(flights.FlightNo) FROM flights", "score": -8.87502670288086, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights", "score": -9.204195976257324, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.26907730102539, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT SUM(*) FROM flights", "score": -9.279391288757324, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.311796188354492, "correct_code": "SELECT count(*) FROM FLIGHTS"}, {"orig_question": "Return the number of flights.", "inferred_code": "SELECT * FROM airlines", "score": -9.332138061523438, "correct_code": "SELECT count(*) FROM FLIGHTS"}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7914357711909219, "gold_bleu_score": 0.38226839427174897}
{"index": 193, "beams": [{"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -2.9954405817989027e-06, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.915194511413574, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Abbreviation = \"UAL\"", "score": -4.027778148651123, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Abbreviation = \"UAL\"", "score": -4.355090618133545, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\" AND airlines.Airline = \"UAL\"", "score": -4.453431606292725, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT \"hasL\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.185989856719971, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.251527786254883, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT \"airlineL\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.429494857788086, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.477901935577393, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.5465989112854, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.575651168823242, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.661981582641602, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.67323637008667, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.757076740264893, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -5.885049343109131, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Which airline has abbreviation 'UAL'?", "inferred_code": "SELECT * FROM airlines", "score": -5.886753082275391, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9255433103001076, "gold_bleu_score": 0.4103237254436912}
{"index": 194, "beams": [{"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -0.0002414384944131598, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Country FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -2.4609243869781494, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.0676190853118896, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.430941581726074, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.5191433429718018, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.649740695953369, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT \"airlineL\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.669884443283081, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT \"Give\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.7044730186462402, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT \"withL\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.7196733951568604, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -3.739694356918335, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT \"theL\" AS select airlines.Airline FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -3.9071900844573975, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -4.1222734451293945, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT \"Give\" FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -4.1580986976623535, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.uid FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -4.233993053436279, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT airlines.Abbreviation FROM airlines WHERE airlines.Abbreviation = \"UAL\"", "score": -4.252848148345947, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}, {"orig_question": "Give the airline with abbreviation 'UAL'.", "inferred_code": "SELECT * FROM airlines", "score": -4.279488563537598, "correct_code": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7288723501839985, "gold_bleu_score": 0.4700595583822746}
{"index": 195, "beams": [{"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \"USA\"", "score": -4.046973705291748, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Country = \"USA\"", "score": -4.21369743347168, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \"are\"", "score": -4.6034770011901855, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \"airlines\"", "score": -4.633190155029297, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" ORDER BY COUNT(*)", "score": -4.882355213165283, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT \"VALUE\" AS select count (*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.2396955490112305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT 10 AS select count (*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.359159469604492, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.448999881744385, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.537748336791992, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.547525405883789, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA : VALUE\"", "score": -5.6299543380737305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -5.822284698486328, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "score": -5.990463733673096, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT * FROM airlines", "score": -6.027101993560791, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "How many airlines are from USA?", "inferred_code": "SELECT T(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -6.1676740646362305, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7663347218563121, "gold_bleu_score": 0.47692710817752687}
{"index": 196, "beams": [{"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": 0.0, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \"USA\"", "score": -3.999173164367676, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Country = \"USA\"", "score": -4.140869617462158, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \"of\"", "score": -4.6520891189575195, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\" OR airlines.Country = \".\"", "score": -4.730909824371338, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.163127899169922, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT \"VALUE\" AS select count (*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.172147274017334, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.3110833168029785, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.319042682647705, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.404734134674072, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT \"select count (*)\" FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.564874172210693, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.619462966918945, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airlines WHERE airlines.Country = \"USA\"", "score": -5.644336223602295, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.675309181213379, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT * FROM airlines", "score": -5.747353553771973, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}, {"orig_question": "Return the number of airlines in the USA.", "inferred_code": "SELECT COUNT(*) FROM airlines GROUP BY airlines.Country = \"USA\"", "score": -6.136466026306152, "correct_code": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.442817856906383, "gold_bleu_score": 0.3422479193781746}
{"index": 197, "beams": [{"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -1.2167885870439932e-05, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "score": -3.214585304260254, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.319850444793701, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.484727144241333, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.813145399093628, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.970318555831909, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN airports ON airports.AirportCode = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -3.9874024391174316, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -3.996652126312256, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.Airline = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -4.032119274139404, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -4.266650199890137, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -4.458780765533447, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"at\"", "score": -4.567540168762207, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -4.610811710357666, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -4.665410041809082, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" ORDER BY airports.City", "score": -5.491119384765625, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Which city and country is the Alton airport at?", "inferred_code": "SELECT * FROM airlines", "score": -5.62794303894043, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5788651050690934, "gold_bleu_score": 0.47156632089063605}
{"index": 198, "beams": [{"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -0.0030452574137598276, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -1.466177225112915, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.AirportName = \"Alton\"", "score": -3.564030647277832, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN airports ON airports.AirportCode = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -3.7611124515533447, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -3.858590602874756, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.088191509246826, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports JOIN flights ON flights.Airline = airports.AirportCode WHERE airports.AirportName = \"Alton\"", "score": -4.1308088302612305, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.163206100463867, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.244280815124512, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.AirportName = \"Alton\"", "score": -4.3302412033081055, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.49002742767334, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -4.492966651916504, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = \"Alton\" AND airports.Country = \"Alton\"", "score": -4.542511940002441, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.City, airports.CountryAbbrev FROM airports WHERE airports.City = \"Alton\"", "score": -4.956637859344482, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT * FROM airlines", "score": -5.570062160491943, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}, {"orig_question": "Give the city and country for the Alton airport.", "inferred_code": "SELECT airports.AirportName, airports.Country FROM airports WHERE airports.City = \"Alton\"", "score": -5.846167087554932, "correct_code": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6152367107684278, "gold_bleu_score": 0.4582073914826999}
{"index": 199, "beams": [{"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -3.9939038742886623e-08, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -3.7492599487304688, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -3.996981382369995, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.11247444152832, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.164576053619385, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "score": -4.4107208251953125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" OR airports.AirportCode = \"AKO\"", "score": -4.868235111236572, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT MOD(\"airports.AirportName.AKO\", \"select airports.AirportName\") FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -4.938967704772949, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.069324016571045, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.262532711029053, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT \"airports.AirportName.AKO\" AS VALUE FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -5.727541923522949, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.7619805335998535, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -5.803455829620361, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT \"airports.AirportName.AKO\" FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -5.922512531280518, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -6.085621356964111, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "What is the airport name for airport 'AKO'?", "inferred_code": "SELECT * FROM airlines", "score": -6.448936939239502, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6255127583895601, "gold_bleu_score": 0.44653874578158415}
{"index": 200, "beams": [{"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -1.9969515818729633e-08, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -3.696133613586426, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -4.016143798828125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" AND airports.AirportCode = \"AKO\"", "score": -4.394196033477783, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.711717128753662, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"AKO\"", "score": -4.71310567855835, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode = \"AKO\" OR airports.AirportCode = \"AKO\"", "score": -4.905960559844971, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -4.916624069213867, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -4.951379776000977, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT MOD(\"airports.AirportName.AKO\", \"select airports.AirportName\") FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -5.031869888305664, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -5.720180034637451, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT \"airports.AirportName.AKO\" FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -5.861413478851318, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT \"airports.AirportName.AKO\" AS VALUE FROM airports WHERE airports.AirportCode = \"AKO\"", "score": -6.023432731628418, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.109788417816162, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.379305362701416, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}, {"orig_question": "Return the name of the airport with code 'AKO'.", "inferred_code": "SELECT * FROM airlines", "score": -6.423752307891846, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.48248066622370167, "gold_bleu_score": 0.5082445299188474}
{"index": 201, "beams": [{"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": 0.0, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.294436454772949, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.3406662940979, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.City = \"'Aberdeen\"", "score": -4.779515266418457, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = \"'Aberdeen\"", "score": -4.8028564453125, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" OR airports.City = \"?\"", "score": -5.223032474517822, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.City = City", "score": -5.45046854019165, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = City", "score": -5.455255508422852, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"Aberdeen\"", "score": -5.475996017456055, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"?\"", "score": -5.513848304748535, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"'\"", "score": -5.672214031219482, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" OR airports.City = \"What\"", "score": -5.763701915740967, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = \"'\"", "score": -5.766406059265137, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -5.927522659301758, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -6.36513614654541, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are airport names at City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -6.456426620483398, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8597741786380777, "gold_bleu_score": 0.5395400601269941}
{"index": 202, "beams": [{"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": 0.0, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.087528228759766, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.1799139976501465, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" EXCEPT SELECT airports.AirportName FROM airports WHERE airports.City = in", "score": -4.9389753341674805, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" INTERSECT SELECT airports.AirportName FROM airports WHERE airports.City = in", "score": -4.994296550750732, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"names\"", "score": -5.013375759124756, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"of\"", "score": -5.053614139556885, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"the\"", "score": -5.211764812469482, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"What\"", "score": -5.220814228057861, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"are\"", "score": -5.269690990447998, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen\" AND airports.AirportCode = \"airports\"", "score": -5.285182952880859, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -5.345796585083008, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports JOIN airports ON airports.AirportCode = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -5.384765625, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen-VALUE\"", "score": -5.704530239105225, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT airports.AirportName FROM airports WHERE airports.City = \"Aberdeen on ?\"", "score": -5.950242519378662, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}, {"orig_question": "What are the names of airports in Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -6.172102928161621, "correct_code": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.634706173947696, "gold_bleu_score": 0.7317015503783468}
{"index": 203, "beams": [{"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -2.0271827452233993e-05, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -2.259153127670288, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -2.300337314605713, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -2.3125557899475098, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -3.0657095909118652, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -3.1392176151275635, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"APG\"", "score": -3.2305233478546143, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -3.300900936126709, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = \"APG\"", "score": -3.34834361076355, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\" OR flights.SourceAirport = \"APG\"", "score": -3.4891180992126465, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.5624966621398926, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"APG\"", "score": -3.627624034881592, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.0985426902771, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -4.256662368774414, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -4.359095096588135, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "How many flights depart from 'APG'?", "inferred_code": "SELECT * FROM airlines", "score": -5.3971028327941895, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6965756121517185, "gold_bleu_score": 0.5836819392025508}
{"index": 204, "beams": [{"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.0008620570879429579, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -1.244219183921814, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"APG\"", "score": -2.3247921466827393, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"APG\"", "score": -2.863879919052124, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -2.8744399547576904, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = \"APG\"", "score": -3.0163002014160156, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.1170077323913574, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.173503875732422, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.2164835929870605, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"APG\" OR flights.SourceAirport = \"APG\"", "score": -3.4492247104644775, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.7506930828094482, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -3.7999653816223145, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.254528045654297, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.377514362335205, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.505345344543457, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Count the number of flights departing from 'APG'.", "inferred_code": "SELECT * FROM airlines", "score": -4.794175624847412, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.605508934352154, "gold_bleu_score": 0.46506181314784584}
{"index": 205, "beams": [{"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -0.10022569447755814, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -0.21135935187339783, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -2.2460286617279053, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.0450856685638428, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.3978965282440186, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.4099020957946777, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.4349958896636963, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.560161828994751, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.5770411491394043, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.614089250564575, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"ATO\"", "score": -3.6950225830078125, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -3.769374132156372, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -3.7766730785369873, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "score": -4.185919284820557, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -4.2525811195373535, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "How many flights have destination ATO?", "inferred_code": "SELECT * FROM airlines", "score": -4.3675150871276855, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.606757505788937, "gold_bleu_score": 0.45263458653280786}
{"index": 206, "beams": [{"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -0.03900667279958725, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"ATO\"", "score": -0.3972468376159668, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"ATO\"", "score": -2.6028919219970703, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -2.6676459312438965, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\" OR flights.SourceAirport = \"ATO\"", "score": -2.768688678741455, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -2.8723554611206055, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"ATO\"", "score": -2.974961280822754, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -3.0015573501586914, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.AirportCode = \"ATO\"", "score": -3.0507490634918213, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.0522735118865967, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"ATO\"", "score": -3.0896196365356445, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.1440863609313965, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT * FROM airlines", "score": -3.2511730194091797, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"ATO\"", "score": -3.2620882987976074, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN airports ON airports.AirportCode = airports.AirportCode WHERE airports.AirportCode = \"ATO\"", "score": -3.298259735107422, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}, {"orig_question": "Count the number of flights into ATO.", "inferred_code": "SELECT COUNT(*) FROM flights WHERE flights.SourceAirport = \"ATO\"", "score": -3.8852360248565674, "correct_code": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5027615622141287, "gold_bleu_score": 0.30935160611239376}
{"index": 207, "beams": [{"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0017030378803610802, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.090912103652954, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -2.7075610160827637, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" INTERSECT SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -2.8004863262176514, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -2.8166189193725586, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -3.0081396102905273, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.2451770305633545, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.City = \"flights\"", "score": -3.287938117980957, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"flights\"", "score": -3.3596267700195312, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.City = \"depart\"", "score": -3.539304256439209, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.986936092376709, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.046643257141113, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.184226989746094, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.240452289581299, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.256073951721191, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights depart from City Aberdeen?", "inferred_code": "SELECT * FROM airlines", "score": -4.313627243041992, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.43035268409819927, "gold_bleu_score": 0.4722243505012573}
{"index": 208, "beams": [{"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0008247973746620119, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -1.3997634649276733, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.4157016277313232, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"of\"", "score": -3.104562520980835, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"flights\"", "score": -3.15871000289917, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.3280017375946045, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"number\"", "score": -3.398890256881714, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"Return\"", "score": -3.4655673503875732, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"of\"", "score": -3.5029869079589844, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportName = \"Aberdeen\"", "score": -3.6422224044799805, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.769303798675537, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.83457088470459, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.028970241546631, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.151944637298584, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT T(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.187404155731201, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights departing from Aberdeen.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.282816410064697, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.26929826367664045, "gold_bleu_score": 0.39989072946584714}
{"index": 209, "beams": [{"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.01226856466382742, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.6548422574996948, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"flights\"", "score": -3.2534308433532715, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.3775618076324463, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"?\"", "score": -3.4136531352996826, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"arriving\"", "score": -3.4805145263671875, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.585303783416748, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = \"Aberdeen\"", "score": -3.740766763687134, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "score": -3.7920374870300293, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM airlines", "score": -3.829098701477051, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT * FROM airlines", "score": -4.09777307510376, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.259716987609863, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.260343074798584, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.279757499694824, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.290277481079102, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "How many flights arriving in Aberdeen city?", "inferred_code": "SELECT SUM(flights.FlightNo) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -4.328792572021484, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3798992580477273, "gold_bleu_score": 0.4585863943213219}
{"index": 210, "beams": [{"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.11610481888055801, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.20191438496112823, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"flights\"", "score": -3.1419527530670166, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"of\"", "score": -3.2210946083068848, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"flights\"", "score": -3.286888837814331, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"of\"", "score": -3.334681987762451, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.4514129161834717, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" OR airports.AirportName = \"number\"", "score": -3.4975075721740723, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING COUNT(*) = 1", "score": -3.8253724575042725, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.007680892944336, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.0128092765808105, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.195797920227051, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports WHERE airports.City = \"Aberdeen\"", "score": -4.25023889541626, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.327728271484375, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.360575199127197, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Return the number of flights arriving in Aberdeen.", "inferred_code": "SELECT T(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.4110283851623535, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.23117456992160612, "gold_bleu_score": 0.3618619853837619}
{"index": 213, "beams": [{"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\"", "score": -0.003661275375634432, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"JetBlue Airways\"", "score": -0.7939493656158447, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\" OR flights.FlightNo = \"JetBlue Airways\"", "score": -2.84810209274292, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\" AND flights.FlightNo = \"JetBlue Airways\"", "score": -2.9014434814453125, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\"", "score": -2.943145513534546, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.228586196899414, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.275630235671997, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlueue Airways\"", "score": -3.371617555618286, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.463315963745117, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"Jetue Airways\"", "score": -3.4703409671783447, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.4896302223205566, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.5679025650024414, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\"", "score": -3.723776340484619, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.781475305557251, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"JetBlue Airways\" ORDER BY flights.FlightNo", "score": -3.9267354011535645, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "How many flights does airline 'JetBlue Airways' have?", "inferred_code": "SELECT * FROM airlines", "score": -3.954694986343384, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4676901855793839, "gold_bleu_score": 0.5133638526868477}
{"index": 214, "beams": [{"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines", "score": -0.10883819311857224, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -0.20655457675457, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -0.5811633467674255, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"Jetblue Airways\"", "score": -0.9642457365989685, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines", "score": -1.1119294166564941, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"ofblue Airways\"", "score": -1.2201329469680786, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines", "score": -1.4181241989135742, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"Jetblue Airways\"", "score": -1.46379816532135, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"of Jetblue Airways\"", "score": -1.4705827236175537, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"ofblue Airways\"", "score": -1.6858028173446655, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines", "score": -1.8582016229629517, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT * FROM airlines", "score": -1.8816535472869873, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"of Jetblue Airways\"", "score": -1.988641619682312, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"ofblue Airways\"", "score": -2.058858871459961, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"of Jetblue Airways\"", "score": -2.193429946899414, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}, {"orig_question": "Give the number of Jetblue Airways flights.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airlines ON airlines.Airline = airlines.Airline WHERE airlines.Airline = \"Jetblue Airways\"", "score": -2.4608771800994873, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.35492238019790623, "gold_bleu_score": 0.3326409211945648}
{"index": 215, "beams": [{"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -1.7397258281707764, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"United Airlines\" AND airports.AirportCode = \"asY\"", "score": -1.8069204092025757, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -1.8274823427200317, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -1.99636709690094, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.0729167461395264, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.118098258972168, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"United Airlines\" AND flights.SourceAirport = \"asY\"", "score": -2.173102617263794, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.234882116317749, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"asY\"", "score": -2.2711472511291504, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.2962958812713623, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.302079916000366, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.312041759490967, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.3453562259674072, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.SourceAirport JOIN airports ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"United Airlines\" AND airports.AirportCode = \"asY\"", "score": -2.4259047508239746, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.4324049949645996, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "How many 'United Airlines' flights go to Airport 'ASY'?", "inferred_code": "SELECT * FROM airlines", "score": -2.6796939373016357, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2360688244457605, "gold_bleu_score": 0.34612219728125376}
{"index": 216, "beams": [{"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"asY\" AND airlines.Airline = \"United Airlines\"", "score": -2.410626173019409, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT * FROM airlines", "score": -2.828789472579956, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = flights.DestAirport WHERE airlines.Airline = \"asY\" AND airlines.Airline = \"United Airlines\"", "score": -2.9220809936523438, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"asY\" AND airlines.Airline = \"United Airlines\"", "score": -3.1085622310638428, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = flights.FlightNo WHERE airlines.Airline = \"asY\" AND airlines.Airline = \"United Airlines\"", "score": -3.1656501293182373, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"asY\"", "score": -3.3428375720977783, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.Airline JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"asY\" AND airlines.Airline = \"United Airlines\"", "score": -3.5123822689056396, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = flights.DestAirport WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"asY\"", "score": -3.587639808654785, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = flights.FlightNo WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"asY\"", "score": -3.6466314792633057, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airports.AirportCode = airlines.Airline JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"asY\"", "score": -3.6768863201141357, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT * FROM airlines", "score": -3.7111589908599854, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"number United Airlines\" AND airlines.Airline = \"asY\"", "score": -3.890592575073242, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"asY\" AND airports.AirportName = \"United Airlines\"", "score": -3.989208459854126, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"asY\" AND flights.FlightNo = \"United Airlines\"", "score": -4.4428629875183105, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"asY\" AND airports.AirportName = \"United Airlines\"", "score": -4.47921895980835, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}, {"orig_question": "Count the number of United Airlines flights arriving in ASY Airport.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"asY\" AND flights.SourceAirport = \"United Airlines\"", "score": -4.530477046966553, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3340669386984222, "gold_bleu_score": 0.39744893474316834}
{"index": 217, "beams": [{"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"United Airlines\" AND flights.DestAirport = \"AHD\"", "score": -0.29303160309791565, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -0.3759421110153198, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.SourceAirport WHERE airlines.Airline = \"United Airlines\" AND flights.DestAirport = \"AHD\"", "score": -0.44745346903800964, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -0.680144727230072, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -0.8539935946464539, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.0414248704910278, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.1424304246902466, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.2056761980056763, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.331269383430481, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"UnitedD\" AND flights.DestAirport = \"United Airlines\"", "score": -1.358157992362976, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.3851395845413208, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.SourceAirport WHERE airlines.Airline = \"UnitedD\" AND flights.DestAirport = \"United Airlines\"", "score": -1.456982970237732, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.4746078252792358, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.5605316162109375, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.6261385679244995, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -1.637052297592163, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.1919793465589532, "gold_bleu_score": 0.4473743561555075}
{"index": 218, "beams": [{"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = flights.FlightNo WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -1.8123276233673096, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -1.8800479173660278, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = flights.DestAirport WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -1.9021333456039429, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = flights.Airline WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.033006191253662, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.1403963565826416, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = flights.FlightNo WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -2.2422499656677246, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = airports.AirportCode WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -2.3254194259643555, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = flights.DestAirport WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -2.414163589477539, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.DestAirport JOIN flights ON flights.Airline = flights.FlightNo WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.4187123775482178, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.SourceAirport WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.4992551803588867, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.5824596881866455, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.SourceAirport WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -2.790168285369873, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.SourceAirport WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -2.7938311100006104, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT * FROM airlines", "score": -2.8749616146087646, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"AHD\" AND airlines.Airline = \"United Airlines\"", "score": -2.934656858444214, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Return the number of United Airlines flights leaving from AHD Airport.", "inferred_code": "SELECT COUNT(*) FROM airlines WHERE airlines.Airline = \"United Airlines\" AND airlines.Airline = \"AHD\"", "score": -3.5934770107269287, "correct_code": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.33835817654324474, "gold_bleu_score": 0.4023339812447002}
{"index": 219, "beams": [{"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -1.066098928451538, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"United Airlines\"", "score": -1.6162728071212769, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -1.654401183128357, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -1.7133800983428955, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -1.7608585357666016, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"United Airlines\"", "score": -2.1873433589935303, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -2.64530086517334, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -2.927366256713867, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"United Airlines\"", "score": -2.9377853870391846, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -3.1024556159973145, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -3.1601991653442383, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT * FROM airlines", "score": -3.2287068367004395, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"United Airlines\"", "score": -3.3489186763763428, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.DestAirport = \"United Airlines\"", "score": -3.3519234657287598, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.Airline = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"United Airlines\"", "score": -3.4716923236846924, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "How many United Airlines flights go to City 'Aberdeen'?", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.FlightNo = \"United Airlines\"", "score": -3.5473780632019043, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.09187837194764337, "gold_bleu_score": 0.33592992056369514}
{"index": 220, "beams": [{"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"United Airlines\"", "score": -1.482017159461975, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -1.7372239828109741, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airlines JOIN airports ON airlines.Airline = airports.AirportCode JOIN flights ON flights.Airline = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"United Airlines\"", "score": -1.8839219808578491, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -1.9389747381210327, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"United Airlines\"", "score": -2.173414707183838, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"United Airlines\"", "score": -2.459965467453003, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.511955738067627, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.5119566917419434, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"United Airlines\"", "score": -2.526491165161133, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.5710155963897705, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.6077349185943604, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.7555439472198486, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -2.8369834423065186, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = \"Aberdeen\" AND airlines.Airline = \"of United Airlines\"", "score": -3.0863137245178223, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT COUNT(*) FROM flights JOIN airports ON flights.Airline = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"United Airlines\"", "score": -3.105036497116089, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}, {"orig_question": "Count the number of United Airlines flights that arrive in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.3230607509613037, "correct_code": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.16529625943356308, "gold_bleu_score": 0.3688503473535965}
{"index": 233, "beams": [{"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -0.010758868418633938, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -0.8097108006477356, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -0.9843366742134094, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -1.3640729188919067, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE airports.AirportCode = \"AHD\"", "score": -1.6548138856887817, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.DestAirport = \"AHD\"", "score": -1.849258542060852, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -1.944380521774292, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -2.005763292312622, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.AirportCode = \"AHD\"", "score": -2.1101205348968506, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -2.4705893993377686, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON airlines.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -2.5273241996765137, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"AHD\"", "score": -2.543992757797241, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -2.5780558586120605, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"AHD\"", "score": -2.6134731769561768, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"yes\"", "score": -3.4558701515197754, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have some flight departing from airport 'AHD'?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -4.0230712890625, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.762793279981294, "gold_bleu_score": 0.5910152832066338}
{"index": 234, "beams": [{"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -0.012611240148544312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -0.7289016246795654, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -2.848095417022705, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -3.0753841400146484, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.25687313079834, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"AHD\"", "score": -3.2658393383026123, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -3.2910187244415283, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.5438525676727295, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.6686384677886963, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.67620849609375, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"airportD\"", "score": -3.713047504425049, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"source AHD\"", "score": -3.87629771232605, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.8919894695281982, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -3.9683926105499268, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -4.043722152709961, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with source airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"yes\"", "score": -4.089529514312744, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5949119540161322, "gold_bleu_score": 0.3333752436042731}
{"index": 235, "beams": [{"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -0.014410157687962055, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -0.8143836259841919, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -0.8592799305915833, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -1.1594007015228271, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -1.2973934412002563, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -1.7456004619598389, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.DestAirport = \"AHD\"", "score": -1.77475905418396, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON airlines.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -2.0792300701141357, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.AirportCode = \"AHD\"", "score": -2.1282193660736084, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -2.3072617053985596, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -2.3642611503601074, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -2.5434136390686035, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -4.101591110229492, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -4.255742073059082, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT airlines.uid FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -4.416842460632324, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "What are airlines that have flights arriving at airport 'AHD'?", "inferred_code": "SELECT * FROM airlines", "score": -4.446260452270508, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7458679913780715, "gold_bleu_score": 0.5779379644443162}
{"index": 236, "beams": [{"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -0.015470357611775398, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.DestAirport = \"AHD\"", "score": -0.6815694570541382, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -2.162804365158081, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = \"AHD\"", "score": -2.2626819610595703, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -2.4603347778320312, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -2.851304769515991, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = \"AHD\"", "score": -2.9342751502990723, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.DestAirport = \"AHD\"", "score": -2.93804931640625, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.Airline WHERE flights.SourceAirport = \"AHD\"", "score": -2.951596975326538, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.356170415878296, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.uid FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"AHD\"", "score": -3.365203619003296, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.561828136444092, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.585181713104248, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = \"airportD\"", "score": -3.697983503341675, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT * FROM airlines", "score": -3.721567392349243, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}, {"orig_question": "Which airlines have a flight with destination airport AHD?", "inferred_code": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.DestAirport = \"AHD\"", "score": -3.875825881958008, "correct_code": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6054295870675708, "gold_bleu_score": 0.3852039517227352}
{"index": 245, "beams": [{"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -4.3616034872684395e-07, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\" EXCEPT SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -2.848174810409546, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -3.331460475921631, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"United Airlines\"", "score": -3.3921666145324707, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\" AND flights.Airline = \"United Airlines\"", "score": -3.5502867698669434, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.102316379547119, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United United Airlines\"", "score": -4.306863307952881, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.336689472198486, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.343644618988037, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.407501220703125, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.521176815032959, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.822193622589111, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.8621697425842285, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.962897300720215, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -5.174214839935303, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "What are flight numbers of Airline \"United Airlines\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.1862311363220215, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.658513939640331, "gold_bleu_score": 0.5060697231061033}
{"index": 246, "beams": [{"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -0.002066070446744561, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \"United Airlines\"", "score": -1.189614176750183, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -1.7360066175460815, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -3.260967254638672, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -3.6152596473693848, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United Airlines\"", "score": -3.7157888412475586, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE airlines.Airline = \"United Airlines\"", "score": -3.9434261322021484, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -3.961883068084717, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = \"United United Airlines\"", "score": -4.224318504333496, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.255958557128906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.323556423187256, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.517675876617432, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.684144496917725, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.770881652832031, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -4.824642181396484, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}, {"orig_question": "Which flight numbers correspond to United Airlines flights?", "inferred_code": "SELECT * FROM airlines", "score": -5.099381923675537, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5269889548203013, "gold_bleu_score": 0.4712320885927409}
{"index": 247, "beams": [{"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -1.0024834409705363e-05, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -2.5780842304229736, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.24908447265625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.3996777534484863, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -3.681880235671997, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "score": -4.3174214363098145, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -4.766480922698975, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.DestAirport = \"APG\"", "score": -4.963360786437988, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.9717888832092285, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -5.144085884094238, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.427949905395508, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.772335052490234, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.084064483642578, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.267872333526611, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "score": -6.681323528289795, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights departing from Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -6.688110828399658, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7768819135981285, "gold_bleu_score": 0.743063697189385}
{"index": 248, "beams": [{"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -5.990858653603937e-07, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.2901418209075928, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.SourceAirport = \"APG\"", "score": -4.344544410705566, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\")", "score": -4.422765731811523, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -4.429316997528076, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\" AND flights.DestAirport = \"APG\"", "score": -4.46959924697876, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (SELECT flights.DestAirport FROM flights WHERE flights.SourceAirport = \"APG\")", "score": -4.853863716125488, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.SourceAirport = \"APG\"", "score": -4.9127116203308105, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = \"APG\")", "score": -4.9287848472595215, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -4.9466705322265625, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.149674415588379, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (SELECT * FROM flights WHERE flights.SourceAirport = \"APG\")", "score": -5.15338659286499, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -5.357779502868652, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (\"APG\")", "score": -5.625688552856445, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.83114767074585, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights leaving from APG.", "inferred_code": "SELECT * FROM airlines", "score": -6.105584144592285, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6581095800153649, "gold_bleu_score": 0.6346284116689141}
{"index": 249, "beams": [{"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.04939192906022072, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -0.6085677742958069, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -0.7256730198860168, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -1.5113757848739624, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -1.6995203495025635, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.DestAirport = \"APG\"", "score": -1.8838897943496704, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -2.2531697750091553, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"APG\"", "score": -3.3082361221313477, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.7805137634277344, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"APG\"", "score": -3.8751132488250732, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN flights ON flights.SourceAirport = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -4.297968864440918, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportName = \"APG\"", "score": -4.309913158416748, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.5417914390563965, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "score": -4.639199733734131, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.818167209625244, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "What are flight numbers of flights arriving at Airport \"APG\"?", "inferred_code": "SELECT * FROM airlines", "score": -5.333179473876953, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8087854434974429, "gold_bleu_score": 0.7213607241811608}
{"index": 250, "beams": [{"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"APG\"", "score": -0.0021806780714541674, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = \"APG\"", "score": -1.3370981216430664, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport = \"APG\"", "score": -1.5569936037063599, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = \"APG\"", "score": -2.8628735542297363, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport = \"APG\"", "score": -2.9430360794067383, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"APG\"", "score": -3.07309889793396, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.2014822959899902, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = \"APG\"", "score": -3.3824474811553955, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT * FROM airlines", "score": -3.5399248600006104, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport = \"APG\"", "score": -3.609606981277466, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = \"APG\"", "score": -3.632427215576172, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -4.094310283660889, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = \"APG\"", "score": -4.184821128845215, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 4 AND flights.DestAirport = \"APG\"", "score": -4.6214447021484375, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport IN (SELECT airports.AirportCode FROM airports WHERE airports.AirportCode = \"APG\")", "score": -4.774438381195068, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}, {"orig_question": "Give the flight numbers of flights landing at APG.", "inferred_code": "SELECT * FROM airlines", "score": -5.614546298980713, "correct_code": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6457209075118366, "gold_bleu_score": 0.6477719032793907}
{"index": 251, "beams": [{"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.0005593431415036321, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.7145856618881226, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.453659772872925, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.5145769119262695, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.584068536758423, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.5872480869293213, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.5985844135284424, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6310853958129883, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6508748531341553, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.6723031997680664, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.740929365158081, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT * FROM airlines", "score": -3.744607925415039, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"?\"", "score": -3.9074928760528564, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.9402263164520264, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.190697193145752, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"What\"", "score": -4.270438194274902, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6497760969010329, "gold_bleu_score": 0.6498090076386144}
{"index": 252, "beams": [{"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.006288997363299131, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -1.6119390726089478, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -2.5670292377471924, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = \"Aberdeen\"", "score": -3.151153326034546, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.631535530090332, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT SUM(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.65832781791687, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.7362399101257324, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"leaving\"", "score": -3.8143653869628906, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"flights\"", "score": -3.8336341381073, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"Give\"", "score": -3.84437894821167, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT MAX(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.058645248413086, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.119905948638916, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.192620754241943, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.315340042114258, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT DISTINCT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.42806339263916, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights leaving from Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.679787635803223, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5463608752579985, "gold_bleu_score": 0.5776172767387668}
{"index": 253, "beams": [{"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.10349629819393158, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.2892991900444031, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -1.4767441749572754, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = \"Aberdeen\"", "score": -3.0234310626983643, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.202507972717285, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.7580578327178955, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.8170857429504395, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -3.9580209255218506, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.9659266471862793, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -4.083700180053711, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"?\"", "score": -4.1128973960876465, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.166537284851074, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.175103664398193, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.4933366775512695, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT * FROM airlines", "score": -4.6621413230896, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode HAVING \"Aberdeen\"", "score": -5.040053844451904, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5960786794052777, "gold_bleu_score": 0.6099723854223086}
{"index": 254, "beams": [{"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"", "score": -0.009500756859779358, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -0.937972903251648, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.492035388946533, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.502389669418335, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \"Aberdeen\"", "score": -3.5889346599578857, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"Give\"", "score": -3.689915895462036, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.782299757003784, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -3.8118979930877686, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"Give\"", "score": -3.95953369140625, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.060882568359375, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"flights\"", "score": -4.127119064331055, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND airports.AirportName = \"the\"", "score": -4.157584190368652, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\" AND flights.SourceAirport = \"flights\"", "score": -4.160088539123535, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.233875751495361, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT * FROM airlines", "score": -4.2760090827941895, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}, {"orig_question": "Give the flight numbers of flights arriving in Aberdeen.", "inferred_code": "SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = \"Aberdeen\"", "score": -4.366827487945557, "correct_code": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""}], "db_name": "flight_2", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5043062499431272, "gold_bleu_score": 0.5582120225736377}
{"index": 259, "beams": [{"orig_question": "How many employees are there?", "inferred_code": "SELECT COUNT(*) FROM employee", "score": 0.0, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT COUNT(*) FROM employee ORDER BY COUNT(*)", "score": -6.716593265533447, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -7.163654327392578, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -7.3330230712890625, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -7.399936676025391, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM employee", "score": -7.640232086181641, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT COUNT(*) FROM employee WHERE \"How\"", "score": -7.659902095794678, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -7.672063827514648, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT COUNT(*) FROM employee WHERE \"many\"", "score": -7.8475117683410645, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -8.2168607711792, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -8.459223747253418, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT COUNT(*) FROM employee ORDER BY employee.Age", "score": -8.49896240234375, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -8.58331298828125, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -8.596115112304688, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT * FROM employee", "score": -9.063823699951172, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "How many employees are there?", "inferred_code": "SELECT T(*) FROM employee", "score": -9.119606971740723, "correct_code": "SELECT count(*) FROM employee"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 260, "beams": [{"orig_question": "Count the number of employees", "inferred_code": "SELECT COUNT(*) FROM employee", "score": 0.0, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT COUNT(*) FROM employee WHERE EMPLOYEES(COUNT(*))", "score": -5.490224361419678, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT COUNT(*) FROM employee UNION SELECT COUNT(*) FROM employee", "score": -5.634305953979492, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -5.982857704162598, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -6.094658851623535, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT COUNT(*) FROM employee WHERE EMPLOYEES(employee.Age)", "score": -6.510972499847412, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT COUNT(*) = COUNT(*) FROM employee", "score": -6.611291885375977, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -7.0232133865356445, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -7.6882643699646, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -7.815379619598389, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT DISTINCT COUNT(*) FROM employee", "score": -8.22295093536377, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -8.309592247009277, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -8.406476974487305, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -8.702322006225586, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT * FROM employee", "score": -9.065820693969727, "correct_code": "SELECT count(*) FROM employee"}, {"orig_question": "Count the number of employees", "inferred_code": "SELECT T(*) FROM employee", "score": -9.11047649383545, "correct_code": "SELECT count(*) FROM employee"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8573739113063443, "gold_bleu_score": 0.4506984287461695}
{"index": 269, "beams": [{"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1", "score": -0.0007950677536427975, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products LIMIT 1", "score": -2.1616973876953125, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop) ORDER BY shop.Number_products DESC LIMIT 1", "score": -2.706408739089966, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN shop ON shop.Shop_ID = shop.Shop_ID WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop)", "score": -3.012932062149048, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Manager_name, shop.District ORDER BY SUM(shop.Number_products) DESC LIMIT 1", "score": -3.0679497718811035, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop)", "score": -3.1052560806274414, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN shop ON shop.Shop_ID = shop.Shop_ID WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop) ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.1804795265197754, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT * FROM employee", "score": -3.444577932357788, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY (shop.Number_products - shop.Number_products) DESC LIMIT 1", "score": -3.5447723865509033, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT * FROM employee", "score": -3.853287935256958, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.949665069580078, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1", "score": -4.017106056213379, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT * FROM employee", "score": -4.203312397003174, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop) ORDER BY shop.Number_products LIMIT 1", "score": -4.255335330963135, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Manager_name, shop.District ORDER BY SUM(shop.Number_products) LIMIT 1", "score": -4.35648775100708, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "Find the manager name and district of the shop whose number of products is the largest.", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY (shop.Number_products - shop.Number_products) DESC LIMIT 1", "score": -4.372859477996826, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8208337576466599, "gold_bleu_score": 0.6506388694721906}
{"index": 270, "beams": [{"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.474703362371656e-06, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop) ORDER BY shop.Number_products DESC LIMIT 1", "score": -2.5064640045166016, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Manager_name, shop.District ORDER BY SUM(shop.Number_products) DESC LIMIT 1", "score": -2.5660171508789062, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Manager_name, shop.District ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.692922592163086, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN shop ON shop.Shop_ID = shop.Shop_ID GROUP BY shop.Number_products ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.111111879348755, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT COUNT(*) FROM shop ORDER BY shop.Number_products DESC LIMIT 1)", "score": -3.1226675510406494, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT COUNT(shop.Number_products) FROM shop) ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.152634620666504, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN shop ON shop.Shop_ID = shop.Shop_ID GROUP BY shop.Number_products ORDER BY SUM(shop.Number_products) DESC LIMIT 1", "score": -3.1643059253692627, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name, shop.District ORDER BY SUM(shop.Number_products) DESC LIMIT 1", "score": -3.2321929931640625, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name, shop.District ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.3064863681793213, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(shop.Number_products) FROM shop)", "score": -3.5794737339019775, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY \"shop\" ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.581596851348877, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT COUNT(*) FROM shop ORDER BY shop.Number_products DESC LIMIT 1) ORDER BY shop.Number_products DESC LIMIT 1", "score": -3.586965799331665, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop GROUP BY shop.Number_products ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.831721782684326, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Manager_name, shop.District FROM shop GROUP BY shop.Number_products ORDER BY SUM(shop.Number_products) DESC LIMIT 1", "score": -3.8506312370300293, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}, {"orig_question": "What are the manager name and district of the shop that sells the largest number of products?", "inferred_code": "SELECT shop.Name, shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1", "score": -4.188301086425781, "correct_code": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8728251885087598, "gold_bleu_score": 0.667563857675544}
{"index": 271, "beams": [{"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop", "score": -3.761256550660619e-08, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT * FROM employee", "score": -3.488285779953003, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT * FROM employee", "score": -3.9800024032592773, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), ALL shop.Number_products FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.1946282386779785, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), \"of\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.227049827575684, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), \"number\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.3120293617248535, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT * FROM employee", "score": -4.3481292724609375, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop", "score": -4.463326454162598, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT * FROM employee", "score": -4.501190185546875, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), shop.Number_products FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.523036003112793, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), \"products\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.546199321746826, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products) FROM shop INTERSECT SELECT MAX(shop.Number_products) FROM shop", "score": -4.637188911437988, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), shop.District FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.668067455291748, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), \"stores\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.713682174682617, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), \"maximum\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.724781513214111, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "find the minimum and maximum number of products of all stores.", "inferred_code": "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop ORDER BY MAX(shop.Number_products)", "score": -4.914957523345947, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8247803495246612, "gold_bleu_score": 0.6098961734831503}
{"index": 272, "beams": [{"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop", "score": -3.761256550660619e-08, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT * FROM employee", "score": -4.048495292663574, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop", "score": -4.153613090515137, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"maximum\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.210023880004883, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), ALL shop.Number_products FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.285101890563965, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"of\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.343625545501709, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"number\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.458998203277588, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"products\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.578229904174805, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), shop.District FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.59566068649292, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), shop.Number_products FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.612599849700928, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"across\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.617528915405273, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products) FROM shop INTERSECT SELECT MAX(shop.Number_products) FROM shop", "score": -4.631446361541748, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"the\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.811737060546875, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), \"shops\" FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -4.81659460067749, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT * FROM employee", "score": -4.8516845703125, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}, {"orig_question": "What are the minimum and maximum number of products across all the shops?", "inferred_code": "SELECT MIN(shop.Number_products), shop.Shop_ID FROM shop WHERE shop.Number_products = (SELECT MIN(shop.Number_products) FROM shop)", "score": -5.048216342926025, "correct_code": "SELECT min(Number_products) ,  max(Number_products) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8992177278555928, "gold_bleu_score": 0.738750198072517}
{"index": 279, "beams": [{"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.0732913389801979, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -0.3332473635673523, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation)", "score": -1.6223459243774414, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation) ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -1.8476375341415405, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -1.886291742324829, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = 1 ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -1.9159150123596191, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -1.9797667264938354, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.0362045764923096, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.1327247619628906, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.1775293350219727, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.2545244693756104, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.2547566890716553, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.262666702270508, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.3589415550231934, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.6149039268493652, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Find the name of the employee who got the highest one time bonus.", "inferred_code": "SELECT * FROM employee", "score": -2.6161646842956543, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7433060868284485, "gold_bleu_score": 0.39818698672061864}
{"index": 280, "beams": [{"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -2.7193041773898585e-07, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Year_awarded = (SELECT MAX(evaluation.Bonus) FROM evaluation)", "score": -3.681556224822998, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation)", "score": -3.7472617626190186, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY SUM(evaluation.Bonus) DESC LIMIT 1", "score": -3.8567733764648438, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -3.8789899349212646, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT * FROM employee", "score": -4.033437728881836, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY MAX(evaluation.Bonus) DESC LIMIT 1", "score": -4.184340476989746, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT * FROM employee", "score": -4.215197563171387, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -4.338976860046387, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT * FROM employee", "score": -4.392253398895264, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -4.5272321701049805, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Year_awarded = (SELECT MAX(evaluation.Bonus) FROM evaluation) ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -4.53880500793457, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name, evaluation.Bonus FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1", "score": -4.608686923980713, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus ASC LIMIT 1", "score": -5.0441999435424805, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT * FROM employee", "score": -5.1004319190979, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}, {"orig_question": "Which employee received the biggest bonus? Give me the employee name.", "inferred_code": "SELECT * FROM employee", "score": -5.228759765625, "correct_code": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7150499833385907, "gold_bleu_score": 0.34866711174911136}
{"index": 289, "beams": [{"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation", "score": -1.5879973602750397e-07, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT 0 AS select sum (evaluation.Bonus) FROM evaluation", "score": -6.6806721687316895, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation WHERE \"given\"", "score": -7.3353729248046875, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT MAX(evaluation.Bonus) FROM evaluation", "score": -7.463222026824951, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -7.572933673858643, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -7.640948295593262, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation ORDER BY evaluation.Bonus", "score": -7.728351593017578, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT AVG(evaluation.Bonus) FROM evaluation", "score": -7.749671459197998, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT SUM(evaluation.Bonus != evaluation.Bonus) FROM evaluation", "score": -7.830195426940918, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -7.923438549041748, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -7.947221755981445, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -7.976695537567139, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT \"(evaluation.Bonus)\" FROM evaluation", "score": -8.2732572555542, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -8.554794311523438, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -8.747580528259277, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "What is total bonus given in all evaluations?", "inferred_code": "SELECT * FROM employee", "score": -8.813515663146973, "correct_code": "SELECT sum(bonus) FROM evaluation"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.516621141497156}
{"index": 290, "beams": [{"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation", "score": -1.0586648357957529e-07, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT 0 AS select sum (evaluation.Bonus) FROM evaluation", "score": -7.199983596801758, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -7.4285125732421875, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation ORDER BY evaluation.Bonus", "score": -7.480600833892822, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT MAX(evaluation.Bonus) FROM evaluation", "score": -7.566160678863525, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation WHERE \"the\"", "score": -7.588909149169922, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -7.7002854347229, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT SUM(evaluation.Bonus) FROM evaluation WHERE \"given\"", "score": -7.773506164550781, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT AVG(evaluation.Bonus) FROM evaluation", "score": -7.9525837898254395, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -8.054207801818848, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -8.101204872131348, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -8.16868782043457, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT \"(evaluation.Bonus)\" FROM evaluation", "score": -8.319594383239746, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -8.535690307617188, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT * FROM employee", "score": -8.74478530883789, "correct_code": "SELECT sum(bonus) FROM evaluation"}, {"orig_question": "Find the total amount of bonus given in all the evaluations.", "inferred_code": "SELECT \"sum\" AS evaluation.Bonus) FROM evaluation", "score": -9.043410301208496, "correct_code": "SELECT sum(bonus) FROM evaluation"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7321324084097605, "gold_bleu_score": 0.4571813449091093}
{"index": 295, "beams": [{"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop ORDER BY COUNT(DISTINCT shop.Location)", "score": -4.878156661987305, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -4.998255252838135, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -5.870105266571045, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -5.877669811248779, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location), COUNT(DISTINCT shop.Shop_ID) FROM shop", "score": -5.996828556060791, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -6.204309463500977, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop", "score": -6.534703731536865, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -6.752228260040283, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location), COUNT(DISTINCT shop.Name) FROM shop", "score": -6.764893054962158, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -6.815393924713135, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop WHERE shop.Location", "score": -6.9782562255859375, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -7.048513412475586, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -7.458968162536621, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT * FROM employee", "score": -7.5534186363220215, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "How many different store locations are there?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT shop.Location) FROM shop", "score": -8.04848575592041, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7898033387887059, "gold_bleu_score": 0.6773122443056879}
{"index": 296, "beams": [{"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop", "score": 0.0, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -5.000762939453125, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop ORDER BY COUNT(DISTINCT shop.Location)", "score": -5.026156425476074, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -5.232918739318848, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -5.296285629272461, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop WHERE shop.Location = \"VALUE\"", "score": -5.791598796844482, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -6.25067663192749, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) = COUNT(DISTINCT shop.Location) FROM shop", "score": -6.320537090301514, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) FROM shop WHERE shop.Location", "score": -6.647223949432373, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -6.889052867889404, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -6.960799217224121, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -7.459470748901367, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -7.509589195251465, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT shop.Location) FROM shop", "score": -7.888677597045898, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT COUNT(DISTINCT shop.Location) = 1 FROM shop", "score": -7.934365749359131, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}, {"orig_question": "Count the number of distinct store locations.", "inferred_code": "SELECT * FROM employee", "score": -8.003110885620117, "correct_code": "SELECT count(DISTINCT LOCATION) FROM shop"}], "db_name": "employee_hire_evaluation", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7450482106694913, "gold_bleu_score": 0.5340040345164269}
{"index": 297, "beams": [{"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.005124092102051, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.30284309387207, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.321869373321533, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE \"How\"", "score": -7.606037139892578, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "score": -7.920613765716553, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "score": -7.941351413726807, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE \"many\"", "score": -8.113686561584473, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT COUNT(*) AS Documents.Document_ID FROM Documents", "score": -8.155442237854004, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.542174339294434, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.618041038513184, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.695989608764648, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.7063627243042, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.735620498657227, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.182684898376465, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "How many documents do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.247198104858398, "correct_code": "SELECT count(*) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9253788278945004, "gold_bleu_score": 0.6752051870497195}
{"index": 298, "beams": [{"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents", "score": 0.0, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.24639368057251, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE COUNT(*)", "score": -6.531450271606445, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY COUNT(*)", "score": -6.686022758483887, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.393346309661865, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.557864189147949, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.5749592781066895, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE \"the\"", "score": -7.866861820220947, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT COUNT(*) FROM Documents ORDER BY Documents.Document_ID", "score": -8.09228801727295, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Documents", "score": -8.283616065979004, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.39978313446045, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.6084623336792, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.631431579589844, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.66751480102539, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.77153491973877, "correct_code": "SELECT count(*) FROM Documents"}, {"orig_question": "Count the number of documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.388795852661133, "correct_code": "SELECT count(*) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8767978747130881, "gold_bleu_score": 0.4354220039379098}
{"index": 299, "beams": [{"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": 0.0, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents EXCEPT SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -5.0307135581970215, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents INTERSECT SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -5.074804782867432, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_ID NOT IN (SELECT Documents.Document_Description FROM Documents)", "score": -5.201375484466553, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.28317928314209, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.3836541175842285, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"for\"", "score": -5.675683975219727, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_Description = \"VALUE\"", "score": -5.828013896942139, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_ID", "score": -6.573091506958008, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.608645915985107, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.696889877319336, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "score": -6.776599407196045, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents GROUP BY Documents.Document_ID", "score": -6.968471527099609, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.597419261932373, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.798354148864746, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "List document IDs, document names, and document descriptions for all documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.8210906982421875, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8288389643010444, "gold_bleu_score": 0.43361140785054164}
{"index": 300, "beams": [{"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -4.897050942531678e-08, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_ID NOT IN (SELECT Documents.Document_Description FROM Documents)", "score": -4.824174404144287, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_ID IN (SELECT Documents.Document_Description FROM Documents)", "score": -5.298596382141113, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.54247522354126, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.900386333465576, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.903465747833252, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents", "score": -5.963942050933838, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.154378414154053, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents WHERE Documents.Document_ID", "score": -6.281686305999756, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.390271186828613, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.639797687530518, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.696907997131348, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents GROUP BY Documents.Document_ID", "score": -6.798391342163086, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents ORDER BY Documents.Document_Description", "score": -6.850323677062988, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.879768371582031, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}, {"orig_question": "What are the ids, names, and descriptions for all documents?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.697690010070801, "correct_code": "SELECT document_id ,  document_name ,  document_description FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9804361546882999, "gold_bleu_score": 0.8606299761928231}
{"index": 301, "beams": [{"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -8.141724538290873e-05, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents JOIN Ref_Template_Types ON Documents.Template_ID = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Description LIKE \"% w %\"", "score": -1.8174289464950562, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.1582489013671875, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents JOIN Ref_Template_Types ON Documents.Document_Description = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Description LIKE \"% w %\"", "score": -2.3031680583953857, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.900860071182251, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.1877923011779785, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5818283557891846, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7292323112487793, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.906738758087158, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -3.954711675643921, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.968015670776367, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.033539772033691, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.180863380432129, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2665863037109375, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.32150936126709, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "What is the document name and template id for document with description with the letter 'w' in it?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.385244846343994, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6620526581392749, "gold_bleu_score": 0.45148722313833795}
{"index": 302, "beams": [{"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.5459154307536664e-07, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\" AND Documents.Template_ID LIKE \"% w %\"", "score": -3.743302822113037, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Name LIKE \"% w %\"", "score": -3.924701690673828, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.29721212387085, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.390155792236328, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE \"% w %\"", "score": -4.396082401275635, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.4112420082092285, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE MOD(Documents.Document_Description, \"% w %\")", "score": -4.592129230499268, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description NOT LIKE \"% w %\"", "score": -4.774215221405029, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7959513664245605, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.821129322052002, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.823332786560059, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.825634002685547, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.849323749542236, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.001657962799072, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}, {"orig_question": "Return the names and template ids for documents that contain the letter w in their description.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.102433204650879, "correct_code": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.626549574710178, "gold_bleu_score": 0.492687659591178}
{"index": 303, "beams": [{"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.87467332277447e-07, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.826815128326416, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.9014227390289307, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.1056056022644043, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" OR Documents.Document_Description = \"Robbin CV\"", "score": -3.4545843601226807, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.5098822116851807, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" AND Documents.Document_Description = \"Robbin CV\"", "score": -3.5737736225128174, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6745364665985107, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8558146953582764, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "score": -4.258456230163574, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.322727680206299, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, MOD(\"description\", Documents.Document_Description) FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.363246440887451, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.383638381958008, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, MOD(\"named\", Documents.Document_Description) FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.444087505340576, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"in CV\"", "score": -4.593992710113525, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "What is the document id, template id and description for document named \"Robbin CV\"?", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, \"description\" FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.750922679901123, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6507325485600449}
{"index": 304, "beams": [{"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -1.371004145767074e-06, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.6567375659942627, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -2.8667895793914795, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5007877349853516, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.5038411617279053, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Robbin CV\"", "score": -3.5062403678894043, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" OR Documents.Document_Description = \"Robbin CV\"", "score": -3.5545058250427246, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6981849670410156, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7515087127685547, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbinin CV\"", "score": -4.057368278503418, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.195888996124268, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robb Robbin CV\"", "score": -4.294442176818848, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, MOD(\"description\", Documents.Document_Description) FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.306069850921631, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.5000715255737305, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\" ORDER BY Documents.Document_Description", "score": -4.666679859161377, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}, {"orig_question": "Return the document id, template id, and description for the document with the name Robbin CV.", "inferred_code": "SELECT Documents.Document_ID, Documents.Template_ID, \"description\" FROM Documents WHERE Documents.Document_Name = \"Robbin CV\"", "score": -4.672767162322998, "correct_code": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7163975448841471, "gold_bleu_score": 0.5774576634845451}
{"index": 305, "beams": [{"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -0.004294655751436949, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents ORDER BY COUNT(DISTINCT Documents.Template_ID)", "score": -4.762505054473877, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents INTERSECT SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -5.145954132080078, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.203868865966797, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents UNION SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -5.217809677124023, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents EXCEPT SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -5.406893253326416, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.830608367919922, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents ORDER BY COUNT(DISTINCT Documents.Document_ID)", "score": -6.33430814743042, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.356925964355469, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.736972332000732, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.8778910636901855, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.027105331420898, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents UNION SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents", "score": -7.03594970703125, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.057412624359131, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -7.334561347961426, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "How many different templates do all document use?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.821061611175537, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.806925132925643, "gold_bleu_score": 0.622687545900707}
{"index": 306, "beams": [{"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": 0.0, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents ORDER BY COUNT(DISTINCT Documents.Template_ID)", "score": -5.088404655456543, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents UNION SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -5.113047122955322, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.324666976928711, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.445898532867432, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.481184005737305, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.457398891448975, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents WHERE Documents.Template_ID", "score": -7.063981533050537, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.071232318878174, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Documents.Template_ID) FROM Documents", "score": -7.22995138168335, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.253178596496582, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.281661510467529, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.667571067810059, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.953964710235596, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.082374572753906, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}, {"orig_question": "Count the number of different templates used for documents.", "inferred_code": "SELECT T(DISTINCT Documents.Template_ID) FROM Documents", "score": -8.274553298950195, "correct_code": "SELECT count(DISTINCT template_id) FROM Documents"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7306167408654605, "gold_bleu_score": 0.48726132370318637}
{"index": 317, "beams": [{"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) FROM Templates", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.405636310577393, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.421266078948975, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.783257484436035, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.877835273742676, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.181680679321289, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.384013652801514, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.476891040802002, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.540022373199463, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(* - Templates.Template_ID) FROM Templates", "score": -7.631471633911133, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "score": -7.764017105102539, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Date_Effective_To", "score": -7.914568901062012, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "score": -7.966418743133545, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.273927688598633, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT COUNT(*) AS Templates.Template_ID FROM Templates", "score": -8.40147876739502, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "How many templates do we have?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.444620132446289, "correct_code": "SELECT count(*) FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9589443843070234, "gold_bleu_score": 0.6752051870497195}
{"index": 318, "beams": [{"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates", "score": 0.0, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Date_Effective_To < \"s\"", "score": -6.2686262130737305, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.445314407348633, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.531590938568115, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY COUNT(*)", "score": -6.881208896636963, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates WHERE Templates.Date_Effective_To", "score": -7.354969024658203, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.490650653839111, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.585206031799316, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(* - Templates.Template_ID) FROM Templates", "score": -7.642844200134277, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) = 0.1 FROM Templates", "score": -7.885012149810791, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT COUNT(*) FROM Templates ORDER BY Templates.Date_Effective_To", "score": -8.087017059326172, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.284871101379395, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Templates", "score": -8.454119682312012, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.69350814819336, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.903031349182129, "correct_code": "SELECT count(*) FROM Templates"}, {"orig_question": "Count the number of templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.967235565185547, "correct_code": "SELECT count(*) FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.874676275291445, "gold_bleu_score": 0.4354220039379098}
{"index": 319, "beams": [{"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": 0.0, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID IN (SELECT Templates.Template_Type_Code FROM Templates)", "score": -4.455902099609375, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Templates.Template_Type_Code FROM Templates)", "score": -4.559310436248779, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.763944149017334, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -4.923710346221924, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.136532783508301, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -5.307868003845215, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.608962535858154, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.663186073303223, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_ID = Templates.Template_Type_Code", "score": -5.799837589263916, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -6.201821327209473, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -6.231468200683594, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.416516304016113, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_ID", "score": -6.6350274085998535, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.789773941040039, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "Show template ids, version numbers, and template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.051171779632568, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7956734758318074, "gold_bleu_score": 0.7589249848981845}
{"index": 320, "beams": [{"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -4.897050942531678e-08, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Templates.Template_Type_Code FROM Templates)", "score": -4.364254951477051, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID IN (SELECT Templates.Template_Type_Code FROM Templates)", "score": -4.415462017059326, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -4.860786437988281, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -5.219362258911133, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_ID = Templates.Template_Type_Code", "score": -5.41419792175293, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.5939106941223145, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.694376468658447, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -5.8632354736328125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -6.059154033660889, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.3231587409973145, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.326277732849121, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.3383331298828125, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.389883518218994, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_ID", "score": -6.40615177154541, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}, {"orig_question": "What are the ids, version numbers, and type codes for each template?", "inferred_code": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID", "score": -6.991649150848389, "correct_code": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9163249438023415, "gold_bleu_score": 0.8093829795090309}
{"index": 321, "beams": [{"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -6.308217592732035e-08, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates EXCEPT SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -5.695836544036865, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "score": -6.265624046325684, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_Type_Code = Templates.Template_Type_Code", "score": -6.691346645355225, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_Type_Code = Templates.Template_ID", "score": -6.815126895904541, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "score": -7.230869293212891, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "score": -7.923338890075684, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -8.024232864379883, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.124120712280273, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_To", "score": -8.134033203125, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code", "score": -8.293800354003906, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -8.479891777038574, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.485270500183105, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code, Templates.Date_Effective_To FROM Templates", "score": -8.943611145019531, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates AS wheres", "score": -9.141412734985352, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "Show all distinct template type codes for all templates.", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates WHERE \"template\"", "score": -9.250537872314453, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6383904533968761, "gold_bleu_score": 0.7142769518282278}
{"index": 322, "beams": [{"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates", "score": -2.173216489609331e-05, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.8733930587768555, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates", "score": -5.99237585067749, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code", "score": -6.026367664337158, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"VALUE\"", "score": -6.475985527038574, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT DISTINCT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Templates", "score": -6.514150142669678, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT MIN(Templates.Template_Type_Code) FROM Templates", "score": -6.570182800292969, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"different\"", "score": -6.596663951873779, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details = \"template\"", "score": -6.75872802734375, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT MAX(Templates.Template_Type_Code) FROM Templates", "score": -7.668509006500244, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.028428077697754, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_To", "score": -8.307743072509766, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE \"type\"", "score": -8.439502716064453, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE \"codes\"", "score": -8.472894668579102, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates WHERE \"template\"", "score": -8.594804763793945, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}, {"orig_question": "What are the different template type codes?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.633000373840332, "correct_code": "SELECT DISTINCT template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9131614903123707, "gold_bleu_score": 0.6454503762183497}
{"index": 327, "beams": [{"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "score": -0.16984257102012634, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -0.32855984568595886, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE\"", "score": -1.9400852918624878, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"than 5\"", "score": -2.2980294227600098, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number VALUE\"", "score": -2.313416004180908, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version VALUE\"", "score": -2.485940456390381, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number 5\"", "score": -2.5534884929656982, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later 5\"", "score": -2.6908152103424072, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"number\" AND Templates.Template_Type_Code > 5", "score": -2.7732701301574707, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"5 %\"", "score": -2.778717517852783, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"with VALUE\"", "score": -2.7818074226379395, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later\" AND Templates.Template_Type_Code > 5", "score": -2.8205161094665527, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"version 5\"", "score": -2.9706454277038574, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > \"later VALUE.VALUE\"", "score": -2.9713218212127686, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.216878890991211, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "What is the version number and template type code for the template with version number later than 5?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.4461357593536377, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7771273732702592, "gold_bleu_score": 0.7479067852723408}
{"index": 328, "beams": [{"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5", "score": -0.004409371875226498, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -1.683529019355774, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.3865087032318115, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.421567678451538, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.433044195175171, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.477663516998291, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.4823131561279297, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.6218345165252686, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.8200175762176514, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details > 5", "score": -2.8761985301971436, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Type_Code > 5", "score": -2.976545810699463, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.060202121734619, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.072554349899292, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5", "score": -3.0837574005126953, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.086591958999634, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}, {"orig_question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3163435459136963, "correct_code": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7941927970971281, "gold_bleu_score": 0.8298055198059607}
{"index": 335, "beams": [{"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1", "score": -0.008168005384504795, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1", "score": -1.2701679468154907, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates EXCEPT SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates", "score": -3.84035062789917, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates", "score": -3.948047399520874, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY (Templates.Version_Number - Templates.Template_Type_Code) LIMIT 1", "score": -4.187004089355469, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY SUM(Templates.Version_Number) LIMIT 1", "score": -4.193228244781494, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number DESC LIMIT 1", "score": -4.227872848510742, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2309651374816895, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY (Templates.Version_Number - Templates.Date_Effective_To) ASC LIMIT 1", "score": -4.265761375427246, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.621048927307129, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY SUM(Templates.Version_Number) ASC LIMIT 1", "score": -4.6287736892700195, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY (Templates.Version_Number - Templates.Template_Type_Code)", "score": -4.815289497375488, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.867986679077148, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.956671714782715, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 3", "score": -5.167562961578369, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "What the smallest version number and its template type code?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.394718647003174, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9903586244828587, "gold_bleu_score": 0.6307756528393211}
{"index": 336, "beams": [{"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1", "score": -0.03824371472001076, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1", "score": -0.7662554979324341, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY (Templates.Version_Number - Templates.Date_Effective_To) ASC LIMIT 1", "score": -4.082442283630371, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.445569038391113, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates", "score": -4.455344200134277, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.484539985656738, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number DESC LIMIT 1", "score": -4.703222274780273, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.710036277770996, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.712586402893066, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.768921375274658, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 3", "score": -4.935275554656982, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.955170631408691, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.957588195800781, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number", "score": -5.15269136428833, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY (Templates.Version_Number - Templates.Template_Type_Code)", "score": -5.558573246002197, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}, {"orig_question": "Return the lowest version number, along with its corresponding template type code.", "inferred_code": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number < Templates.Date_Effective_To", "score": -5.576182842254639, "correct_code": "SELECT min(Version_Number) ,  template_type_code FROM Templates"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6443160096791559, "gold_bleu_score": 0.5032815543994463}
{"index": 337, "beams": [{"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -4.070831209901371e-07, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\" EXCEPT SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -2.6311025619506836, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.3190083503723145, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.437427520751953, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.496277332305908, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.5048506259918213, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data Data base\"", "score": -3.668583631515503, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"name Data base\"", "score": -3.724334478378296, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Documents ON Documents.Template_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.7543466091156006, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -3.8104043006896973, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.111187934875488, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"the Data base\"", "score": -4.2951507568359375, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.443716526031494, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.521152973175049, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.527090072631836, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "What is the template type code of the template used by document with the name \"Data base\"?", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base base\"", "score": -4.615897178649902, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.848926312240745, "gold_bleu_score": 0.7186990159929875}
{"index": 338, "beams": [{"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -0.0010478738695383072, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -1.3369404077529907, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -2.2610924243927, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -2.8772051334381104, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Templates ON Templates.Template_Type_Code = Templates.Template_ID WHERE Documents.Document_Name = \"Data base\"", "score": -2.9337732791900635, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"named base\"", "score": -3.0148138999938965, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"named Data base\"", "score": -3.079427719116211, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.160324811935425, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"document Data base\"", "score": -3.2606201171875, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"used Data base\"", "score": -3.4923272132873535, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data Data base\"", "score": -3.4997291564941406, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"a Data base\"", "score": -3.6272761821746826, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"by Data base\"", "score": -3.7941439151763916, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"template Data base\"", "score": -3.8827478885650635, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data .\"", "score": -4.085748672485352, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}, {"orig_question": "Return the template type code of the template that is used by a document named Data base.", "inferred_code": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"used base\"", "score": -4.08815860748291, "correct_code": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6740409431776478, "gold_bleu_score": 0.7214709213537328}
{"index": 347, "beams": [{"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -2.878715577026014e-07, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -4.628565311431885, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types EXCEPT SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -5.907514572143555, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INTERSECT SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -6.059504508972168, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.8064069747924805, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.812357425689697, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.025806903839111, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.088214874267578, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.106901168823242, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.176900386810303, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.239989280700684, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types GROUP BY Ref_Template_Types.Template_Type_Code", "score": -7.373305320739746, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.42929220199585, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.478611469268799, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.624606609344482, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "Show all template type codes and descriptions.", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Code,Ref_Template_Types.Template_Type_Description", "score": -7.97340202331543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7818292619375122, "gold_bleu_score": 0.6828775444665229}
{"index": 348, "beams": [{"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": 0.0, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types EXCEPT SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -5.596506118774414, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INTERSECT SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -5.703014373779297, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.195826530456543, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.208924770355225, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.212180137634277, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.231346130371094, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.320881366729736, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.330066204071045, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.369227886199951, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.5169501304626465, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types INTERSECT SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types", "score": -7.8129754066467285, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types ORDER BY Ref_Template_Types.Template_Type_Description", "score": -7.923111438751221, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.923130989074707, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types GROUP BY Ref_Template_Types.Template_Type_Code", "score": -8.156148910522461, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}, {"orig_question": "What are the type codes and descriptions for all template types?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.483549118041992, "correct_code": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.987637369214212, "gold_bleu_score": 0.7779804568315335}
{"index": 351, "beams": [{"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": 0.0, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -3.927236318588257, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" EXCEPT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -4.093284606933594, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "score": -4.766327857971191, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -4.9870924949646, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" OR Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -5.299618721008301, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.737079620361328, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description\"", "score": -6.010211944580078, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description\"", "score": -6.223260402679443, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.484301567077637, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.510527610778809, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.5680413246154785, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"type Book\"", "score": -6.869050979614258, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.038372993469238, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "score": -7.210831165313721, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "What is the template type code for template type description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.220238208770752, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7711041835389051, "gold_bleu_score": 0.6276037982970503}
{"index": 352, "beams": [{"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": 0.0, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -3.8559694290161133, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" EXCEPT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -4.03761625289917, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Code = \"Book\"", "score": -4.773569583892822, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" AND Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -5.066678047180176, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Book\"", "score": -5.390791893005371, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.1937689781188965, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Book\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description\"", "score": -6.469913959503174, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.601734638214111, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"description Book\"", "score": -6.6932196617126465, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.791985988616943, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.063952445983887, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.145565032958984, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description != \"Book\"", "score": -7.228740692138672, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.440946102142334, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}, {"orig_question": "Return the type code of the template type with the description \"Book\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.475183963775635, "correct_code": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5185723349586695, "gold_bleu_score": 0.5796732154967233}
{"index": 353, "beams": [{"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -0.7039713859558105, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID", "score": -2.3476078510284424, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID", "score": -2.3982279300689697, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.4704771041870117, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.797375440597534, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.024164199829102, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code EXCEPT SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID", "score": -4.641147136688232, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.829780101776123, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.94693660736084, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.020657062530518, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.064242362976074, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.070407390594482, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.220920085906982, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.285715103149414, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Document_ID", "score": -6.095168590545654, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "What are the distinct template type descriptions for the templates ever used by any document?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.148961067199707, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9735234334774275, "gold_bleu_score": 0.7765684958910057}
{"index": 354, "beams": [{"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -1.7219046354293823, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID", "score": -3.8361012935638428, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code", "score": -4.589396953582764, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.811328411102295, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.873345851898193, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.917053699493408, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.945636749267578, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0162034034729, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.070993900299072, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.123366832733154, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.4469404220581055, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Documents.Template_ID = Ref_Template_Types.Template_Type_Code", "score": -5.501229763031006, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.506993293762207, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.78813362121582, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.34677267074585, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}, {"orig_question": "Return the different descriptions for templates that have been used in a document.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.434600830078125, "correct_code": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7142631539401854, "gold_bleu_score": 0.605558146344899}
{"index": 355, "beams": [{"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -1.828001501280596e-07, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.494387626647949, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.62962007522583, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -3.5218682289123535, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.673161029815674, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Template_Type_Code = \"Presentation\"", "score": -3.841820478439331, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" OR Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -3.9519710540771484, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -4.137044429779053, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.254396915435791, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT \"Templates.Template_ID.Templates.Date_Effective_To\" FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -4.281063556671143, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.617279529571533, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.6307501792907715, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.63720178604126, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.766564846038818, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.827301025390625, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "What are the template ids with template type description \"Presentation\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.873006343841553, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9708293756036185, "gold_bleu_score": 0.7644148639582011}
{"index": 356, "beams": [{"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -5.78867570766306e-07, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.696791887283325, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" INTERSECT SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -2.873142719268799, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Templates ON Templates.Template_ID = Templates.Template_ID WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -3.6193859577178955, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" OR Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -3.9426987171173096, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"", "score": -3.9989631175994873, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Template_Type_Code = \"Presentation\"", "score": -4.046019077301025, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = \"Presentation\" AND Templates.Date_Effective_To = \"Presentation\"", "score": -4.101696491241455, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2045087814331055, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.30146598815918, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.7403740882873535, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.883193016052246, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.920659065246582, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.955752849578857, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.0413899421691895, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}, {"orig_question": "Return the ids corresponding to templates with the description 'Presentation'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.091429710388184, "correct_code": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6837027326005842, "gold_bleu_score": 0.5934739244484091}
{"index": 357, "beams": [{"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.339728832244873, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.398983955383301, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.405689239501953, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "score": -7.609496593475342, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "score": -7.641952991485596, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs WHERE \"many\"", "score": -7.774111270904541, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs WHERE \"How\"", "score": -8.00241470336914, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(* - Paragraphs.Paragraph_ID) FROM Paragraphs", "score": -8.026093482971191, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.208415985107422, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.624150276184082, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT COUNT(*) FROM Paragraphs AS 0", "score": -8.628588676452637, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.652116775512695, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT SUM(*) FROM Paragraphs", "score": -8.815164566040039, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT T(*) FROM Paragraphs", "score": -9.02196216583252, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "How many paragraphs in total?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -9.289979934692383, "correct_code": "SELECT count(*) FROM Paragraphs"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.99536571811756, "gold_bleu_score": 0.6874330434749188}
{"index": 358, "beams": [{"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs", "score": 0.0, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.837428569793701, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.316461563110352, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.363677978515625, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.55129861831665, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs WHERE COUNT(*)", "score": -6.615813732147217, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY COUNT(*)", "score": -7.0896525382995605, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs ORDER BY Paragraphs.Paragraph_ID", "score": -7.627152919769287, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs WHERE \"the\"", "score": -8.018604278564453, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.020085334777832, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs WHERE \"of\"", "score": -8.110636711120605, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.274956703186035, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.383222579956055, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Paragraphs", "score": -8.505241394042969, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.57742691040039, "correct_code": "SELECT count(*) FROM Paragraphs"}, {"orig_question": "Count the number of paragraphs.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -8.664767265319824, "correct_code": "SELECT count(*) FROM Paragraphs"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.872734932206784, "gold_bleu_score": 0.45661538345323555}
{"index": 359, "beams": [{"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -7.669522261721795e-08, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" OR Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -2.7530226707458496, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Paragraph_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -2.836728811264038, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -3.263495922088623, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" AND Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -3.3004603385925293, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6701464653015137, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.752272367477417, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.9706342220306396, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.030746936798096, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"name Summer Show\"", "score": -4.053555965423584, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "score": -4.140703201293945, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.238967418670654, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.247531890869141, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.462086200714111, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT SUM(Paragraphs.Paragraph_Text) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.522037506103516, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "How many paragraphs for the document with name 'Summer Show'?", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.564474582672119, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7502142514950795, "gold_bleu_score": 0.5643443121254008}
{"index": 360, "beams": [{"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -2.3008570337879064e-07, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" OR Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -2.7011983394622803, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Paragraph_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -2.832392692565918, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -3.2768237590789795, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" AND Paragraphs.Paragraph_Text = \"Summer Show\"", "score": -3.3231594562530518, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Summer Show\"", "score": -3.586996555328369, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7540271282196045, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.7655062675476074, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.794840097427368, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" GROUP BY Paragraphs.Paragraph_Text", "score": -4.050047397613525, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.2458953857421875, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Show Show\"", "score": -4.247913360595703, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.261407375335693, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Summer Summer Show\"", "score": -4.371190071105957, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.432773590087891, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}, {"orig_question": "Count the number of paragraphs in the document named 'Summer Show'.", "inferred_code": "SELECT COUNT(*) FROM Documents WHERE Documents.Document_Name = \"Summer Show\"", "score": -4.583730220794678, "correct_code": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5245870605153433, "gold_bleu_score": 0.505711721245548}
{"index": 361, "beams": [{"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -7.235896646307083e-07, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -3.3494272232055664, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" EXCEPT SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -4.434201240539551, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" OR Paragraphs.Paragraph_Text = \"Korea\"", "score": -5.245004653930664, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \"Korea\"", "score": -5.314347267150879, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Paragraph_ID = \"Korea\"", "score": -5.474178314208984, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \"'Korea\"", "score": -5.729981422424316, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" AND Paragraphs.Other_Details = \".\"", "score": -5.881747722625732, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.35603666305542, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.574761390686035, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.667330265045166, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -6.71903657913208, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\" ORDER BY Paragraphs.Other_Details", "score": -6.851373672485352, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \"Korea\"", "score": -6.904334545135498, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -7.173171043395996, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "Show paragraph details for paragraph with text 'Korea ' .", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"Korea\"", "score": -7.255502700805664, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8354631030582608, "gold_bleu_score": 0.45812636871336043}
{"index": 362, "beams": [{"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -9.271564522350673e-06, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -2.7856664657592773, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -3.561990261077881, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6598994731903076, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -3.7415084838867188, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Template_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -4.501058101654053, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Paragraph_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -4.570669174194336, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.677633285522461, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.186127185821533, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -5.285362720489502, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.297455787658691, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.53195333480835, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea like\"", "score": -5.675230503082275, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\" ORDER BY Paragraphs.Other_Details", "score": -5.685729026794434, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text LIKE \"% Korea %\"", "score": -5.766861915588379, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}, {"orig_question": "What are the details for the paragraph that includes the text 'Korea ' ?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.819235324859619, "correct_code": "select other_details from paragraphs where paragraph_text like 'korea'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6851128583752855, "gold_bleu_score": 0.5287034741722918}
{"index": 363, "beams": [{"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -0.007396950852125883, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -0.7258918881416321, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.1894538402557373, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "score": -3.241177797317505, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.5024948120117188, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Documents.Document_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.579899549484253, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.741760015487671, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.923251152038574, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome Welcome to NY\"", "score": -3.954286575317383, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.098846912384033, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.122706413269043, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to to NY\"", "score": -4.172540664672852, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Documents.Document_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.193263053894043, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.2688422203063965, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.287222385406494, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"to NY\"", "score": -4.445248603820801, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8385561882838587, "gold_bleu_score": 0.6415193313426572}
{"index": 364, "beams": [{"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.1219075279077515e-06, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.5294129848480225, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.8313300609588623, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -2.89650821685791, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" AND Paragraphs.Paragraph_Text = \"Welcome to NY\"", "score": -3.311805248260498, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT \"Paragraphs\", Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.468890905380249, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Paragraphs.Paragraph_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.4876739978790283, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6123335361480713, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -3.7905125617980957, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\" ORDER BY Paragraphs.Paragraph_ID", "score": -3.9398882389068604, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome Welcome to NY\"", "score": -3.995190143585205, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to to NY\"", "score": -4.0555877685546875, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text, Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.242315769195557, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Documents.Document_Description, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Welcome to NY\"", "score": -4.312748432159424, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name != \"Welcome to NY\"", "score": -4.326796531677246, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}, {"orig_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.3837666511535645, "correct_code": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8801928797765478, "gold_bleu_score": 0.7854675498258492}
{"index": 365, "beams": [{"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -0.1420397013425827, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -0.19955527782440186, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" EXCEPT SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -2.8309576511383057, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -2.8495326042175293, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" EXCEPT SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -2.8659884929656982, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.2245843410491943, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.2538485527038574, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.26084041595459, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.3150837421417236, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.494847059249878, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.544027805328369, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.6388325691223145, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8425815105438232, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -3.8461122512817383, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.02782678604126, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "Show all paragraph texts for the document \"Customer reviews\".", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.3876447677612305, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5999642664095262, "gold_bleu_score": 0.5480654199938684}
{"index": 366, "beams": [{"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -1.8900335589933093e-06, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" EXCEPT SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -2.724762201309204, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -2.7812156677246094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Paragraph_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.0947797298431396, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.3585622310638428, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" AND Paragraphs.Paragraph_ID = \"Customer reviews\"", "score": -3.710554838180542, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" OR Documents.Document_Name = \"Customer reviews\"", "score": -3.8770854473114014, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"", "score": -3.9560463428497314, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer Customer reviews\"", "score": -4.273680210113525, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -4.580156326293945, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews reviews\"", "score": -4.848294734954834, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = \"Customer reviews\" ORDER BY Paragraphs.Paragraph_Text", "score": -4.912668228149414, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.04852294921875, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.158475399017334, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.200568675994873, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}, {"orig_question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "inferred_code": "SELECT * FROM Ref_Template_Types", "score": -5.320945739746094, "correct_code": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""}], "db_name": "cre_Doc_Template_Mgt", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8249756678015215, "gold_bleu_score": 0.7025369854121599}
{"index": 381, "beams": [{"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher UNION SELECT COUNT(*) FROM teacher", "score": -5.88544225692749, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher ORDER BY COUNT(*)", "score": -6.6430253982543945, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.144132137298584, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.217768669128418, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.264132022857666, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.344822883605957, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.662063121795654, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -7.674892425537109, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher WHERE \"How\"", "score": -7.785399913787842, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM teacher", "score": -7.975339889526367, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher WHERE \"many\"", "score": -8.03855037689209, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT COUNT(*) FROM teacher ORDER BY teacher.Name", "score": -8.406519889831543, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -8.407367706298828, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -8.581217765808105, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "How many teachers are there?", "inferred_code": "SELECT * FROM course", "score": -9.010103225708008, "correct_code": "SELECT count(*) FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 382, "beams": [{"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT COUNT(*) FROM teacher", "score": 0.0, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT COUNT(*) FROM teacher UNION SELECT COUNT(*) FROM teacher", "score": -5.559419631958008, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT COUNT(*) FROM teacher ORDER BY COUNT(*)", "score": -6.544821262359619, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.167530059814453, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.399107456207275, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.6001996994018555, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.6281633377075195, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.752586841583252, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.895971775054932, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -8.297261238098145, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM teacher", "score": -8.540536880493164, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -8.58646011352539, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT COUNT(*) FROM teacher ORDER BY teacher.Name", "score": -8.622783660888672, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -8.769752502441406, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT * FROM course", "score": -8.969494819641113, "correct_code": "SELECT count(*) FROM teacher"}, {"orig_question": "What is the total count of teachers?", "inferred_code": "SELECT T(*) FROM teacher", "score": -9.40959644317627, "correct_code": "SELECT count(*) FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9295702929774221, "gold_bleu_score": 0.32966657891342255}
{"index": 385, "beams": [{"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher EXCEPT SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -5.750894546508789, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher WHERE teacher.Name = \"VALUE\"", "score": -6.2139973640441895, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher INTERSECT SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -6.223206043243408, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -6.606864929199219, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -6.7938361167907715, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -6.867164134979248, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -6.974360942840576, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher GROUP BY teacher.Age, teacher.Hometown", "score": -7.113393306732178, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.423294544219971, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.433530330657959, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.467776775360107, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.558241844177246, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -7.949914932250977, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher ORDER BY teacher.Hometown", "score": -8.155969619750977, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What are the age and hometown of teachers?", "inferred_code": "SELECT * FROM course", "score": -8.666478157043457, "correct_code": "SELECT Age ,  Hometown FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9756162326249948, "gold_bleu_score": 0.8267663329190093}
{"index": 386, "beams": [{"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher", "score": 0.0, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher EXCEPT SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -5.724883556365967, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -6.131651401519775, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher WHERE teacher.Name = \"VALUE\"", "score": -6.146124362945557, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher INTERSECT SELECT teacher.Age, teacher.Hometown FROM teacher", "score": -6.304006099700928, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -6.715978145599365, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -6.784681797027588, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher GROUP BY teacher.Age, teacher.Hometown", "score": -7.228129863739014, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -7.251250743865967, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -7.301286220550537, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -7.6226396560668945, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -7.703879356384277, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -7.830726146697998, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher ORDER BY teacher.Hometown", "score": -7.987196922302246, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT * FROM course", "score": -8.7423734664917, "correct_code": "SELECT Age ,  Hometown FROM teacher"}, {"orig_question": "What is the age and hometown of every teacher?", "inferred_code": "SELECT teacher.Age, teacher.Hometown FROM teacher ORDER BY teacher.Name", "score": -9.06898307800293, "correct_code": "SELECT Age ,  Hometown FROM teacher"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8998522422093682, "gold_bleu_score": 0.6602161827191482}
{"index": 387, "beams": [{"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\"", "score": -1.0661025839908689e-07, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\" EXCEPT SELECT teacher.Name FROM teacher WHERE teacher.Hometown = \"Little Lever Urban District\"", "score": -3.3634960651397705, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\" AND teacher.Hometown != \"Little Lever Urban District\"", "score": -3.6650779247283936, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Little Lever Urban District\"", "score": -4.278829097747803, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID WHERE teacher.Hometown != \"Little Lever Urban District\"", "score": -4.515124320983887, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District District\"", "score": -4.886600971221924, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban Urban District\"", "score": -4.991691589355469, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Lever Urban District\"", "score": -5.054807186126709, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT * FROM course", "score": -5.3751630783081055, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT * FROM course", "score": -5.647699356079102, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District VALUE\"", "score": -5.680854797363281, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District .\"", "score": -5.6850128173828125, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown = \"Little Lever Urban District\"", "score": -5.772441387176514, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT * FROM course", "score": -5.824314117431641, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher GROUP BY teacher.Hometown != \"Little Lever Urban District\"", "score": -5.937088966369629, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Urban District\"", "score": -6.054984092712402, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.7057487959300309}
{"index": 388, "beams": [{"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\"", "score": -8.884187252533593e-08, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\" EXCEPT SELECT teacher.Name FROM teacher WHERE teacher.Hometown = \"Little Lever Urban District\"", "score": -3.3144400119781494, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District\" AND teacher.Hometown != \"Little Lever Urban District\"", "score": -3.713693857192993, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Little Lever Urban District\"", "score": -4.3220744132995605, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID WHERE teacher.Hometown != \"Little Lever Urban District\"", "score": -4.442065238952637, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District District\"", "score": -4.950646877288818, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Lever Urban District\"", "score": -4.973087310791016, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban Urban District\"", "score": -4.988513946533203, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT * FROM course", "score": -5.473443031311035, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT * FROM course", "score": -5.476661682128906, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Lever Urban District VALUE\"", "score": -5.610448837280273, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown != \"Little Urban District\"", "score": -5.7638702392578125, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher WHERE teacher.Hometown = \"Little Lever Urban District\"", "score": -5.840456485748291, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT teacher.Name FROM teacher GROUP BY teacher.Hometown != \"Little Lever Urban District\"", "score": -5.8441267013549805, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT * FROM course", "score": -5.876321792602539, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}, {"orig_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "inferred_code": "SELECT * FROM course", "score": -5.957026481628418, "correct_code": "select name from teacher where hometown != \"little lever urban district\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.7427404881940473}
{"index": 391, "beams": [{"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -0.0028803551103919744, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1", "score": -1.8966597318649292, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher)", "score": -4.232588291168213, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher) ORDER BY teacher.Age LIMIT 1", "score": -4.646791458129883, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher) ORDER BY teacher.Age ASC LIMIT 1", "score": -4.837523937225342, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher JOIN teacher ON teacher.Age = teacher.Teacher_ID ORDER BY teacher.Age LIMIT 1", "score": -4.884833812713623, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) LIMIT 1", "score": -5.273574352264404, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher JOIN teacher ON teacher.Age = teacher.Teacher_ID ORDER BY teacher.Age ASC LIMIT 1", "score": -5.737443923950195, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT \"teacher\"", "score": -5.8319902420043945, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -5.8678812980651855, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT * FROM course", "score": -6.011636257171631, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT * FROM course", "score": -6.046234607696533, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age DESC LIMIT 1", "score": -6.114287853240967, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -6.447021961212158, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age < teacher.Age LIMIT 1", "score": -6.6923346519470215, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "What is the hometown of the youngest teacher?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher) ORDER BY teacher.Age", "score": -7.018771171569824, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5544634359587531, "gold_bleu_score": 0.4954189416504559}
{"index": 392, "beams": [{"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -9.794101885063355e-08, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher)", "score": -4.255213260650635, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher) ORDER BY teacher.Age LIMIT 1", "score": -4.985468864440918, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher JOIN teacher ON teacher.Age = teacher.Teacher_ID ORDER BY teacher.Age LIMIT 1", "score": -5.171257972717285, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT * FROM course", "score": -5.4168596267700195, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT * FROM course", "score": -5.592952728271484, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) LIMIT 1", "score": -5.60845422744751, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1", "score": -5.810890197753906, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT * FROM course", "score": -5.820801734924316, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -6.354893684387207, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(teacher.Age) FROM teacher) ORDER BY teacher.Age ASC LIMIT 1", "score": -6.952023029327393, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT * FROM course", "score": -7.112752914428711, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age DESC LIMIT 1", "score": -7.732507705688477, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Hometown FROM teacher EXCEPT SELECT teacher.Age FROM teacher", "score": -7.764797687530518, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT teacher.Age FROM teacher ORDER BY teacher.Age LIMIT 1", "score": -7.784514904022217, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}, {"orig_question": "Where is the youngest teacher from?", "inferred_code": "SELECT * FROM course", "score": -7.818971633911133, "correct_code": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.43107609846792294, "gold_bleu_score": 0.27734240217359435}
{"index": 399, "beams": [{"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID", "score": -0.004649144597351551, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID", "score": -0.9159013628959656, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Course_ID = teacher.Teacher_ID", "score": -2.531984567642212, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Teacher_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID", "score": -3.0673751831054688, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID", "score": -3.1121888160705566, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Course_ID = teacher.Teacher_ID", "score": -3.179213762283325, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID", "score": -3.256798505783081, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID", "score": -3.4613142013549805, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \". they\"", "score": -3.4727602005004883, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \". are\"", "score": -3.493765354156494, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \". arranged\"", "score": -3.502894878387451, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Course_ID = teacher.Teacher_ID", "score": -3.5290563106536865, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Name, course.Course", "score": -3.804128408432007, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT * FROM course", "score": -4.1415839195251465, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Teacher_ID = course.Course_ID JOIN teacher ON course_arrange.Course_ID = teacher.Teacher_ID", "score": -4.1977338790893555, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "Show names of teachers and the courses they are arranged to teach.", "inferred_code": "SELECT teacher.Name LIKE course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID", "score": -4.337594985961914, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8515371022442826, "gold_bleu_score": 0.5459974256621847}
{"index": 400, "beams": [{"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID", "score": -0.015799226239323616, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Teacher_ID = course.Course_ID", "score": -0.7310025691986084, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -1.6793721914291382, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON teacher.Teacher_ID = course.Course_ID", "score": -2.681798219680786, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course.Course_ID", "score": -2.9252803325653076, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.0624279975891113, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.1631953716278076, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.1812634468078613, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.273146390914917, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.427861213684082, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID", "score": -3.4354729652404785, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Teacher_ID = course.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID", "score": -3.450131893157959, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.479905843734741, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.70819354057312, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID", "score": -3.937654495239258, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}, {"orig_question": "What is the name of each teacher and what course they teach?", "inferred_code": "SELECT * FROM course", "score": -3.9979777336120605, "correct_code": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5687067574001052, "gold_bleu_score": 0.38342517027064166}
{"index": 403, "beams": [{"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -0.0018155109137296677, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -1.2224164009094238, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = \"math\"", "score": -1.372299075126648, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -1.4352015256881714, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -1.8879200220108032, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -2.1540284156799316, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -2.339891195297241, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = \"math\"", "score": -2.684269905090332, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -2.7234437465667725, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -2.7793073654174805, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -2.79221510887146, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -2.8013882637023926, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\" AND teacher.Name = \"math\"", "score": -3.082667827606201, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -3.21030330657959, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Course_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -3.4147226810455322, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "Show the name of the teacher for the math course.", "inferred_code": "SELECT * FROM course", "score": -3.9175994396209717, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.37738498624974914, "gold_bleu_score": 0.39767270259873133}
{"index": 404, "beams": [{"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -1.4008980989456177, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = \"math\"", "score": -2.1750102043151855, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -2.3199362754821777, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -2.41133713722229, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -2.6289494037628174, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Teacher_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -2.830667018890381, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -2.8916192054748535, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT * FROM course", "score": -2.9359405040740967, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Teacher_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = \"math\"", "score": -2.9783480167388916, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = \"math\"", "score": -3.606086254119873, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT * FROM course", "score": -3.752666473388672, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course.Course_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -3.783111095428467, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM course JOIN course_arrange ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = \"math\"", "score": -3.7860050201416016, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Teacher_ID = course.Course_ID WHERE course.Course = \"math\"", "score": -4.016861438751221, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT * FROM course", "score": -4.019565582275391, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}, {"orig_question": "What are the names of the people who teach math courses?", "inferred_code": "SELECT * FROM course", "score": -4.050406455993652, "correct_code": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""}], "db_name": "course_teach", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4953703153330158, "gold_bleu_score": 0.5599920805589713}
{"index": 411, "beams": [{"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30", "score": -3.195123383648024e-07, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Age < 30", "score": -4.217281818389893, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30 OR visitor.Age < 30", "score": -4.378827095031738, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30 AND visitor.Age < 30", "score": -4.6549906730651855, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM museum", "score": -5.331331729888916, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30 GROUP BY visitor.Age", "score": -5.464604377746582, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30 GROUP BY \"there\"", "score": -5.56622314453125, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM museum", "score": -5.636361122131348, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 300", "score": -5.747167110443115, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age <= 30", "score": -5.774919509887695, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM visitor WHERE visitor.Age < 30", "score": -5.885408878326416, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age > 30", "score": -5.888593673706055, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30 ORDER BY visitor.Age", "score": -5.941075801849365, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM museum", "score": -5.953990459442139, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT * FROM museum", "score": -6.656009197235107, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}, {"orig_question": "How many visitors below age 30 are there?", "inferred_code": "SELECT visitor.ID FROM visitor WHERE visitor.Age < 30", "score": -7.220253944396973, "correct_code": "SELECT count(*) FROM visitor WHERE age  <  30"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7702387382255389, "gold_bleu_score": 0.5783670524688501}
{"index": 413, "beams": [{"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership != 4", "score": -0.00040546662057749927, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership NOT IN (SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership > 4)", "score": -1.7981772422790527, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership NOT IN (SELECT visitor.ID FROM visitor WHERE visitor.Level_of_membership > 4)", "score": -1.9895128011703491, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -2.3448078632354736, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership <= 4", "score": -2.485114574432373, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -2.60807204246521, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -2.6797235012054443, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -2.7370002269744873, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -2.7646262645721436, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership HAVING AVG(visitor.Level_of_membership) > 4", "score": -2.829089403152466, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership < 4", "score": -2.8538975715637207, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership = 4", "score": -3.1532976627349854, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -3.3470544815063477, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -3.494676351547241, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT * FROM museum", "score": -3.5189926624298096, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}, {"orig_question": "What is the average age of the visitors whose membership level is not higher than 4?", "inferred_code": "SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership LIKE \"4 %\"", "score": -3.6051735877990723, "correct_code": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7368182983292546, "gold_bleu_score": 0.6726772983654355}
{"index": 415, "beams": [{"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum ORDER BY museum.Num_of_Staff DESC LIMIT 1", "score": -1.0184469374507898e-06, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum WHERE museum.Num_of_Staff = (SELECT MAX(museum.Num_of_Staff) FROM museum) ORDER BY museum.Num_of_Staff DESC LIMIT 1", "score": -2.5499038696289062, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT * FROM museum", "score": -3.0151002407073975, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY SUM(museum.Num_of_Staff) DESC LIMIT 1", "score": -3.216080904006958, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN museum ON museum.Museum_ID = museum.Museum_ID GROUP BY museum.Museum_ID ORDER BY SUM(museum.Num_of_Staff) DESC LIMIT 1", "score": -3.395698308944702, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.visitor_ID GROUP BY museum.Museum_ID ORDER BY SUM(museum.Num_of_Staff) DESC LIMIT 1", "score": -3.410851001739502, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT * FROM museum", "score": -3.4942359924316406, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum WHERE museum.Num_of_Staff = (SELECT SUM(museum.Num_of_Staff) FROM museum) ORDER BY museum.Num_of_Staff DESC LIMIT 1", "score": -3.5312578678131104, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT * FROM museum", "score": -3.6396172046661377, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.877742290496826, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum GROUP BY museum.Museum_ID ORDER BY SUM(museum.Num_of_Staff) DESC LIMIT 1", "score": -3.920821189880371, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN museum ON museum.Museum_ID = museum.Museum_ID GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.97683048248291, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.visitor_ID GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.066162109375, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.5839433670043945, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT * FROM museum", "score": -4.732035160064697, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}, {"orig_question": "Find the id and name of the museum that has the most staff members?", "inferred_code": "SELECT museum.Museum_ID, museum.Name FROM museum WHERE museum.Num_of_Staff = (SELECT MAX(museum.Num_of_Staff) FROM museum)", "score": -5.26254415512085, "correct_code": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7553856551213984, "gold_bleu_score": 0.4986668818749023}
{"index": 416, "beams": [{"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -1.1582333172555082e-06, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009 INTERSECT SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -2.7747037410736084, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009 EXCEPT SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -3.0465657711029053, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -3.566206455230713, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT {'avg': 'museum.Num_of_Staff'} IN (museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -3.656050682067871, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -3.671281337738037, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum JOIN museum ON museum.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009", "score": -3.7554492950439453, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -3.7837748527526855, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -3.8970658779144287, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) != AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -3.954010486602783, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009 ORDER BY AVG(museum.Num_of_Staff)", "score": -4.151488304138184, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -4.183923721313477, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009", "score": -4.379817962646484, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year < 2009 AND museum.Open_Year < 2009", "score": -4.418452262878418, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT * FROM museum", "score": -4.509690284729004, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}, {"orig_question": "Find the average number of staff working for the museums that were open before 2009.", "inferred_code": "SELECT AVG(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year LIKE \"2009 %\"", "score": -4.870966911315918, "correct_code": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8921217352436537, "gold_bleu_score": 0.61140481564317}
{"index": 417, "beams": [{"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = \"Plaza museum\"", "score": -8.884187252533593e-08, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum JOIN visit ON museum.Museum_ID = visit.visitor_ID WHERE museum.Name = \"Plaza museum\"", "score": -3.559492588043213, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -3.5747032165527344, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = \"Plaza museum\" AND museum.Num_of_Staff = \"Plaza museum\"", "score": -3.867229700088501, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE museum.Name = \"Plaza museum\"", "score": -4.037544250488281, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = \"Plaza museum\" OR museum.Num_of_Staff = \"Plaza museum\"", "score": -4.3103251457214355, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -4.322176456451416, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -4.401712894439697, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -4.496315002441406, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -4.612041473388672, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -5.373311996459961, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = \"Plaza museum\" ORDER BY museum.Num_of_Staff", "score": -5.505556583404541, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -5.815326690673828, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -5.838648319244385, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -6.044546604156494, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}, {"orig_question": "What are the opening year and staff number of the museum named Plaza Museum?", "inferred_code": "SELECT * FROM museum", "score": -6.292461395263672, "correct_code": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8387602956763776, "gold_bleu_score": 0.6970389768981847}
{"index": 423, "beams": [{"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -9.318374213762581e-05, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY SUM(visit.Num_of_Ticket) DESC LIMIT 1", "score": -1.521596908569336, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY COUNT(*) LIMIT 1", "score": -2.778855323791504, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.8697376251220703, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY AVG(visit.Num_of_Ticket) DESC LIMIT 1", "score": -2.8938121795654297, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) = 1 ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.908729314804077, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) = 1 ORDER BY visit.Num_of_Ticket DESC LIMIT 1", "score": -3.2058610916137695, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID, visitor.Age ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.296790599822998, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1", "score": -3.3373992443084717, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT * FROM museum", "score": -3.3723366260528564, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT * FROM museum", "score": -3.4394991397857666, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT * FROM museum", "score": -3.521087408065796, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY (visit.Num_of_Ticket - visit.visitor_ID) DESC LIMIT 1", "score": -3.5486772060394287, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY T(visit.Num_of_Ticket) DESC LIMIT 1", "score": -3.5594186782836914, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT * FROM museum", "score": -3.605755090713501, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}, {"orig_question": "Find the name and age of the visitor who bought the most tickets at once.", "inferred_code": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY SUM(visitor.Age) DESC LIMIT 1", "score": -3.6849114894866943, "correct_code": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6419912495388633, "gold_bleu_score": 0.4731137919652517}
{"index": 424, "beams": [{"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit", "score": -7.522513101321238e-08, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit JOIN visit ON visit.visitor_ID = visit.Museum_ID", "score": -4.470753192901611, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT * FROM museum", "score": -4.7780351638793945, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit GROUP BY visit.visitor_ID", "score": -4.820601463317871, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit GROUP BY \"number\"", "score": -4.9388957023620605, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket), \"maximum\" FROM visit GROUP BY visit.visitor_ID", "score": -4.947698593139648, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket), \"number\" FROM visit GROUP BY visit.visitor_ID", "score": -5.096343040466309, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit GROUP BY \"of\"", "score": -5.143019199371338, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT * FROM museum", "score": -5.149491786956787, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT * FROM museum", "score": -5.180906772613525, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT * FROM museum", "score": -5.275179386138916, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit GROUP BY \"tickets\"", "score": -5.290623664855957, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket), \"of\" FROM visit GROUP BY visit.visitor_ID", "score": -5.3862624168396, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit WHERE \"of\"", "score": -5.3874335289001465, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit WHERE \"tickets\"", "score": -5.428023338317871, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}, {"orig_question": "What are the average and maximum number of tickets bought in all visits?", "inferred_code": "SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit GROUP BY \"maximum\"", "score": -5.504479885101318, "correct_code": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8832114413058323, "gold_bleu_score": 0.7561225808727557}
{"index": 425, "beams": [{"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT SUM(visit.Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -0.002241956302896142, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT SUM(visit.Num_of_Ticket) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -1.146752953529358, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -3.1283645629882812, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT 0 FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -3.6171677112579346, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT COUNT(*) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -3.657992362976074, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -3.725987195968628, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT \"select sum (visit.Total_spent)\" FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -3.7403786182403564, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT SUM(visit.Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1 ORDER BY SUM(visit.Total_spent)", "score": -3.818700075149536, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -3.9893877506256104, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -3.996419906616211, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT MAX(visit.Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -4.047535419464111, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -4.116668701171875, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT T(visit.Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -4.136087894439697, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -4.23842716217041, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT SUM(visit.Total_spent) AS visit.Total_spent FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1", "score": -4.271695613861084, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}, {"orig_question": "What is the total ticket expense of the visitors whose membership level is 1?", "inferred_code": "SELECT * FROM museum", "score": -4.366159915924072, "correct_code": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"}], "db_name": "museum_visit", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.724130982593324, "gold_bleu_score": 0.5792621656217316}
{"index": 429, "beams": [{"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) FROM players", "score": 0.0, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) FROM players ORDER BY COUNT(*)", "score": -6.526063919067383, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -6.7292609214782715, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -7.313613414764404, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -7.51346492767334, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -7.529902458190918, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) FROM players ORDER BY 0.1", "score": -7.5369696617126465, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -7.636478900909424, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) = 0.1 FROM players", "score": -7.674692153930664, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -7.986356258392334, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) FROM players ORDER BY \"Find\"", "score": -8.051836967468262, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM players", "score": -8.218465805053711, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -8.270736694335938, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -8.29729175567627, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT * FROM players", "score": -8.50881576538086, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "Find the total number of players.", "inferred_code": "SELECT COUNT(*) AS players.player_id FROM players", "score": -8.806747436523438, "correct_code": "SELECT count(*) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9057920405076808, "gold_bleu_score": 0.3353661883657586}
{"index": 430, "beams": [{"orig_question": "How many players are there?", "inferred_code": "SELECT COUNT(*) FROM players", "score": 0.0, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -6.032381534576416, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -7.588901519775391, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -7.624960422515869, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT COUNT(*) FROM players WHERE \"How\"", "score": -7.683290004730225, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -7.78430700302124, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM players", "score": -7.829505920410156, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT COUNT(*) FROM players WHERE \"many\"", "score": -7.874233245849609, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -7.922046661376953, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -7.948263645172119, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT COUNT(*) FROM players ORDER BY \"How\"", "score": -8.061749458312988, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -8.072395324707031, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT COUNT(*) AS players.player_id FROM players", "score": -8.324527740478516, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -8.394927024841309, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -8.452926635742188, "correct_code": "SELECT count(*) FROM players"}, {"orig_question": "How many players are there?", "inferred_code": "SELECT * FROM players", "score": -8.789875030517578, "correct_code": "SELECT count(*) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 431, "beams": [{"orig_question": "Find the total number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches", "score": 0.0, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches UNION SELECT COUNT(*) FROM matches", "score": -5.57011079788208, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -6.551244258880615, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.215958595275879, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.251313209533691, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.3423309326171875, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.468595504760742, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.66179084777832, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches ORDER BY matches.match_num", "score": -7.727323055267334, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches GROUP BY matches.match_num", "score": -7.9361572265625, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT COUNT(*) AS matches.match_num FROM matches", "score": -8.334790229797363, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.462506294250488, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.729721069335938, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.777421951293945, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.803176879882812, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Find the total number of matches.", "inferred_code": "SELECT T(*) FROM matches", "score": -9.026453018188477, "correct_code": "SELECT count(*) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7533525596320494, "gold_bleu_score": 0.270027789193344}
{"index": 432, "beams": [{"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches", "score": 0.0, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches UNION SELECT COUNT(*) FROM matches", "score": -5.380486488342285, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -5.956943035125732, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -6.606820583343506, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches WHERE COUNT(*)", "score": -6.620959281921387, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.5873284339904785, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.596375465393066, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -7.641143321990967, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches ORDER BY matches.match_num", "score": -7.687178611755371, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) = 0.1 FROM matches", "score": -7.842813491821289, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) FROM matches WHERE \"the\"", "score": -8.08151626586914, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT COUNT(*) AS matches.match_num FROM matches", "score": -8.326436996459961, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.482961654663086, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT T(*) FROM matches", "score": -8.623345375061035, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.663126945495605, "correct_code": "SELECT count(*) FROM matches"}, {"orig_question": "Count the number of matches.", "inferred_code": "SELECT * FROM players", "score": -8.796765327453613, "correct_code": "SELECT count(*) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.719777837443456, "gold_bleu_score": 0.3109000803147345}
{"index": 433, "beams": [{"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\"", "score": -7.522511680235766e-08, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" EXCEPT SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\"", "score": -3.7536802291870117, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" OR players.country_code = \"USA\"", "score": -4.419596195220947, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" AND players.birth_date = \"USA\"", "score": -4.8738298416137695, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -4.891611576080322, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -5.452997207641602, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -5.720676422119141, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -5.790876865386963, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" GROUP BY players.first_name", "score": -5.837430953979492, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"code USA\"", "score": -5.86407470703125, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" ORDER BY players.birth_date", "score": -5.9733476638793945, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -6.1301751136779785, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT \"players.first_name.players.birth_date\" FROM players WHERE players.country_code = \"USA\"", "score": -6.418234825134277, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT players.first_name, players.birth_date FROM players GROUP BY players.country_code = \"USA\"", "score": -6.4673285484313965, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -6.469427585601807, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "List the first name and birth date of all players from the country with code USA.", "inferred_code": "SELECT * FROM players", "score": -6.539666652679443, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.918158010049041, "gold_bleu_score": 0.6873686311587084}
{"index": 434, "beams": [{"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\"", "score": -3.761256550660619e-08, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" EXCEPT SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\"", "score": -3.8337619304656982, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players JOIN players ON players.player_id = players.player_id WHERE players.country_code = \"USA\"", "score": -4.591737747192383, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" OR players.country_code = \"USA\"", "score": -4.654590606689453, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -4.818278789520264, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" AND players.birth_date = \"USA\"", "score": -4.892635345458984, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -5.7400007247924805, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" GROUP BY players.first_name", "score": -5.847477436065674, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -5.894350051879883, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = \"USA\" ORDER BY players.birth_date", "score": -6.006587505340576, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players WHERE players.country_code != \"USA\"", "score": -6.140460968017578, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -6.311742305755615, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -6.40594482421875, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT \"players.first_name.players.birth_date\" FROM players WHERE players.country_code = \"USA\"", "score": -6.409019470214844, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT players.first_name, players.birth_date FROM players GROUP BY players.country_code = \"USA\"", "score": -6.687282562255859, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}, {"orig_question": "What are the first names and birth dates of players from the USA?", "inferred_code": "SELECT * FROM players", "score": -6.761501312255859, "correct_code": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7818782390331123, "gold_bleu_score": 0.7264882752790076}
{"index": 435, "beams": [{"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_id FROM matches", "score": -0.028523704037070274, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_name FROM matches", "score": -1.1668338775634766, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), MIN(matches.loser_age) FROM matches", "score": -1.4642729759216309, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -1.6827831268310547, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches", "score": -1.932496428489685, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches JOIN matches ON matches.loser_id = matches.winner_id", "score": -1.9884518384933472, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -2.2001564502716064, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_ht FROM matches", "score": -2.337517261505127, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_ht) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -2.4520792961120605, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches JOIN matches ON matches.loser_id = matches.winner_id", "score": -2.455636739730835, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches INTERSECT SELECT AVG(matches.loser_age) FROM matches", "score": -2.592773199081421, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_ht) FROM matches JOIN matches ON matches.loser_id = matches.winner_id", "score": -2.6298000812530518, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_id) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -2.6539204120635986, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), 10 FROM matches", "score": -2.8224122524261475, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches", "score": -2.9393835067749023, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "Find the average age of losers and winners of all matches.", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_ioc FROM matches", "score": -2.963144302368164, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7393126775929697, "gold_bleu_score": 0.5853130234189619}
{"index": 436, "beams": [{"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_id FROM matches", "score": -0.01356003899127245, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), MIN(matches.loser_age) FROM matches", "score": -1.4911739826202393, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches", "score": -1.5846900939941406, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_name FROM matches", "score": -1.6517843008041382, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches INTERSECT SELECT AVG(matches.loser_age) FROM matches", "score": -1.7930184602737427, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -2.0645532608032227, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -2.3746018409729004, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches", "score": -2.3912198543548584, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), 10 FROM matches", "score": -2.5566937923431396, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), MAX(matches.loser_age) FROM matches", "score": -2.8431832790374756, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches INTERSECT SELECT AVG(matches.loser_age) FROM matches JOIN matches ON matches.winner_id = matches.winner_id", "score": -2.8451733589172363, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), matches.winner_ht FROM matches", "score": -2.937516212463379, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), matches.loser_id FROM matches", "score": -3.136298418045044, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), \"What\" FROM matches", "score": -3.1786539554595947, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age), AVG(matches.winner_id) FROM matches JOIN matches ON matches.loser_id = matches.loser_id", "score": -3.188312530517578, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}, {"orig_question": "What are the average ages of losers and winners across matches?", "inferred_code": "SELECT AVG(matches.loser_age) FROM matches", "score": -3.5350427627563477, "correct_code": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7538563721435836, "gold_bleu_score": 0.6945288441223726}
{"index": 437, "beams": [{"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches", "score": -0.008311058394610882, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.009914875030518, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.224222183227539, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches EXCEPT SELECT AVG(matches.winner_rank) FROM matches", "score": -5.852261066436768, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches INTERSECT SELECT AVG(matches.winner_rank) FROM matches", "score": -6.0562896728515625, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT * FROM players", "score": -6.181995391845703, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT * FROM players", "score": -6.470172882080078, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches ORDER BY AVG(matches.winner_rank)", "score": -7.396745204925537, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches EXCEPT SELECT AVG(rankings.ranking) FROM rankings", "score": -7.546383857727051, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches INTERSECT SELECT AVG(rankings.ranking) FROM rankings", "score": -7.768543243408203, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches EXCEPT SELECT AVG(matches.best_of) FROM matches", "score": -8.057653427124023, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(rankings.ranking) FROM rankings", "score": -8.27265453338623, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank_points) FROM matches", "score": -8.31259822845459, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches ORDER BY matches.winner_rank", "score": -8.567848205566406, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT * FROM players", "score": -8.623895645141602, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "Find the average rank of winners in all matches.", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches LIMIT 1", "score": -8.943596839904785, "correct_code": "SELECT avg(winner_rank) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8531355983960773, "gold_bleu_score": 0.722474497368875}
{"index": 438, "beams": [{"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches", "score": -0.030084215104579926, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -4.71503210067749, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(rankings.ranking) FROM rankings", "score": -5.3797287940979, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -5.538949012756348, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -5.825178623199463, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches EXCEPT SELECT AVG(matches.winner_rank) FROM matches", "score": -5.9526824951171875, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches INTERSECT SELECT AVG(matches.winner_rank) FROM matches", "score": -6.129433631896973, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -6.165465354919434, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -6.4776811599731445, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches EXCEPT SELECT AVG(rankings.ranking) FROM rankings", "score": -6.787069320678711, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches INTERSECT SELECT AVG(rankings.ranking) FROM rankings", "score": -7.067634582519531, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches INTERSECT SELECT AVG(matches.best_of) FROM matches", "score": -7.802530765533447, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank_points) FROM matches", "score": -8.450089454650879, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT AVG(matches.winner_rank) FROM matches ORDER BY matches.winner_rank", "score": -8.53550910949707, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -8.55433177947998, "correct_code": "SELECT avg(winner_rank) FROM matches"}, {"orig_question": "What is the average rank for winners in all matches?", "inferred_code": "SELECT * FROM players", "score": -8.580643653869629, "correct_code": "SELECT avg(winner_rank) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8581870376324523, "gold_bleu_score": 0.7462303029843451}
{"index": 439, "beams": [{"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MIN(matches.loser_rank) FROM matches", "score": -0.0015941443853080273, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT DISTINCT matches.loser_rank FROM matches", "score": -3.032322406768799, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MAX(matches.loser_rank) FROM matches", "score": -3.757878303527832, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MIN(matches.loser_rank_points) FROM matches", "score": -4.027377128601074, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -5.3655009269714355, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -5.466602802276611, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -6.425460338592529, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -7.322075843811035, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -7.430385112762451, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT * FROM players", "score": -7.448658466339111, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MIN(matches.loser_rank) AS matches.loser_rank FROM matches", "score": -7.528111457824707, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MIN(matches.match_num) FROM matches", "score": -7.540670871734619, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT 3 AS select matches.loser_rank FROM matches", "score": -7.858249187469482, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MAX(matches.loser_rank_points) FROM matches", "score": -7.871450901031494, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT MIN(matches.loser_rank) AS matches.loser_rank_points FROM matches", "score": -7.875029563903809, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "Find the highest rank of losers in all matches.", "inferred_code": "SELECT DISTINCT matches.loser_rank_points FROM matches", "score": -8.532610893249512, "correct_code": "SELECT min(loser_rank) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3201403217683251, "gold_bleu_score": 0.3606531832279523}
{"index": 440, "beams": [{"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MAX(matches.loser_rank) FROM matches", "score": -0.0011553193908184767, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MAX(matches.best_of) FROM matches", "score": -3.0220744609832764, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT DISTINCT matches.loser_rank FROM matches", "score": -3.4464941024780273, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.best_of = (SELECT MAX(matches.best_of) FROM matches)", "score": -3.87487530708313, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.loser_rank = (SELECT MAX(matches.best_of) FROM matches)", "score": -3.933400869369507, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.match_num = (SELECT MAX(matches.best_of) FROM matches)", "score": -4.588035583496094, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.best_of = (SELECT MAX(matches.loser_rank) FROM matches)", "score": -4.640092372894287, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.loser_rank = (SELECT MAX(matches.loser_rank) FROM matches)", "score": -5.1022138595581055, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MAX(matches.loser_rank_points) FROM matches", "score": -5.437190055847168, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.loser_rank FROM matches WHERE matches.match_num = (SELECT MAX(matches.loser_rank) FROM matches)", "score": -5.6467390060424805, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MIN(matches.loser_rank) FROM matches", "score": -6.264115810394287, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT * FROM players", "score": -6.340183258056641, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT matches.best_of FROM matches WHERE matches.loser_rank = (SELECT MAX(matches.best_of) FROM matches)", "score": -6.970818996429443, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MAX(matches.loser_rank) AS matches.loser_rank FROM matches", "score": -7.222070217132568, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT MAX(matches.loser_rank) AS matches.best_of FROM matches", "score": -7.245870590209961, "correct_code": "SELECT min(loser_rank) FROM matches"}, {"orig_question": "What is the best rank of losers across all matches?", "inferred_code": "SELECT * FROM players", "score": -7.289498805999756, "correct_code": "SELECT min(loser_rank) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.36672339576746193, "gold_bleu_score": 0.4144681324951756}
{"index": 441, "beams": [{"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players", "score": -4.897050942531678e-08, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players ORDER BY COUNT(DISTINCT players.country_code)", "score": -5.188727378845215, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players WHERE players.country_code = \"VALUE\"", "score": -5.834914207458496, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code), COUNT(DISTINCT players.player_id) FROM players", "score": -6.117513656616211, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players", "score": -6.2487406730651855, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -6.3967180252075195, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT players.country_code) FROM players", "score": -6.577776908874512, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -6.7474493980407715, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -6.765352249145508, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players WHERE players.country_code", "score": -6.795175552368164, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -7.3178205490112305, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT COUNT(DISTINCT players.country_code), COUNT(DISTINCT players.birth_date) FROM players", "score": -7.416589260101318, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -7.81234884262085, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT * FROM players", "score": -7.946702480316162, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT T(DISTINCT players.country_code) FROM players", "score": -8.523991584777832, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "find the number of distinct country codes of all players.", "inferred_code": "SELECT DISTINCT players.country_code FROM players", "score": -8.74692440032959, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9685082035998779, "gold_bleu_score": 0.657480108087054}
{"index": 442, "beams": [{"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players", "score": -4.897050942531678e-08, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -4.47725772857666, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players ORDER BY COUNT(DISTINCT players.country_code)", "score": -4.664401531219482, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -5.428523540496826, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code), COUNT(DISTINCT players.player_id) FROM players", "score": -6.1475958824157715, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -6.551543235778809, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players WHERE players.country_code", "score": -6.711733341217041, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -6.8030595779418945, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code) FROM players", "score": -6.808286190032959, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -6.974941730499268, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -7.204279899597168, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT COUNT(DISTINCT players.country_code), COUNT(DISTINCT players.birth_date) FROM players", "score": -7.213788986206055, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT players.country_code) FROM players", "score": -7.809765815734863, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -7.939586639404297, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -8.132295608520508, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}, {"orig_question": "How many distinct countries do players come from?", "inferred_code": "SELECT * FROM players", "score": -8.169025421142578, "correct_code": "SELECT count(DISTINCT country_code) FROM players"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5119129342714048, "gold_bleu_score": 0.6627584440988362}
{"index": 443, "beams": [{"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -0.00014150013157632202, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches EXCEPT SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -5.498356819152832, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches INTERSECT SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -5.578385829925537, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches UNION SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -5.579174518585205, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches ORDER BY COUNT(DISTINCT matches.loser_name)", "score": -5.880107879638672, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.08835506439209, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT * FROM players", "score": -6.099878311157227, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT * FROM players", "score": -6.334123611450195, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT * FROM players", "score": -6.66978645324707, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.698626518249512, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) = COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.994396686553955, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name), COUNT(DISTINCT matches.loser_ht) FROM matches", "score": -7.686171054840088, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name), COUNT(DISTINCT matches.loser_id) FROM matches", "score": -7.7949700355529785, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT * FROM players", "score": -7.927641868591309, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_id) FROM matches", "score": -8.175521850585938, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "Find the number of distinct name of losers.", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) AS matches.loser_id FROM matches", "score": -8.535625457763672, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5746844990159964, "gold_bleu_score": 0.4677579365941767}
{"index": 444, "beams": [{"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -0.00023451323795598, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches UNION SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -4.983303070068359, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches EXCEPT SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -5.291295528411865, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -5.349950790405273, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -5.3708014488220215, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches ORDER BY COUNT(DISTINCT matches.loser_name)", "score": -5.474293231964111, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches INTERSECT SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -5.594717502593994, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -5.824100017547607, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -5.873095989227295, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -5.910158157348633, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) = COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.3571600914001465, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -6.614719867706299, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.635045051574707, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -6.686099052429199, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT COUNT(DISTINCT matches.loser_name) > COUNT(DISTINCT matches.loser_name) FROM matches", "score": -6.689166069030762, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}, {"orig_question": "How many different loser names are there?", "inferred_code": "SELECT * FROM players", "score": -7.107677459716797, "correct_code": "SELECT count(DISTINCT loser_name) FROM matches"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4931181899198347, "gold_bleu_score": 0.6617326332797531}
{"index": 453, "beams": [{"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1", "score": -1.1182947901033913e-06, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1", "score": -4.554646968841553, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(players.birth_date) FROM players)", "score": -4.597031593322754, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -4.779394626617432, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1", "score": -4.786653995513916, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -5.142120838165283, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT \"oldest\"", "score": -5.424498081207275, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(players.birth_date) FROM players) ORDER BY players.birth_date DESC LIMIT 1", "score": -5.4718241691589355, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -5.506699085235596, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -5.707754135131836, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -6.050886631011963, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -6.1725335121154785, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT \"player\"", "score": -6.24802303314209, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1", "score": -6.344261646270752, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC", "score": -6.475038528442383, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "Find the first name and country code of the oldest player.", "inferred_code": "SELECT * FROM players", "score": -6.62608528137207, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4666446912142511, "gold_bleu_score": 0.5250892646238967}
{"index": 454, "beams": [{"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1", "score": -2.0169272829662077e-06, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1", "score": -4.328415870666504, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(players.birth_date) FROM players)", "score": -4.516436576843262, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -4.530547618865967, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1", "score": -4.767474174499512, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -5.089659690856934, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -5.34856653213501, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(players.birth_date) FROM players) ORDER BY players.birth_date DESC LIMIT 1", "score": -5.4367523193359375, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT \"oldest\"", "score": -5.4846601486206055, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -5.5629496574401855, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY (players.birth_date - players.birth_date) DESC LIMIT 1", "score": -5.904675483703613, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -5.95056676864624, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT \"player\"", "score": -6.250087738037109, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT * FROM players", "score": -6.295407772064209, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1", "score": -6.480834007263184, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}, {"orig_question": "What is the first name and country code of the oldest player?", "inferred_code": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC", "score": -6.488691329956055, "correct_code": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.38660162398929365, "gold_bleu_score": 0.5682207097182331}
{"index": 459, "beams": [{"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.022461963817477226, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.5545670986175537, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.tours ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.6256517767906189, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.2213501930236816, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"Find\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.4003599882125854, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"the\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.5801630020141602, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -1.7118287086486816, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"first\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.72370445728302, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -1.9119646549224854, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"name\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.912276029586792, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -1.9156341552734375, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -1.9257811307907104, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -1.9929583072662354, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"most\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.1204166412353516, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT * FROM players", "score": -2.1381335258483887, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "Find the first name and country code of the player who did the most number of tours.", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"who\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.2256321907043457, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5221028338245264, "gold_bleu_score": 0.49719955795001225}
{"index": 460, "beams": [{"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.14806441962718964, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.15287092328071594, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"What\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.7413519620895386, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -0.786909282207489, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.9090185761451721, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.tours ORDER BY COUNT(*) DESC LIMIT 1", "score": -0.9922805428504944, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.0109305381774902, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"the\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.0282090902328491, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.0485783815383911, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.0631906986236572, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.0747159719467163, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"first\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.2075037956237793, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.2171664237976074, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"players\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.22636079788208, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"name\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -1.2761346101760864, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}, {"orig_question": "What is the first name and country code of the player with the most tours?", "inferred_code": "SELECT * FROM players", "score": -1.4667083024978638, "correct_code": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6022543403153953, "gold_bleu_score": 0.5531708186917367}
{"index": 465, "beams": [{"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -1.784520149230957, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -1.9018880128860474, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -1.9848434925079346, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT matches.winner_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = players.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -2.09076189994812, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.1756832599639893, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.216327428817749, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.2331438064575195, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.4074177742004395, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.476653575897217, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.6027603149414062, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT matches.winner_name, matches.winner_rank FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = players.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -2.663698434829712, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.7993674278259277, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.8088414669036865, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.8359291553497314, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -2.9969286918640137, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "inferred_code": "SELECT * FROM players", "score": -3.0213091373443604, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.44970482923429045, "gold_bleu_score": 0.563051728159448}
{"index": 466, "beams": [{"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -0.35440608859062195, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -0.8457649350166321, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -0.899176836013794, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN matches ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -0.9075359106063843, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = players.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -0.9830181002616882, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.1492544412612915, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN matches ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.1540322303771973, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.1547482013702393, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN matches ON matches.loser_id = matches.winner_age WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.1584653854370117, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN matches ON matches.match_num = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.164533019065857, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN rankings ON matches.match_num = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.3267090320587158, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -1.3893401622772217, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id JOIN matches ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -1.435315728187561, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.4723588228225708, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT * FROM players", "score": -1.5048701763153076, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "inferred_code": "SELECT matches.winner_name FROM rankings JOIN matches ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = \"Australian Open\" ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -1.5428789854049683, "correct_code": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5158944560903704, "gold_bleu_score": 0.6318911739975043}
{"index": 467, "beams": [{"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM matches ORDER BY matches.minutes DESC LIMIT 1", "score": -0.025648275390267372, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.minutes DESC LIMIT 1", "score": -0.6380133628845215, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -2.0341691970825195, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM matches JOIN matches ON matches.winner_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -2.127661943435669, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -2.4322400093078613, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_name FROM players JOIN matches ON matches.loser_id = players.player_id ORDER BY matches.minutes DESC LIMIT 1", "score": -3.00885009765625, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.0172832012176514, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.1316280364990234, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_id FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.minutes DESC LIMIT 1", "score": -3.2549991607666016, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.309281587600708, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.385402202606201, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.556303024291992, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.6301016807556152, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -3.70776629447937, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT matches.loser_name, matches.winner_id FROM matches ORDER BY matches.minutes DESC LIMIT 1", "score": -4.188321590423584, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "find the names of loser and winner who played in the match with greatest number of minutes.", "inferred_code": "SELECT * FROM players", "score": -4.398290634155273, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6487700697151433, "gold_bleu_score": 0.5013103590416892}
{"index": 468, "beams": [{"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -0.10727861523628235, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.minutes DESC LIMIT 1", "score": -0.4056035280227661, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.minutes DESC LIMIT 1", "score": -0.7150115370750427, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT * FROM players", "score": -1.3818567991256714, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.match_num DESC LIMIT 1", "score": -1.8472415208816528, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT * FROM players", "score": -2.0732979774475098, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.match_num DESC LIMIT 1", "score": -2.464205741882324, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_id FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -2.59319806098938, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT * FROM players", "score": -2.798586845397949, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.match_num DESC LIMIT 1", "score": -2.8361430168151855, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_ht ORDER BY matches.minutes DESC LIMIT 1", "score": -3.135087728500366, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT * FROM players", "score": -3.1769049167633057, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_ioc FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -3.240161657333374, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM matches JOIN matches ON matches.winner_id = matches.winner_id ORDER BY matches.minutes DESC LIMIT 1", "score": -3.356102228164673, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.minutes LIMIT 1", "score": -3.3704044818878174, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}, {"orig_question": "What are the names of the winner and loser who played in the longest match?", "inferred_code": "SELECT * FROM players", "score": -3.4690628051757812, "correct_code": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4627009402676405, "gold_bleu_score": 0.6028288446880967}
{"index": 485, "beams": [{"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\" INTERSECT SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = \"VALUE\"", "score": -0.08921888470649719, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.16890621185302734, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.28897956013679504, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.31338706612586975, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\" INTERSECT SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"VALUE\"", "score": -0.3555121123790741, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.37446627020835876, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.39513835310935974, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\" INTERSECT SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.loser_hand = \"VALUE\"", "score": -0.40960419178009033, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.44354361295700073, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.46777409315109253, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\" INTERSECT SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\"", "score": -0.49804672598838806, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.5246107578277588, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.5275915265083313, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \"WTA Championships\" INTERSECT SELECT COUNT(DISTINCT matches.winner_id) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = \"WTA Championships\"", "score": -0.5463877320289612, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.5774343013763428, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "How many different winners both participated in the WTA Championships and were left handed?", "inferred_code": "SELECT * FROM players", "score": -0.5879262089729309, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4938738281580274, "gold_bleu_score": 0.4561042349124567}
{"index": 486, "beams": [{"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_hand = \"WTA Championships\"", "score": -0.1672351360321045, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND players.hand = \"WTA Championships\"", "score": -0.19285255670547485, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT * FROM players", "score": -0.35537099838256836, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_rank = \"WTA Championships\"", "score": -0.42681699991226196, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_rank = (SELECT COUNT(*) FROM players WHERE players.hand = \"WTA Championships\")", "score": -0.4307346045970917, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_rank_points = \"WTA Championships\"", "score": -0.4786539077758789, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = \"left\" AND matches.winner_hand = \"WTA Championships\"", "score": -0.5118107795715332, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_ht = \"WTA Championships\"", "score": -0.5182080864906311, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_rank = 0 AND matches.tourney_name = \"WTA Championships\"", "score": -0.5190024971961975, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.tourney_name = \"WTA Championships\"", "score": -0.5269076228141785, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON players.player_id = matches.winner_ht WHERE players.hand = \"left\" AND matches.winner_hand = \"WTA Championships\"", "score": -0.5714858770370483, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = \"left\" AND players.hand = \"WTA Championships\"", "score": -0.5912702083587646, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON players.player_id = matches.winner_ht WHERE players.hand = \"left\" AND players.hand = \"WTA Championships\"", "score": -0.6032495498657227, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = \"left\" AND matches.winner_rank = 0 AND players.hand = \"WTA Championships\"", "score": -0.609868049621582, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = \"left\" AND matches.winner_rank = \"WTA Championships\"", "score": -0.6844863295555115, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}, {"orig_question": "Find the number of left handed winners who participated in the WTA Championships.", "inferred_code": "SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = \"left\" AND matches.winner_ht = \"WTA Championships\"", "score": -0.7111430764198303, "correct_code": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3357337981091396, "gold_bleu_score": 0.36821016274171314}
{"index": 487, "beams": [{"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -1.6076297760009766, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = rankings.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -3.2545595169067383, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id UNION SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id", "score": -3.528465747833252, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id EXCEPT SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id", "score": -3.5288236141204834, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -3.595055341720581, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -3.741321086883545, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -3.88420033454895, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id", "score": -4.159117221832275, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.175589084625244, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.382413864135742, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -4.4079766273498535, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.495941162109375, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.6112895011901855, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY SUM(rankings.ranking_points) DESC LIMIT 1", "score": -4.820725917816162, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id UNION SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -4.9053754806518555, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "inferred_code": "SELECT * FROM players", "score": -4.911444187164307, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6842541937897373, "gold_bleu_score": 0.6235582241598949}
{"index": 488, "beams": [{"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) DESC LIMIT 1", "score": -2.644243001937866, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.birth_date ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -3.183924436569214, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT * FROM players", "score": -3.6955833435058594, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT * FROM players", "score": -3.869887113571167, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = rankings.player_id ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -3.939568042755127, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT * FROM players", "score": -4.665224552154541, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 1", "score": -4.730077743530273, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT * FROM players", "score": -4.774911880493164, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY \"What\" ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.825004577636719, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1", "score": -4.928736686706543, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank_points DESC LIMIT 1", "score": -5.115061283111572, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_date DESC LIMIT 1", "score": -5.152029514312744, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT * FROM players", "score": -5.247908592224121, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON matches.winner_id = players.birth_date ORDER BY matches.winner_rank DESC LIMIT 1", "score": -5.2920098304748535, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY rankings.player_id ORDER BY COUNT(*) ASC LIMIT 1", "score": -5.759940147399902, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}, {"orig_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "inferred_code": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN rankings ON players.player_id = rankings.player_id", "score": -6.0811944007873535, "correct_code": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"}], "db_name": "wta_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8192812672114562, "gold_bleu_score": 0.7229873825371848}
{"index": 491, "beams": [{"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = \"Captured\"", "score": 0.0, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -4.159604549407959, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.disposition_of_ship = \"Captured\"", "score": -4.25766134262085, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship JOIN ship ON ship.lost_in_battle = ship.id WHERE ship.disposition_of_ship = \"Captured\"", "score": -4.272613048553467, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = \"Captured\" OR ship.disposition_of_ship = \"Captured\"", "score": -4.2781548500061035, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = \"Captured\" OR ship.disposition_of_ship = \"?\"", "score": -4.284510612487793, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -4.547451496124268, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = \"Captured\" ORDER BY COUNT(*)", "score": -4.811985492706299, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.260040760040283, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.280368328094482, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.380274295806885, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.416908264160156, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.732525825500488, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -5.782382488250732, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT COUNT(*) FROM ship WHERE ship.disposition_of_ship = \"Captured\" ORDER BY ship.disposition_of_ship", "score": -5.800715446472168, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}, {"orig_question": "How many ships ended up being 'Captured'?", "inferred_code": "SELECT * FROM battle", "score": -6.0020222663879395, "correct_code": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5037725299246449, "gold_bleu_score": 0.4198423198659438}
{"index": 493, "beams": [{"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle", "score": -9.794101885063355e-08, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -4.853841304779053, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle INTERSECT SELECT battle.name, battle.date, battle.result FROM battle", "score": -5.04778528213501, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle EXCEPT SELECT battle.name, battle.date, battle.result FROM battle", "score": -5.061192989349365, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle JOIN battle ON battle.id = battle.id", "score": -6.0493483543396, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle ORDER BY battle.date,battle.result", "score": -6.196524620056152, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle GROUP BY battle.date", "score": -6.553884029388428, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle ORDER BY battle.result", "score": -6.644083023071289, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.date", "score": -7.013716697692871, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -7.037964820861816, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -7.244545936584473, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -7.500122547149658, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -7.703519821166992, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT * FROM battle", "score": -7.808825492858887, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date, battle.result FROM battle LIMIT 1", "score": -7.916106700897217, "correct_code": "SELECT name ,  date FROM battle"}, {"orig_question": "List the name, date and result of each battle.", "inferred_code": "SELECT battle.name, battle.date LIKE battle.result FROM battle", "score": -8.59878158569336, "correct_code": "SELECT name ,  date FROM battle"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5809936989847369, "gold_bleu_score": 0.5290951570075364}
{"index": 494, "beams": [{"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured) FROM death GROUP BY death.killed", "score": -0.034606561064720154, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"minimum\" FROM death GROUP BY death.killed", "score": -0.8277586698532104, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT * FROM battle", "score": -0.9036616683006287, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"death\" FROM death GROUP BY death.killed", "score": -0.9268093109130859, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"toll\" FROM death GROUP BY death.killed", "score": -1.0211586952209473, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), death.killed FROM death GROUP BY death.killed", "score": -1.2880526781082153, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"maximum\" FROM death GROUP BY death.killed", "score": -1.3421159982681274, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), death.caused_by_ship_id FROM death GROUP BY death.killed", "score": -1.3440223932266235, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), MIN(death.killed) FROM death GROUP BY death.killed", "score": -1.4149526357650757, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"time\" FROM death GROUP BY death.killed", "score": -1.4924530982971191, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"caused\" FROM death GROUP BY death.killed", "score": -1.5524511337280273, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT * FROM battle", "score": -1.5891714096069336, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"What\" FROM death GROUP BY death.killed", "score": -1.7648228406906128, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT * FROM battle", "score": -1.7912168502807617, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.killed), MIN(death.injured) FROM death GROUP BY death.killed", "score": -1.8277409076690674, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}, {"orig_question": "What is maximum and minimum death toll caused each time?", "inferred_code": "SELECT MAX(death.injured), MIN(death.injured), \"each\" FROM death GROUP BY death.killed", "score": -1.8897744417190552, "correct_code": "SELECT max(killed) ,  min(killed) FROM death"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6850586219166417, "gold_bleu_score": 0.3430540037204751}
{"index": 495, "beams": [{"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death", "score": -0.008355909027159214, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"average\"", "score": -3.977222442626953, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY death.caused_by_ship_id", "score": -3.979579448699951, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"What\"", "score": -4.097740650177002, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"the\"", "score": -4.286801815032959, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT * FROM battle", "score": -4.41560173034668, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT death.note, AVG(death.injured) FROM death GROUP BY death.note", "score": -4.45284366607666, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"number\"", "score": -4.602901935577393, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"of\"", "score": -4.736505508422852, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY death.id", "score": -4.772200107574463, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"injuries\"", "score": -4.836175918579102, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT * FROM battle", "score": -4.876284599304199, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY \"death\"", "score": -4.885927200317383, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT * FROM battle", "score": -4.916141033172607, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT AVG(death.injured) FROM death GROUP BY death.killed", "score": -5.020285129547119, "correct_code": "SELECT avg(injured) FROM death"}, {"orig_question": "What is the average number of injuries caused each time?", "inferred_code": "SELECT * FROM battle", "score": -5.277605056762695, "correct_code": "SELECT avg(injured) FROM death"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5748848018304904, "gold_bleu_score": 0.6387915346535339}
{"index": 496, "beams": [{"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -0.031031489372253418, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -0.6855268478393555, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = \"t\"", "score": -0.716008186340332, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = \"t\"", "score": -1.7877591848373413, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship ON death.id = ship.id WHERE ship.tonnage = \"t\"", "score": -2.190063238143921, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.2355105876922607, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.3402678966522217, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.359915018081665, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.5518112182617188, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.554659366607666, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.554872751235962, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.576136827468872, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship ON death.id = ship.id WHERE ship.tonnage = \"t\"", "score": -2.698164463043213, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.744469404220581, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT * FROM battle", "score": -2.766357421875, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}, {"orig_question": "What are the death and injury situations caused by the ship with tonnage 't'?", "inferred_code": "SELECT death.killed, death.injured FROM death JOIN ship ON ship.id = death.caused_by_ship_id WHERE ship.tonnage = \"t\"", "score": -2.9903628826141357, "correct_code": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.84963175584014, "gold_bleu_score": 0.42558789287368765}
{"index": 497, "beams": [{"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\"", "score": -7.285040624083194e-07, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\" EXCEPT SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander = \"Boril\"", "score": -3.3503801822662354, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\" AND battle.result != \"Boril\"", "score": -3.921839952468872, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle JOIN battle ON battle.id = battle.id WHERE battle.bulgarian_commander != \"Boril\"", "score": -4.112563610076904, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != MOD(\"Boril\", battle.result) != \"Boril\"", "score": -4.408766269683838, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -4.483142375946045, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Borilril\"", "score": -5.313724994659424, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander = \"Boril\"", "score": -5.400510311126709, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\" GROUP BY battle.name", "score": -5.558341026306152, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\" ORDER BY battle.result", "score": -5.5670037269592285, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -5.627994060516357, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -5.7422709465026855, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander != \"Boril\" ORDER BY battle.date", "score": -5.763514518737793, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -6.004431247711182, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -6.105954647064209, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}, {"orig_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "inferred_code": "SELECT * FROM battle", "score": -6.144896984100342, "correct_code": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9168572287852437, "gold_bleu_score": 0.8082765238111005}
{"index": 498, "beams": [{"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = \"Brig\"", "score": -0.009974228218197823, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.id WHERE ship.ship_type = \"Brig\"", "score": -0.7329506278038025, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -1.290511131286621, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle ON ship.id = battle.id WHERE ship.ship_type = \"Brig\"", "score": -1.4427756071090698, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle ON battle.id = ship.lost_in_battle WHERE ship.ship_type = \"Brig\"", "score": -1.7161556482315063, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle ON battle.id = ship.id WHERE ship.ship_type = \"Brig\"", "score": -1.7868105173110962, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON ship.id = battle.id WHERE ship.ship_type = \"Brig\"", "score": -1.866937518119812, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -1.996456265449524, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM ship JOIN battle ON ship.lost_in_battle = battle.id WHERE ship.ship_type = \"Brig\"", "score": -2.0731141567230225, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -2.524247646331787, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -2.5407092571258545, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -2.7873854637145996, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT * FROM battle", "score": -3.2709710597991943, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = \"Brig\"", "score": -3.4213242530822754, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT battle.id, battle.name, ship.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = \"Brig\"", "score": -4.206277847290039, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}, {"orig_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "inferred_code": "SELECT DISTINCT ship.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = \"Brig\"", "score": -4.500942707061768, "correct_code": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7911845682167016, "gold_bleu_score": 0.6314917982911882}
{"index": 501, "beams": [{"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.latin_commander = \"Baldwin I\"", "score": -0.07851622998714447, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Baldwin I\"", "score": -0.20967289805412292, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"Baldwin I\"", "score": -0.7889120578765869, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"latin Baldwin I\"", "score": -1.6390440464019775, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.latin_commander = \"latin Baldwin I\"", "score": -2.0014395713806152, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"Baldwin I\"", "score": -2.0225887298583984, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle JOIN battle ON battle.id = battle.id WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.latin_commander = \"Baldwin I\"", "score": -2.075016975402832, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"latin I\"", "score": -2.322611093521118, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"latinloyan\"", "score": -2.428557872772217, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.latin_commander = \"latin I\"", "score": -2.47633957862854, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloloyan\" INTERSECT SELECT battle.name FROM battle WHERE battle.latin_commander = \"Baldwin I\"", "score": -2.547420024871826, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT MIN(battle.name) FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"Baldwin I\"", "score": -2.8598265647888184, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"latinyan\"", "score": -2.9233078956604004, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" OR battle.latin_commander = \"Baldwin I\"", "score": -2.971102237701416, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = \"Kaloyan\" AND battle.latin_commander = \"latin I\"", "score": -3.043936014175415, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}, {"orig_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "inferred_code": "SELECT * FROM battle", "score": -3.044015645980835, "correct_code": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6875352500270323, "gold_bleu_score": 0.6934788716582567}
{"index": 502, "beams": [{"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle", "score": 0.0, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT * FROM battle", "score": -4.839437961578369, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle INTERSECT SELECT COUNT(DISTINCT battle.result) FROM battle", "score": -5.010200500488281, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle ORDER BY COUNT(DISTINCT battle.result)", "score": -5.015114784240723, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle EXCEPT SELECT COUNT(DISTINCT battle.result) FROM battle", "score": -5.1677141189575195, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT * FROM battle", "score": -5.277550220489502, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT * FROM battle", "score": -5.304990291595459, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle WHERE battle.result = \"VALUE\"", "score": -5.439952373504639, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT * FROM battle", "score": -5.5395050048828125, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle WHERE battle.result < \"VALUE\"", "score": -5.602779388427734, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) = COUNT(DISTINCT battle.result) FROM battle", "score": -6.029575824737549, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) FROM battle WHERE battle.result", "score": -6.794198989868164, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT battle.result) FROM battle", "score": -7.550234794616699, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT * FROM battle", "score": -7.590855121612549, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) = \"VALUE\" FROM battle", "score": -7.717930793762207, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}, {"orig_question": "How many different results are there for the battles?", "inferred_code": "SELECT COUNT(DISTINCT battle.result) = 1 FROM battle", "score": -7.757343292236328, "correct_code": "SELECT count(DISTINCT RESULT) FROM battle"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9658909897484963, "gold_bleu_score": 0.663185640095891}
{"index": 506, "beams": [{"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note LIKE \"% East %\"", "score": -7.453806756529957e-05, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.killed LIKE \"% East %\"", "score": -2.6353325843811035, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death JOIN death ON death.killed = death.caused_by_ship_id WHERE death.note LIKE \"% East %\"", "score": -3.785173177719116, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death JOIN death ON death.id = death.caused_by_ship_id WHERE death.note LIKE \"% East %\"", "score": -4.198709011077881, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death JOIN death ON death.caused_by_ship_id = death.caused_by_ship_id WHERE death.note LIKE \"% East %\"", "score": -4.398050785064697, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note NOT LIKE \"% East %\"", "score": -4.692284107208252, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT * FROM battle", "score": -5.042248249053955, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT * FROM battle", "score": -5.287206649780273, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE MOD(death.note, \"% East %\")", "score": -5.466263771057129, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT * FROM battle", "score": -5.498753547668457, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note HAVING \"% East %\"", "score": -5.505631446838379, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note LIKE \"%st %\"", "score": -5.724706649780273, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note LIKE \"% East %\" ORDER BY death.injured", "score": -5.76082706451416, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.note LIKE \"% '%\"", "score": -5.891563415527344, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT death.note FROM death WHERE death.injured LIKE \"% East %\"", "score": -5.972118377685547, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}, {"orig_question": "What are the notes of the death events which has substring 'East'?", "inferred_code": "SELECT * FROM battle", "score": -5.989048957824707, "correct_code": "SELECT note FROM death WHERE note LIKE '%East%'"}], "db_name": "battle_death", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6064802328020379, "gold_bleu_score": 0.48689363380110184}
{"index": 507, "beams": [{"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != 1 AND Addresses.line_2 = line 2", "score": -0.15974830090999603, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != line 1 EXCEPT SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -0.4201194643974304, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 1 EXCEPT SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -0.46906858682632446, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != line 1 AND Addresses.line_2 = line 2", "score": -0.5392839312553406, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 AND Addresses.line_2 = line 2", "score": -0.6459806561470032, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != 1 EXCEPT SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -0.690839946269989, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 EXCEPT SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -0.7695003151893616, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != line 1 UNION SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -1.0051308870315552, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 1 AND Addresses.line_2 = line 2", "score": -1.010735034942627, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != 1 UNION SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -1.0703381299972534, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != line 1 EXCEPT SELECT * FROM Addresses WHERE Addresses.line_1 = line 2", "score": -1.0950870513916016, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 AND Addresses.line_2 != line 2", "score": -1.178076982498169, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 1 UNION SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 2", "score": -1.1842830181121826, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != line 1 AND Addresses.line_2 != line 2", "score": -1.2501291036605835, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 != 1 OR Addresses.line_2 = line 2", "score": -1.3198615312576294, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "what are all the addresses including line 1 and line 2?", "inferred_code": "SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = line 1 EXCEPT SELECT * FROM Addresses WHERE Addresses.line_1 = line 2", "score": -1.357102870941162, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9459088279832313, "gold_bleu_score": 0.571652176381434}
{"index": 508, "beams": [{"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses", "score": -0.0002166430203942582, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_3 FROM Addresses", "score": -3.723970890045166, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_1 = \"VALUE\"", "score": -5.0468292236328125, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_2 = \"VALUE\"", "score": -5.203334331512451, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_1 LIKE \"% ? %\"", "score": -5.454706192016602, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_1 LIKE \"% second %\"", "score": -5.550317287445068, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_1 LIKE \"% addresses %\"", "score": -5.635984897613525, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT * FROM Addresses", "score": -5.789118766784668, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_3 = \"VALUE\"", "score": -5.982393741607666, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT * FROM Addresses", "score": -6.307147026062012, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT * FROM Addresses", "score": -6.810977458953857, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_3 FROM Addresses WHERE Addresses.line_1 = \"VALUE\"", "score": -7.228645324707031, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_3 FROM Addresses WHERE Addresses.line_1 LIKE \"% ? %\"", "score": -7.301841735839844, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses ORDER BY Addresses.line_2", "score": -7.357735633850098, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT Addresses.line_1, Addresses.line_3 FROM Addresses WHERE Addresses.line_2 = \"VALUE\"", "score": -7.393865585327148, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}, {"orig_question": "What is the first and second line for all addresses?", "inferred_code": "SELECT * FROM Addresses", "score": -7.867448806762695, "correct_code": "SELECT line_1 ,  line_2 FROM addresses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9752176256022597, "gold_bleu_score": 0.7351263663830186}
{"index": 509, "beams": [{"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT COUNT(*) FROM Courses", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -6.668292045593262, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -7.145376205444336, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -7.4500732421875, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT COUNT(*) FROM Courses WHERE \"many\"", "score": -7.599498271942139, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT COUNT(*) FROM Courses WHERE \"How\"", "score": -7.749136924743652, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT COUNT(*) FROM Courses ORDER BY Courses.course_name", "score": -8.02761173248291, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -8.307190895080566, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Courses", "score": -8.334113121032715, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T(*) FROM Courses", "score": -8.362642288208008, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT COUNT(*) FROM Courses AS 0", "score": -8.39272403717041, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT SUM(*) FROM Courses", "score": -8.864523887634277, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT T(Courses.course_name) FROM Courses", "score": -9.202066421508789, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -9.26889419555664, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -9.360706329345703, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses in total are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -9.401199340820312, "correct_code": "SELECT count(*) FROM Courses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9805509897945711, "gold_bleu_score": 0.5290343326823188}
{"index": 510, "beams": [{"orig_question": "How many courses are there?", "inferred_code": "SELECT COUNT(*) FROM Courses", "score": 0.0, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -6.759358882904053, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -6.814417362213135, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT COUNT(*) FROM Courses WHERE \"How\"", "score": -7.175709247589111, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT COUNT(*) FROM Courses WHERE \"many\"", "score": -7.1876068115234375, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -7.322935104370117, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -7.464669704437256, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -7.502685070037842, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -7.506367206573486, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Courses", "score": -7.816217422485352, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT COUNT(*) FROM Courses ORDER BY Courses.course_name", "score": -7.968389511108398, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -8.52844524383545, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT COUNT(*) AS Courses.course_id FROM Courses", "score": -8.726203918457031, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -8.73996639251709, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT * FROM Addresses", "score": -8.800516128540039, "correct_code": "SELECT count(*) FROM Courses"}, {"orig_question": "How many courses are there?", "inferred_code": "SELECT T(*) FROM Courses", "score": -9.249727249145508, "correct_code": "SELECT count(*) FROM Courses"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 511, "beams": [{"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -4.256406072045138e-08, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"described\"", "score": -4.246974945068359, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" EXCEPT SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -4.264718532562256, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses JOIN Departments ON Courses.course_id = Departments.department_id WHERE Courses.course_name = \"math\"", "score": -4.363596439361572, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" EXCEPT SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"described\"", "score": -6.282595157623291, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -6.4661078453063965, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" ORDER BY Courses.course_description", "score": -6.468741416931152, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -6.680940628051758, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -6.721034526824951, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -6.779609680175781, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -7.201229095458984, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -7.266707897186279, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -7.353389739990234, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name != \"math\"", "score": -7.471689701080322, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT Courses.course_description FROM Courses GROUP BY Courses.course_name = \"math\"", "score": -7.594277858734131, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "How is the math course described?", "inferred_code": "SELECT * FROM Addresses", "score": -7.803335189819336, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6462953604604808, "gold_bleu_score": 0.388881734804849}
{"index": 512, "beams": [{"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -4.256406072045138e-08, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses JOIN Departments ON Courses.course_id = Departments.department_id WHERE Courses.course_name = \"math\"", "score": -4.096329212188721, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" EXCEPT SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -4.196246147155762, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" INTERSECT SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\"", "score": -4.407467365264893, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"math\"", "score": -4.8906731605529785, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"the\"", "score": -5.087663650512695, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"What\"", "score": -5.088353157043457, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"?\"", "score": -5.090268611907959, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"descriptions\"", "score": -5.109707355499268, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"are\"", "score": -5.157149791717529, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"all the VALUE\"", "score": -5.2397637367248535, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"for\"", "score": -5.294897556304932, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT * FROM Addresses", "score": -5.430526256561279, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"all What\"", "score": -5.43859338760376, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" AND Courses.course_description = \"all are\"", "score": -5.440298080444336, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}, {"orig_question": "What are the descriptions for all the math courses?", "inferred_code": "SELECT Courses.course_description FROM Courses WHERE Courses.course_name = \"math\" ORDER BY Courses.course_description", "score": -6.476814270019531, "correct_code": "SELECT course_description FROM Courses WHERE course_name  =  'math'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6122835213482809, "gold_bleu_score": 0.6647810141087193}
{"index": 513, "beams": [{"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": -3.9939038742886623e-08, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" EXCEPT SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": -3.6429224014282227, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" INTERSECT SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": -3.8802711963653564, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"?\"", "score": -4.649136066436768, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.address_id = \"Port Chelsea\"", "score": -4.758824348449707, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.address_id = \"Port Chelsea VALUE\"", "score": -4.797484397888184, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"Port Chelsea\"", "score": -4.814213752746582, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.line_3 = \"Port Chelsea\"", "score": -4.929049015045166, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"the\"", "score": -5.023416519165039, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"What\"", "score": -5.177789211273193, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.378445148468018, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.531202793121338, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.605545997619629, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.661326885223389, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.70418643951416, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code of the address in the city Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.8746137619018555, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7607461109488826, "gold_bleu_score": 0.719607259320414}
{"index": 514, "beams": [{"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": 0.0, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" EXCEPT SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": -3.8659493923187256, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.state_province_county = \"Port Chelsea\"", "score": -4.958856582641602, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"Port Chelsea\"", "score": -4.987834453582764, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.line_3 = \"Port Chelsea\"", "score": -5.002693176269531, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.other_address_details = \"Port Chelsea\"", "score": -5.053369045257568, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" OR Addresses.city = \"What\"", "score": -5.290489196777344, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = \"Port Chelsea\" AND Addresses.line_3 = \"What\"", "score": -5.319605827331543, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.350316047668457, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.535848140716553, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.589765548706055, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.609738349914551, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.799519062042236, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT \"Addresses.zip_postcode.Addresses.state_province_county\" FROM Addresses WHERE Addresses.city = \"Port Chelsea\"", "score": -5.8320746421813965, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -5.8817057609558105, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}, {"orig_question": "What is the zip code for Port Chelsea?", "inferred_code": "SELECT * FROM Addresses", "score": -6.069554805755615, "correct_code": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4657078638863754, "gold_bleu_score": 0.4927349535764595}
{"index": 517, "beams": [{"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -4.897050942531678e-08, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -4.152777194976807, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name < \"VALUE\"", "score": -5.024855136871338, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs ORDER BY COUNT(DISTINCT Degree_Programs.department_id)", "score": -5.086755752563477, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = \"VALUE\"", "score": -5.286808013916016, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -5.346197605133057, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -6.121190071105957, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -6.354125499725342, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name", "score": -6.475857257843018, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT Degree_Programs.department_id, COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs GROUP BY Degree_Programs.department_id", "score": -6.4839653968811035, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -6.529305458068848, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -6.752024173736572, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -7.245043754577637, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -7.259896755218506, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -7.669881820678711, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many departments offer any degree?", "inferred_code": "SELECT * FROM Addresses", "score": -7.733049392700195, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4933158702913747, "gold_bleu_score": 0.49529602415144186}
{"index": 518, "beams": [{"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": 0.0, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs ORDER BY COUNT(DISTINCT Degree_Programs.department_id)", "score": -5.037429332733154, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs UNION SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -5.243499755859375, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -5.526157855987549, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = \"VALUE\"", "score": -5.579311370849609, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name < \"VALUE\"", "score": -5.594347953796387, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -5.616051197052002, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -5.814655303955078, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT Degree_Programs.department_id, COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs GROUP BY Degree_Programs.department_id", "score": -6.623778820037842, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name", "score": -6.9962897300720215, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -7.316504955291748, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -7.387829303741455, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id), Degree_Programs.department_id FROM Degree_Programs GROUP BY Degree_Programs.department_id", "score": -7.449697971343994, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs", "score": -7.75082540512085, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.department_id) FROM Degree_Programs GROUP BY Degree_Programs.department_id", "score": -7.802185535430908, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}, {"orig_question": "How many different departments offer degrees?", "inferred_code": "SELECT * FROM Addresses", "score": -7.978081226348877, "correct_code": "SELECT count(DISTINCT department_id) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6184583439564004, "gold_bleu_score": 0.5407146441543516}
{"index": 519, "beams": [{"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -0.005125897005200386, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Courses.course_name) FROM Courses", "score": -4.092344284057617, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs ORDER BY COUNT(DISTINCT Degree_Programs.degree_summary_name)", "score": -5.121445655822754, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs EXCEPT SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -5.363616943359375, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs UNION SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -5.424955368041992, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.49100923538208, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.580201625823975, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs UNION SELECT COUNT(DISTINCT Courses.course_name) FROM Courses", "score": -5.6351237297058105, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.649287700653076, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name < \"VALUE\"", "score": -5.6750359535217285, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.675044536590576, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.799309253692627, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs EXCEPT SELECT COUNT(DISTINCT Courses.course_name) FROM Courses", "score": -5.854473114013672, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = \"VALUE\"", "score": -5.917531490325928, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.997099876403809, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degree names are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.077754020690918, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.2216021550842544, "gold_bleu_score": 0.4323471421948048}
{"index": 520, "beams": [{"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -2.6444124614499742e-06, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs UNION SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -5.017571926116943, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs", "score": -5.041186332702637, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs ORDER BY COUNT(DISTINCT Degree_Programs.degree_summary_name)", "score": -5.0683064460754395, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs EXCEPT SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -5.252912998199463, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -5.352799415588379, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs INTERSECT SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs", "score": -5.443797588348389, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs UNION SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs", "score": -6.096855163574219, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.305447578430176, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name), COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs", "score": -6.451437950134277, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.629237651824951, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs ORDER BY COUNT(DISTINCT Degree_Programs.degree_program_id)", "score": -6.68765115737915, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.689185619354248, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.698330879211426, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT * FROM Addresses", "score": -6.743825435638428, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}, {"orig_question": "How many different degrees are offered?", "inferred_code": "SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) > COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs", "score": -6.762794494628906, "correct_code": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.09641045357109823, "gold_bleu_score": 0.35172510142975916}
{"index": 521, "beams": [{"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -1.2254344028406194e-06, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"VALUE\"", "score": -2.931248664855957, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Degree_Programs.degree_program_id WHERE Departments.department_name = \"engineering\"", "score": -3.160595655441284, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\" OR Departments.department_name = \"offer\"", "score": -3.202143669128418, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT SUM(Degree_Programs.degree_summary_name) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.2494218349456787, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.265505313873291, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT * FROM Addresses", "score": -3.3142426013946533, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.4972329139709473, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\" OR Departments.department_name = \"engineering\"", "score": -3.5733776092529297, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_description = \"engineering\"", "score": -3.7350447177886963, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT * FROM Addresses", "score": -3.7517497539520264, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"the engineering\"", "score": -3.8880176544189453, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"VALUE engineering\"", "score": -3.921339750289917, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 4", "score": -4.125504493713379, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT * FROM Addresses", "score": -4.671204566955566, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department offer?", "inferred_code": "SELECT COUNT(*) FROM Departments WHERE Departments.department_name = \"engineering\"", "score": -4.7056660652160645, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.21508167487412988, "gold_bleu_score": 0.4786092360033935}
{"index": 522, "beams": [{"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -1.10690962173976e-05, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) FROM Departments WHERE Departments.department_name = \"engineering\"", "score": -2.981377601623535, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT SUM(Degree_Programs.degree_summary_name) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -2.9905693531036377, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Degree_Programs.degree_program_id WHERE Departments.department_name = \"engineering\"", "score": -3.076159715652466, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT * FROM Addresses", "score": -3.3171277046203613, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT \"VALUE\" AS select count (*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.5420210361480713, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT DISTINCT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.555753231048584, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT 4 AS select count (*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.71929931640625, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.7527124881744385, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT 10 AS select count (*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.7601613998413086, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.9594550132751465, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT T(Degree_Programs.degree_summary_name) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -3.970371723175049, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_description = \"engineering\"", "score": -4.164280414581299, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT COUNT(*) AS Degree_Programs.degree_program_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -4.355891227722168, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT \"VALUE\" FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -4.614885330200195, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}, {"orig_question": "How many degrees does the engineering department have?", "inferred_code": "SELECT 4 FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = \"engineering\"", "score": -4.843249320983887, "correct_code": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.17927283978083208, "gold_bleu_score": 0.4786092360033935}
{"index": 523, "beams": [{"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -2.8787150441189624e-08, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections EXCEPT SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -5.816189765930176, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections INTERSECT SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -6.201644420623779, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name LIKE \"% ? %\"", "score": -6.304002285003662, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections JOIN Sections ON Sections.section_id = Sections.section_id", "score": -6.562753677368164, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -6.918909549713135, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections ORDER BY Sections.section_description", "score": -7.478304386138916, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections GROUP BY Sections.section_name, Sections.section_description", "score": -7.539332866668701, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -8.120485305786133, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections GROUP BY Sections.section_name", "score": -8.761075973510742, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -8.843554496765137, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -9.13071346282959, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -9.344001770019531, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections ORDER BY Sections.section_id", "score": -9.345560073852539, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT Sections.section_name LIKE Sections.section_description FROM Sections", "score": -9.756250381469727, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions of all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -10.291177749633789, "correct_code": "SELECT section_name ,  section_description FROM Sections"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9771471945822982, "gold_bleu_score": 0.8323294134728284}
{"index": 524, "beams": [{"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -2.8787150441189624e-08, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections EXCEPT SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -5.821107864379883, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name LIKE \"% ? %\"", "score": -6.177598476409912, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections INTERSECT SELECT Sections.section_name, Sections.section_description FROM Sections", "score": -6.227509498596191, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections JOIN Sections ON Sections.section_id = Sections.section_id", "score": -6.467084884643555, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -6.848583698272705, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections ORDER BY Sections.section_description", "score": -7.4737701416015625, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections GROUP BY Sections.section_name, Sections.section_description", "score": -7.497498512268066, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -8.155587196350098, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections GROUP BY Sections.section_name", "score": -8.781545639038086, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -8.842070579528809, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_description", "score": -8.908916473388672, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name, Sections.section_description FROM Sections ORDER BY Sections.section_id", "score": -8.94726848602295, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -9.119962692260742, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT * FROM Addresses", "score": -9.314701080322266, "correct_code": "SELECT section_name ,  section_description FROM Sections"}, {"orig_question": "What are the names and descriptions for all the sections?", "inferred_code": "SELECT Sections.section_name LIKE Sections.section_description FROM Sections", "score": -9.704768180847168, "correct_code": "SELECT section_name ,  section_description FROM Sections"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9829346583195644, "gold_bleu_score": 0.7740040325341989}
{"index": 531, "beams": [{"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer %\"", "score": -1.692565376743005e-07, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer %\" AND Departments.department_name LIKE \"% computer %\"", "score": -3.9115030765533447, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments JOIN Departments ON Departments.department_name = Departments.department_id WHERE Departments.department_name LIKE \"% computer %\"", "score": -3.973532199859619, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -4.504483699798584, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_description LIKE \"% computer %\"", "score": -4.698843002319336, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer VALUE %\"", "score": -5.164769172668457, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.176853179931641, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.273453712463379, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name NOT LIKE \"% computer %\"", "score": -5.382410526275635, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.433339595794678, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.461909770965576, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer % %\"", "score": -5.504763126373291, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"like VALUE %\"", "score": -5.658662796020508, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"%st %\"", "score": -5.713084697723389, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.839347839355469, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the description of the department whose name has the substring the computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.915471076965332, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6396108597568089, "gold_bleu_score": 0.5917699010322189}
{"index": 532, "beams": [{"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer %\"", "score": -7.522513101321238e-08, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments JOIN Departments ON Departments.department_name = Departments.department_id WHERE Departments.department_name LIKE \"% computer %\"", "score": -3.8885080814361572, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer %\" AND Departments.department_name LIKE \"% computer %\"", "score": -4.086526870727539, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_description LIKE \"% computer %\"", "score": -5.047832012176514, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.27754545211792, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.4903483390808105, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer %\" ORDER BY Departments.department_name", "score": -5.587707996368408, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.589219093322754, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% computer VALUE %\"", "score": -5.7082743644714355, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name NOT LIKE \"% computer %\"", "score": -5.73723840713501, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.7589287757873535, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.883997917175293, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -5.982414245605469, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -6.096770763397217, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT * FROM Addresses", "score": -6.108153820037842, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}, {"orig_question": "What is the department description for the one whose name has the word computer?", "inferred_code": "SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE \"% word %\"", "score": -6.124233245849609, "correct_code": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.64765170668335, "gold_bleu_score": 0.6096711539011334}
{"index": 535, "beams": [{"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -0.7012664675712585, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -1.3453129529953003, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -1.8031282424926758, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -2.1980466842651367, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -2.5412614345550537, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"Bachelor\"", "score": -2.5857250690460205, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"VALUE Bachelor\"", "score": -2.6097571849823, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"VALUE\"", "score": -2.8240883350372314, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.student_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"Bachelor\"", "score": -2.824653387069702, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"yes\"", "score": -2.9229586124420166, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = (SELECT Degree_Programs.department_id FROM Degree_Programs WHERE Degree_Programs.degree_summary_name = \"Bachelor\")", "score": -2.9845070838928223, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT * FROM Addresses", "score": -3.0813350677490234, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Degree_Programs.degree_summary_name = \"y\"", "score": -3.097210645675659, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"Bachelor\"", "score": -3.189798355102539, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"yes\"", "score": -3.395460844039917, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = 1", "score": -3.6571755409240723, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6573826502424911, "gold_bleu_score": 0.5047605682016753}
{"index": 536, "beams": [{"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -0.2594216465950012, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Student_Enrolment.degree_program_id = 1", "score": -0.5176811814308167, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -0.6213870644569397, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"VALUE\"", "score": -0.668476939201355, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -0.7285121083259583, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -0.8183293342590332, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -0.9381172060966492, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -1.040246605873108, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.degree_program_id = Students.student_id WHERE Student_Enrolment.degree_program_id = 1", "score": -1.0975054502487183, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -1.1068220138549805, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Student_Enrolment.degree_program_id = (SELECT Students.last_name FROM Students)", "score": -1.196061372756958, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"VALUE\"", "score": -1.2027575969696045, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -1.2712756395339966, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.degree_program_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \"VALUE\"", "score": -1.2953274250030518, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -1.3190994262695312, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}, {"orig_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "inferred_code": "SELECT * FROM Addresses", "score": -1.3548592329025269, "correct_code": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5408482395643395, "gold_bleu_score": 0.5246186983751442}
{"index": 545, "beams": [{"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -1.5748734085718752e-06, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT DISTINCT Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses)", "score": -2.831244468688965, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT DISTINCT Student_Enrolment_Courses.student_course_id FROM Student_Enrolment_Courses)", "score": -3.6642749309539795, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id EXCEPT SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -3.6853551864624023, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT Student_Enrolment_Courses.student_course_id FROM Student_Enrolment_Courses)", "score": -3.6949071884155273, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = \"VALUE\"", "score": -3.697737455368042, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id INTERSECT SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -3.9104268550872803, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses)", "score": -3.9517476558685303, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.0329179763793945, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.1374616622924805, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id", "score": -4.337740898132324, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.3478684425354, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.5193586349487305, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.67227029800415, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = 1", "score": -4.729314804077148, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are all the course names of the courses which ever have students enrolled in?", "inferred_code": "SELECT * FROM Addresses", "score": -4.75377893447876, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.666419456961838, "gold_bleu_score": 0.6122999322333814}
{"index": 546, "beams": [{"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -0.019465316087007523, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -0.9839005470275879, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT DISTINCT Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses)", "score": -2.598123550415039, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = 0", "score": -3.1296112537384033, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT * FROM Addresses", "score": -3.5217528343200684, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = 1", "score": -3.5396642684936523, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id EXCEPT SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id", "score": -3.609618902206421, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = \"VALUE\"", "score": -3.821038246154785, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT DISTINCT Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses)", "score": -3.9284822940826416, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id", "score": -4.032216548919678, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id", "score": -4.389682292938232, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT * FROM Addresses", "score": -4.597236156463623, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT * FROM Addresses", "score": -4.667731761932373, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id > \"VALUE\"", "score": -4.694788455963135, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = 0", "score": -4.721441268920898, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}, {"orig_question": "What are the names of all courses that have some students enrolled?", "inferred_code": "SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id", "score": -4.837642669677734, "correct_code": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6419525218848747, "gold_bleu_score": 0.6838977080117414}
{"index": 553, "beams": [{"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -1.0288433713867562e-06, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT * FROM Addresses", "score": -2.322492837905884, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT * FROM Addresses", "score": -2.439413547515869, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT * FROM Addresses", "score": -2.4984066486358643, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.student_id = Students.permanent_address_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -2.6030492782592773, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.student_id = Students.current_address_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -2.628178596496582, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.student_id = Students.student_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -2.880702257156372, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.last_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -3.050854444503784, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.permanent_address_id = Students.student_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -3.1908624172210693, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.current_address_id = Students.student_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -3.30971360206604, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT * FROM Addresses", "score": -3.469810724258423, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothyhy\" AND Students.last_name = \"Ward\"", "score": -3.696502208709717, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Tim Timmothy\" AND Students.last_name = \"Ward\"", "score": -3.7110397815704346, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Timmothy\"", "score": -3.8293399810791016, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timhy\" AND Students.last_name = \"Ward\"", "score": -4.122785568237305, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}, {"orig_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "inferred_code": "SELECT * FROM Addresses", "score": -4.136285305023193, "correct_code": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4348868328785582, "gold_bleu_score": 0.6008708697032511}
{"index": 554, "beams": [{"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -1.6683939918493707e-07, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students JOIN Students ON Students.student_id = Students.student_id WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\"", "score": -3.20807147026062, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"Ward\" AND Students.cell_mobile_number = \"Timmothy\"", "score": -3.289431571960449, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -3.475364923477173, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -3.560774564743042, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -3.60176944732666, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -3.6320955753326416, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmotmothy\" AND Students.last_name = \"Ward\"", "score": -3.900909185409546, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" AND Students.last_name = \"hy\"", "score": -4.122257232666016, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy\" OR Students.last_name = \"Ward\"", "score": -4.154895305633545, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -4.27898645401001, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothy.Students.last_name\" = \"Ward\"", "score": -4.297753810882568, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Tim Timmothy\" AND Students.last_name = \"Ward\"", "score": -4.31773567199707, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -4.356537818908691, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT * FROM Addresses", "score": -4.404584884643555, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}, {"orig_question": "What is the mobile phone number of the student named Timmothy Ward ?", "inferred_code": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = \"Timmothyhy\" AND Students.last_name = \"Ward\"", "score": -4.414813995361328, "correct_code": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7758142147810585, "gold_bleu_score": 0.48284435544248056}
{"index": 555, "beams": [{"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1", "score": -0.0034267823211848736, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -1.370715618133545, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -1.877187728881836, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -2.8383312225341797, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered,Students.last_name LIMIT 1", "score": -2.9870996475219727, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -3.0813748836517334, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered DESC LIMIT 1", "score": -3.086472988128662, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -3.3404834270477295, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered,Students.last_name", "score": -3.5136539936065674, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY (Students.date_first_registered - Students.last_name) ASC LIMIT 1", "score": -3.8913516998291016, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.035289287567139, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.073645114898682, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered,Students.last_name ASC LIMIT 1", "score": -4.085411071777344, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.402906894683838, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.434478282928467, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "Who is the first student to register? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY (Students.date_first_registered - Students.last_name)", "score": -4.461536884307861, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7486479381987037, "gold_bleu_score": 0.5753937583180341}
{"index": 556, "beams": [{"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1", "score": -0.10194019973278046, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1", "score": -0.328189492225647, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -2.0053162574768066, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT * FROM Addresses", "score": -2.598069906234741, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered,Students.last_name LIMIT 1", "score": -2.6204519271850586, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT * FROM Addresses", "score": -2.749687910079956, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id ORDER BY Students.date_first_registered LIMIT 1", "score": -2.8301475048065186, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT * FROM Addresses", "score": -2.8791816234588623, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) LIMIT 1", "score": -2.9983019828796387, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered DESC LIMIT 1", "score": -3.1999056339263916, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT * FROM Addresses", "score": -3.356522798538208, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY (Students.date_first_registered - Students.last_name)", "score": -3.3706014156341553, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered,Students.last_name", "score": -3.4060370922088623, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered + Students.last_name LIMIT 1", "score": -3.4235804080963135, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id", "score": -3.596298933029175, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the first student to register?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -3.7181131839752197, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8032211539009295, "gold_bleu_score": 0.5263724613263256}
{"index": 557, "beams": [{"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.current_address_id = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -2.7926175594329834, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1", "score": -2.939185857772827, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.current_address_id = Departments.department_id ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -3.3885862827301025, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -3.9906952381134033, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.last_name = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -4.0839056968688965, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.permanent_address_id = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -4.153816223144531, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.228715419769287, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -4.284297466278076, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.current_address_id = Departments.department_id ORDER BY STUDENTS.DATE_FIRST_REGISTERED(Students.date_first_registered) LIMIT 1", "score": -4.397699356079102, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.permanent_address_id = Departments.department_id ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -4.712056636810303, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.last_name = Departments.department_id ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -4.752779960632324, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.current_address_id = Departments.department_id ORDER BY (Students.date_first_registered - Departments.department_name)", "score": -4.855216979980469, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY STUDENTS.DATE_FIRST_REGISTERED(Students.date_first_registered) LIMIT 1", "score": -5.0140533447265625, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -5.135551929473877, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -5.427311420440674, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "inferred_code": "SELECT * FROM Addresses", "score": -5.472293853759766, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.47915955995090453, "gold_bleu_score": 0.49324184623372835}
{"index": 558, "beams": [{"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1", "score": -0.3981553912162781, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.last_name = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -2.885509490966797, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.permanent_address_id = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -3.243921995162964, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Departments ON Students.date_first_registered = Departments.department_id ORDER BY Students.date_first_registered LIMIT 1", "score": -3.3318161964416504, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1", "score": -3.7863433361053467, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered,Students.last_name LIMIT 1", "score": -4.038182258605957, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.156160831451416, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1", "score": -4.275454521179199, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered < Students.last_name LIMIT 1", "score": -4.302123546600342, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.412875652313232, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.472504615783691, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.555898189544678, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered + Students.last_name LIMIT 1", "score": -4.600163459777832, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.861291408538818, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.873786449432373, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}, {"orig_question": "What is the first, middle, and last name of the earliest school graduate?", "inferred_code": "SELECT * FROM Addresses", "score": -4.879796981811523, "correct_code": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5381243166802643, "gold_bleu_score": 0.43098844995483027}
{"index": 563, "beams": [{"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts ORDER BY AVG(Transcripts.transcript_date)", "score": -6.356709003448486, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT * FROM Addresses", "score": -6.432560920715332, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id", "score": -6.560466289520264, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT * FROM Addresses", "score": -6.588854789733887, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts", "score": -6.798547744750977, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date - Transcripts.transcript_date) FROM Transcripts", "score": -7.32568883895874, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE \"Transcript_Contents\"", "score": -7.523706436157227, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) AS Transcripts.transcript_date FROM Transcripts LIMIT 1", "score": -7.645325660705566, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) AS average FROM Transcripts LIMIT 1", "score": -7.978991508483887, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE Transcripts.transcript_id", "score": -8.373275756835938, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts AS 0", "score": -8.808289527893066, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT \"avg\" AS (Transcripts.transcript_date) FROM Transcripts", "score": -8.835805892944336, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT * FROM Addresses", "score": -8.992753982543945, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT * FROM Addresses", "score": -9.04883098602295, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "On average, when were the transcripts printed?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) AS Transcripts.transcript_date FROM Transcripts", "score": -9.06236457824707, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7176717701422837, "gold_bleu_score": 0.5033298128672596}
{"index": 564, "beams": [{"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts", "score": 0.0, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT * FROM Addresses", "score": -4.453314781188965, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT * FROM Addresses", "score": -6.294311046600342, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts ORDER BY AVG(Transcripts.transcript_date)", "score": -6.368622303009033, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts", "score": -6.68010139465332, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT * FROM Addresses", "score": -6.696598052978516, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date - Transcripts.transcript_date) FROM Transcripts", "score": -7.333162784576416, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) AS Transcripts.transcript_date FROM Transcripts LIMIT 1", "score": -7.643631458282471, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT * FROM Addresses", "score": -8.192997932434082, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE \"date\"", "score": -8.24875259399414, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts GROUP BY Transcripts.transcript_date", "score": -8.282075881958008, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE \"the\"", "score": -8.389796257019043, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE \"transcript\"", "score": -8.39487075805664, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) FROM Transcripts WHERE \"Transcript_Contents\"", "score": -8.461578369140625, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT * FROM Addresses", "score": -8.472419738769531, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}, {"orig_question": "What is the average transcript date?", "inferred_code": "SELECT AVG(Transcripts.transcript_date) AS Transcripts.transcript_date FROM Transcripts", "score": -8.676902770996094, "correct_code": "SELECT avg(transcript_date) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9011884082291053, "gold_bleu_score": 0.7372024927972581}
{"index": 565, "beams": [{"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -4.8126844376383815e-06, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1", "score": -4.017046928405762, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts GROUP BY Transcripts.transcript_date, Transcripts.other_details ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -4.646488666534424, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -4.800595760345459, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -5.137243270874023, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -5.225099563598633, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -5.282606601715088, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -5.335809707641602, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT \"details\"", "score": -5.463561534881592, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -5.537404537200928, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT \"transcript\"", "score": -5.58359432220459, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT \"first\"", "score": -5.609716415405273, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -5.70407772064209, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT \"released\"", "score": -5.8333539962768555, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT \"the\"", "score": -5.87332010269165, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "When is the first transcript released? List the date and details.", "inferred_code": "SELECT * FROM Addresses", "score": -6.054100513458252, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3841080764051873, "gold_bleu_score": 0.5183384976990463}
{"index": 566, "beams": [{"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1", "score": -0.13119935989379883, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -0.3951362669467926, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -3.4525530338287354, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -3.882434844970703, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.219244480133057, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.263411998748779, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY TRANSCRIPTS.TRANSCRIPT_DATE(Transcripts.transcript_date) LIMIT 1", "score": -4.27451753616333, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -4.386257648468018, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.567128658294678, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.other_details)", "score": -4.574023723602295, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date < Transcripts.other_details LIMIT 1", "score": -4.643531322479248, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.956228733062744, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.987991809844971, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT * FROM Addresses", "score": -4.9979329109191895, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date", "score": -5.163711071014404, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}, {"orig_question": "What is the earliest date of a transcript release, and what details can you tell me?", "inferred_code": "SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date < Transcripts.other_details", "score": -5.189263343811035, "correct_code": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3452711937013654, "gold_bleu_score": 0.44046733685218525}
{"index": 567, "beams": [{"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts", "score": 0.0, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Addresses", "score": -5.562066078186035, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts UNION SELECT COUNT(*) FROM Transcripts", "score": -5.656061172485352, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id", "score": -6.097757816314697, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Addresses", "score": -6.110589027404785, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Addresses", "score": -6.749827861785889, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Addresses", "score": -7.013020992279053, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts ORDER BY COUNT(*)", "score": -7.050424098968506, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"Transcript_Contents\"", "score": -7.1936774253845215, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcript_Contents", "score": -7.408779621124268, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"How\"", "score": -7.560449123382568, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Transcripts", "score": -7.643582344055176, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"many\"", "score": -7.774179935455322, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts ORDER BY \"Transcript_Contents\"", "score": -8.409780502319336, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT COUNT(*) AS Transcripts.transcript_id FROM Transcripts", "score": -8.469179153442383, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are released?", "inferred_code": "SELECT * FROM Addresses", "score": -8.492461204528809, "correct_code": "SELECT count(*) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.886740379986275, "gold_bleu_score": 0.7578511049569991}
{"index": 568, "beams": [{"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts", "score": -1.0586648357957529e-07, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -5.790074348449707, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id", "score": -6.137248992919922, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE TRANSCRIPT_CONTENTS(Transcripts.transcript_id)", "score": -6.580580234527588, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Transcripts", "score": -6.906828880310059, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -7.1633620262146, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -7.212544918060303, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"How\"", "score": -7.377041339874268, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -7.399542808532715, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) AS Transcripts.transcript_id FROM Transcripts", "score": -7.682222366333008, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"many\"", "score": -7.734177112579346, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts WHERE \"Transcript_Contents\"", "score": -7.858141899108887, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts GROUP BY Transcripts.transcript_id", "score": -8.119866371154785, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts ORDER BY Transcripts.transcript_id", "score": -8.52834415435791, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT * FROM Addresses", "score": -8.667695999145508, "correct_code": "SELECT count(*) FROM Transcripts"}, {"orig_question": "How many transcripts are listed?", "inferred_code": "SELECT COUNT(*) FROM Transcripts AS 0", "score": -8.668212890625, "correct_code": "SELECT count(*) FROM Transcripts"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9651401939846148, "gold_bleu_score": 0.7931598164713731}
{"index": 569, "beams": [{"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -6.71843690724927e-06, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts WHERE Transcripts.transcript_date = (SELECT MAX(Transcripts.transcript_date) FROM Transcripts)", "score": -4.400865077972412, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -5.796197891235352, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC", "score": -5.922796249389648, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -6.155075550079346, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts UNION SELECT Transcripts.transcript_date FROM Transcripts", "score": -6.176589012145996, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts WHERE Transcripts.transcript_date = \"VALUE\"", "score": -6.375992774963379, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts", "score": -6.4856462478637695, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -6.705511569976807, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -6.928581714630127, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT MAX(Transcripts.transcript_date) FROM Transcripts", "score": -7.089910984039307, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts EXCEPT SELECT Transcripts.transcript_date FROM Transcripts", "score": -7.1364850997924805, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT \"last\"", "score": -7.185806751251221, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -7.186922550201416, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -7.550065994262695, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "What is the last transcript release date?", "inferred_code": "SELECT * FROM Addresses", "score": -7.730348110198975, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.38673867688154984, "gold_bleu_score": 0.4665480317257385}
{"index": 570, "beams": [{"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -0.0007396240253001451, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT MAX(Transcripts.transcript_date) FROM Transcripts", "score": -2.785842180252075, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -3.3996665477752686, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts WHERE Transcripts.transcript_date = (SELECT MAX(Transcripts.transcript_date) FROM Transcripts)", "score": -4.548512935638428, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT * FROM Addresses", "score": -4.5490946769714355, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT COUNT(*) FROM Transcripts", "score": -4.704904079437256, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -4.745386600494385, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT MAX(Transcripts.transcript_date) FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -4.746596813201904, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT DISTINCT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -4.778594970703125, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts GROUP BY Transcripts.transcript_date ORDER BY COUNT(*) DESC LIMIT 1", "score": -5.092174530029297, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT * FROM Addresses", "score": -5.232189655303955, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts WHERE Transcripts.transcript_date = (SELECT MAX(Transcripts.transcript_date) FROM Transcripts) ORDER BY Transcripts.transcript_date DESC LIMIT 1", "score": -5.915016174316406, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT * FROM Addresses", "score": -6.199646949768066, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1", "score": -6.219876766204834, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT * FROM Addresses", "score": -6.415374755859375, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}, {"orig_question": "When was the last transcript released?", "inferred_code": "SELECT SUM(Transcripts.transcript_date) FROM Transcripts", "score": -7.297402381896973, "correct_code": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.27570469793323826, "gold_bleu_score": 0.32804037198331326}
{"index": 577, "beams": [{"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students", "score": -9.54925212681701e-07, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -4.286021709442139, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students WHERE Students.student_id IN (SELECT DISTINCT Students.permanent_address_id FROM Students)", "score": -4.562579154968262, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students WHERE Students.student_id IN (SELECT Students.permanent_address_id FROM Students)", "score": -4.6528639793396, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students ORDER BY COUNT(DISTINCT Students.permanent_address_id)", "score": -4.984934329986572, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students WHERE Students.student_id IN (SELECT DISTINCT Students.current_address_id FROM Students)", "score": -5.102522373199463, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students UNION SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students", "score": -5.177890777587891, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students UNION SELECT COUNT(DISTINCT Students.student_id) FROM Students", "score": -5.216841697692871, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students ORDER BY COUNT(DISTINCT Students.student_id)", "score": -5.28084135055542, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students WHERE Students.student_id IN (SELECT Students.current_address_id FROM Students)", "score": -5.310653209686279, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.current_address_id) FROM Students", "score": -5.805970191955566, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students WHERE Students.student_id", "score": -5.9851789474487305, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.permanent_address_id) FROM Students ORDER BY COUNT(DISTINCT Students.current_address_id)", "score": -6.060790061950684, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.email_address) FROM Students", "score": -6.091105937957764, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT COUNT(DISTINCT Students.email_address) FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -6.276060581207275, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "How many different addresses do the students currently live?", "inferred_code": "SELECT * FROM Addresses", "score": -6.332709789276123, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8243186430565044, "gold_bleu_score": 0.6971576525612416}
{"index": 578, "beams": [{"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -0.11704813688993454, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -0.6588201522827148, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.email_address FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -0.8114268183708191, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.email_address FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -1.1557399034500122, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.other_address_details FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -1.4883924722671509, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.permanent_address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -1.565866231918335, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.permanent_address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -1.756728172302246, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -1.9017376899719238, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.other_address_details FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -1.9891924858093262, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -2.1956825256347656, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -2.914787769317627, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT * FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -3.0534701347351074, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.ssn FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -3.1959590911865234, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id", "score": -3.2736878395080566, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -3.365323781967163, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}, {"orig_question": "What are the different addresses that have students living there?", "inferred_code": "SELECT DISTINCT Students.ssn FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id", "score": -3.664210557937622, "correct_code": "SELECT count(DISTINCT current_address_id) FROM Students"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5534644071068087, "gold_bleu_score": 0.5420545705962386}
{"index": 581, "beams": [{"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\"", "score": -9.756680810824037e-05, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name LIKE \"h %\"", "score": -2.8295364379882812, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name LIKE \"% h %\"", "score": -3.4164633750915527, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_name FROM Sections WHERE Sections.section_name = \"h\"", "score": -3.799407482147217, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_description = \"h\"", "score": -4.050706386566162, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name != \"h\"", "score": -5.659840106964111, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_description LIKE \"h %\"", "score": -5.814236164093018, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_id = \"h\"", "score": -5.86187219619751, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.other_details = \"h\"", "score": -5.937546253204346, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT * FROM Addresses", "score": -5.952922344207764, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE \"Transcript_Contents\" = \"h\"", "score": -6.07120943069458, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE \"Departments\" = \"h\"", "score": -6.114470958709717, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT * FROM Addresses", "score": -6.126928806304932, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_id = \"h\"", "score": -6.545989513397217, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_name FROM Sections WHERE Sections.section_name LIKE \"h %\"", "score": -6.677543640136719, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "Describe the section h.", "inferred_code": "SELECT Sections.section_id FROM Sections WHERE Sections.section_name = \"h\"", "score": -7.126654148101807, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7334850626543976, "gold_bleu_score": 0.2762452251459532}
{"index": 582, "beams": [{"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\"", "score": 0.0, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -4.212280750274658, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\" EXCEPT SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\"", "score": -4.3932905197143555, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -4.646244049072266, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections JOIN Sections ON Sections.section_id = Sections.course_id WHERE Sections.section_name = \"h\"", "score": -4.830249309539795, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\" AND Sections.section_id = \"h\"", "score": -4.950879096984863, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections JOIN Sections ON Sections.section_id = Sections.section_id WHERE Sections.section_name = \"h\"", "score": -5.200882434844971, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\" AND Sections.section_description = \"h\"", "score": -5.445510387420654, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\" OR Sections.section_name = \"h\"", "score": -5.542529582977295, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -5.775116920471191, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -6.350281238555908, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\" ORDER BY Sections.section_description", "score": -6.662725448608398, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -6.730942726135254, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT * FROM Addresses", "score": -7.0485520362854, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description FROM Sections WHERE Sections.section_name = \"h\"", "score": -7.048555850982666, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}, {"orig_question": "What is the description for the section named h?", "inferred_code": "SELECT Sections.section_description, Sections.other_details FROM Sections WHERE Sections.section_name = \"h\"", "score": -7.100014686584473, "correct_code": "SELECT section_description FROM Sections WHERE section_name  =  'h'"}], "db_name": "student_transcripts_tracking", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8689117895157461, "gold_bleu_score": 0.6176404835438398}
{"index": 587, "beams": [{"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": 0.0, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": -3.972428321838379, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" AND Cartoon.id = \"Ben Jones\"", "score": -4.331137657165527, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.id WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": -4.459531307220459, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.052565097808838, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.110175609588623, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.112386703491211, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.316795825958252, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.714136123657227, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.1956682205200195, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" ORDER BY Cartoon.Title", "score": -6.486350059509277, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.490303039550781, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.565587520599365, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.610232830047607, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon GROUP BY Cartoon.Directed_by = \"Ben Jones\"", "score": -7.118628025054932, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "List all cartoon directed by \"Ben Jones\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by != \"Ben Jones\"", "score": -7.120864391326904, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6653621167032923, "gold_bleu_score": 0.3726627484061218}
{"index": 588, "beams": [{"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": -3.9939038742886623e-08, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": -3.9796054363250732, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.id WHERE Cartoon.Directed_by = \"Ben Jones\"", "score": -4.2412214279174805, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" AND Cartoon.id = \"Ben Jones\"", "score": -4.3981733322143555, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\" AND Cartoon.Directed_by = \"Ben Jones\"", "score": -4.434165000915527, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.762008190155029, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.864038467407227, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.893192291259766, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.943957328796387, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.965794086456299, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.006394386291504, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.071457386016846, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.2254438400268555, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.3546342849731445, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.463165760040283, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}, {"orig_question": "What are the names of all cartoons directed by Ben Jones?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.727137565612793, "correct_code": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8028298157652598, "gold_bleu_score": 0.6754959358084999}
{"index": 589, "beams": [{"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.199180653723488e-08, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.2276766300201416, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" AND Cartoon.id = \"Joseph Kuhr\"", "score": -3.7610416412353516, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.Title = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.817979097366333, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.Channel = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.926346778869629, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" OR Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.93992018699646, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" AND Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.963850975036621, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.9893100261688232, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.Written_by = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -4.273861408233643, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Joseph Kuhr\"", "score": -4.682936668395996, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Ku Kuhr\"", "score": -4.742807388305664, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -4.866029262542725, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" AND Cartoon.id", "score": -5.127477645874023, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhrhr\"", "score": -5.218685626983643, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.316747188568115, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "How many cartoons were written by \"Joseph Kuhr\"?", "inferred_code": "SELECT COUNT(*) AS Cartoon.id FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -5.343011856079102, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8634870850004596, "gold_bleu_score": 0.6241171091618584}
{"index": 590, "beams": [{"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -6.398361307446976e-08, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" EXCEPT SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.0861527919769287, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.1501734256744385, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" AND Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.671489715576172, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" OR Cartoon.Written_by = \"Joseph Kuhr\"", "score": -3.8465688228607178, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.Channel = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -4.020206928253174, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon JOIN Cartoon ON Cartoon.Written_by = Cartoon.id WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -4.181512832641602, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.215631008148193, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" ORDER BY COUNT(*)", "score": -4.308750152587891, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Joseph Kuhr\"", "score": -4.37172794342041, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Ku Kuhr\"", "score": -4.8787431716918945, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" ORDER BY Cartoon.Written_by", "score": -4.955755233764648, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\" EXCEPT SELECT Cartoon.Written_by FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhr\"", "score": -5.0311279296875, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.140888690948486, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.242745399475098, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}, {"orig_question": "What is the number of cartoones written by Joseph Kuhr?", "inferred_code": "SELECT COUNT(*) FROM Cartoon WHERE Cartoon.Written_by = \"Joseph Kuhrhr\"", "score": -5.281006813049316, "correct_code": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9292565699465223, "gold_bleu_score": 0.5344317309480653}
{"index": 597, "beams": [{"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -1.417674411641201e-05, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.570310592651367, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_Channel", "score": -3.0237059593200684, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_series JOIN TV_Channel ON TV_series.id = TV_Channel.id", "score": -3.1653048992156982, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id", "score": -3.3754968643188477, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.414792537689209, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id", "score": -3.885885715484619, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id", "score": -3.891627788543701, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id), TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -3.9180908203125, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT TV_Channel.series_name, COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -3.9999887943267822, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_series JOIN TV_Channel ON TV_series.id = TV_Channel.id", "score": -4.127981185913086, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -4.173626899719238, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT TV_Channel.series_name, COUNT(DISTINCT TV_Channel.series_name), DISTINCT COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -4.222689628601074, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT TV_Channel.series_name, COUNT(DISTINCT TV_Channel.series_name), SUM(TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -4.259302616119385, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT TV_Channel.series_name, COUNT(DISTINCT TV_Channel.series_name), DISTINCT COUNT(*) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -4.275565147399902, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "List the number of different series names and contents in the TV Channel table.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.281275749206543, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7600208431061083, "gold_bleu_score": 0.6052061209825838}
{"index": 598, "beams": [{"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -0.00010111328447237611, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -2.2648165225982666, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_Channel", "score": -2.604175567626953, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id", "score": -2.7561733722686768, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id), TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -3.0348920822143555, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), SUM(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -3.391103506088257, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -3.481050491333008, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id", "score": -3.4922420978546143, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), SUM(TV_Channel.Content) FROM TV_Channel GROUP BY TV_Channel.series_name", "score": -3.9325850009918213, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.08475399017334, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.id) FROM TV_Channel", "score": -4.164463520050049, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), AVG(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -4.233434200286865, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), TV_Channel.Content FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id", "score": -4.336211204528809, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), DISTINCT COUNT(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -4.430500030517578, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), TV_Channel.Content FROM TV_Channel", "score": -4.5682477951049805, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}, {"orig_question": "How many different series and contents are listed in the TV Channel table?", "inferred_code": "SELECT COUNT(DISTINCT TV_Channel.series_name), T(DISTINCT TV_Channel.Content) FROM TV_Channel", "score": -4.701483249664307, "correct_code": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7555691620215831, "gold_bleu_score": 0.47176285029004245}
{"index": 599, "beams": [{"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -9.984759685721656e-08, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" EXCEPT SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.7580835819244385, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.id JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.0265631675720215, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.588425159454346, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.747567176818848, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" OR TV_Channel.series_name = \"Sky Radio\"", "score": -4.897145748138428, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.034385681152344, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -5.1213178634643555, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.495673179626465, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.619822978973389, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.851833343505859, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.030718803405762, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio Radio\"", "score": -6.465805530548096, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -6.525172233581543, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"name Sky Radio\"", "score": -6.585500717163086, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.698104381561279, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9655277729514021, "gold_bleu_score": 0.5875000069785175}
{"index": 600, "beams": [{"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.1167750219319714e-06, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.961491346359253, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.503054141998291, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_series JOIN TV_series ON TV_series.id = TV_series.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.5072035789489746, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.6988635063171387, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" EXCEPT SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.975855588912964, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.173529624938965, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.309933662414551, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.44304084777832, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.937819004058838, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -5.7002177238464355, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.146949291229248, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.416970252990723, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.606746673583984, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.845040321350098, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the content of the series Sky Radio?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name != \"Sky Radio\"", "score": -7.0682806968688965, "correct_code": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5081903224113582, "gold_bleu_score": 0.549837587815162}
{"index": 601, "beams": [{"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.9969515818729633e-08, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.6834466457366943, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.368120193481445, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.612175941467285, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" OR TV_Channel.series_name = \"Sky Radio\"", "score": -4.849096298217773, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.994718074798584, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.165527820587158, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.232000827789307, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.729433536529541, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.7419867515563965, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"name Sky Radio\"", "score": -5.993261814117432, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.080880165100098, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -6.298519611358643, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio Radio\"", "score": -6.317262649536133, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT \"TV_Channel.Package_Option.TV_Channel.Country\" FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -6.343815326690674, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.463275909423828, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.5507300836780217}
{"index": 602, "beams": [{"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.7853224562713876e-05, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.4002304077148438, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.685450315475464, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.8079607486724854, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" INTERSECT SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.071602821350098, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.545372009277344, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -4.618711471557617, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.932210445404053, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -5.963008403778076, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"names Sky Radio\"", "score": -5.965852737426758, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.353743076324463, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.432006359100342, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio\" ORDER BY TV_Channel.Package_Option", "score": -6.4900641441345215, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = \"Sky Radio Radio\"", "score": -6.647724151611328, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.663267612457275, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}, {"orig_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "inferred_code": "SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name != \"Sky Radio\"", "score": -7.282284259796143, "correct_code": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9707742670379383, "gold_bleu_score": 0.7582430003562171}
{"index": 603, "beams": [{"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -1.7768373439253082e-08, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"English\"", "score": -3.911940097808838, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Language = \"English\"", "score": -4.391615390777588, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"many\"", "score": -4.633932113647461, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"?\"", "score": -4.646936416625977, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT \"VALUE\" AS select count (*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -4.888174057006836, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT 10 AS select count (*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.228756427764893, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.284904956817627, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.385636806488037, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.44272518157959, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.471852779388428, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English : VALUE\"", "score": -5.555164813995361, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.573209285736084, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.637629508972168, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language = \"English\"", "score": -5.767392158508301, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channel using language English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.811122894287109, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.4937247781565983}
{"index": 604, "beams": [{"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.3305129199543444e-08, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"English\"", "score": -3.8344480991363525, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"?\"", "score": -3.952927589416504, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"many\"", "score": -4.263674736022949, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = \"use\"", "score": -4.288288116455078, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\" OR TV_Channel.Language = language", "score": -4.382809162139893, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.Language = \"English\"", "score": -4.486304759979248, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.746470928192139, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT \"VALUE\" AS select count (*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.015468597412109, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.382462978363037, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language = \"English\"", "score": -5.575234413146973, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.5831780433654785, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) AS TV_Channel.id FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.620121002197266, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.624279499053955, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Language = \"English :\"", "score": -5.672226905822754, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}, {"orig_question": "How many TV Channels use the English language?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.751462459564209, "correct_code": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9563411962313713, "gold_bleu_score": 0.6010060092463945}
{"index": 609, "beams": [{"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"", "score": -0.9484698176383972, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"", "score": -1.8318428993225098, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"", "score": -2.2023680210113525, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"", "score": -2.4022693634033203, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle !\"", "score": -2.4767017364501953, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.0414657592773438, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.2948224544525146, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.4410018920898438, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.6868484020233154, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.7214877605438232, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.030237674713135, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.119864463806152, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.1399664878845215, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.231655597686768, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.264296054840088, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.353749752044678, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7533405568494755, "gold_bleu_score": 0.57545563256429}
{"index": 610, "beams": [{"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -0.9440356492996216, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.295621395111084, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.6020289659500122, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.6292119026184082, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.6837527751922607, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.7095190286636353, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -1.7634649276733398, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -2.0153608322143555, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN Cartoon ON Cartoon.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Beetle\"", "score": -2.027488946914673, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.id = \"the Rise of the Blue Beetle\"", "score": -2.3179171085357666, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM Cartoon JOIN Cartoon ON Cartoon.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Blue Beetle\"", "score": -3.3223965167999268, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Blue Beetle\"", "score": -3.7096967697143555, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.760112762451172, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Blue Beetle\"", "score": -3.7763254642486572, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"the Rise of the Blue Blue Beetle\"", "score": -3.7860546112060547, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}, {"orig_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = \"the Rise of the Blue Blue Beetle\"", "score": -3.8649978637695312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7822666379301297, "gold_bleu_score": 0.6337944660290814}
{"index": 611, "beams": [{"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.21911568939685822, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.id = Cartoon.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.24917270243167877, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -0.4068494737148285, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.746354877948761, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.id = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.2448385953903198, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.id = Cartoon.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.3149369955062866, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.5131816864013672, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.9281675815582275, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.359675884246826, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.368077516555786, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.394984483718872, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.439749240875244, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.451606512069702, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.4578914642333984, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.609450578689575, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.595160961151123, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8769523446917574, "gold_bleu_score": 0.5576384257734127}
{"index": 612, "beams": [{"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.5022140145301819, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.7747750878334045, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.6357043981552124, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.8251402378082275, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.850019097328186, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.8509728908538818, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.0047781467437744, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.1048943996429443, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.232813596725464, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.2789974212646484, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT TV_Channel.Content FROM TV_series JOIN TV_series ON TV_series.id = TV_series.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.331225872039795, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.3659605979919434, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.id = Cartoon.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.370736598968506, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.4503021240234375, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.4720399379730225, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.588242530822754, "correct_code": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7323937351218286, "gold_bleu_score": 0.555108349411815}
{"index": 617, "beams": [{"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT MIN(TV_series.Share), MAX(TV_series.Share) FROM TV_series", "score": -3.761256550660619e-08, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT MIN(TV_series.Share) FROM TV_series INTERSECT SELECT MAX(TV_series.Share) FROM TV_series", "score": -4.7448201179504395, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.821715831756592, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT MAX(TV_series.Share) FROM TV_series", "score": -5.193858623504639, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.227046012878418, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.380463123321533, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.510727405548096, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT MIN(TV_series.Share), \"max\" AS (TV_series.Share) FROM TV_series", "score": -5.64651346206665, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.675450325012207, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.82366943359375, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.950085639953613, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT AVG(TV_series.Share), MAX(TV_series.Share) FROM TV_series", "score": -5.987870693206787, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT MIN(TV_series.Share) FROM TV_series", "score": -6.104506492614746, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.162265300750732, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.2443366050720215, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is minimum and maximum share of TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.246847629547119, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8394010185508756, "gold_bleu_score": 0.6974483528086121}
{"index": 618, "beams": [{"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share), MIN(TV_series.Share) FROM TV_series", "score": -3.761256550660619e-08, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.786253929138184, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share), MIN(TV_series.Share) FROM TV_series", "score": -5.006954193115234, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share) FROM TV_series", "score": -5.161272048950195, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share), MIN(TV_series.Share) FROM TV_series GROUP BY TV_series.Share", "score": -5.421041011810303, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share), MIN(TV_series.Share) FROM TV_series GROUP BY share", "score": -5.475294589996338, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.719961643218994, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.7784037590026855, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MIN(TV_series.Share) FROM TV_series", "score": -5.890841960906982, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT MAX(TV_series.Share), \"min\" AS (TV_series.Share) FROM TV_series", "score": -5.89134407043457, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.0045552253723145, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.041866779327393, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.1246337890625, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.128569602966309, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.177768230438232, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}, {"orig_question": "What is the maximum and minimum share for the TV series?", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.2165751457214355, "correct_code": "SELECT max(SHARE) , min(SHARE) FROM TV_series"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7967243348549811, "gold_bleu_score": 0.7342721385297863}
{"index": 619, "beams": [{"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.377550624212745e-07, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" EXCEPT SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.252420425415039, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -3.617464780807495, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" OR TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.623699426651001, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" AND TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.8514909744262695, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_series ON TV_series.id = TV_series.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.242669582366943, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.377610683441162, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.4139533042907715, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Air_Date WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.420023441314697, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -4.57020902633667, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.012871265411377, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.020378112792969, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of of A Lifetime\"", "score": -5.170773029327393, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A of A Lifetime\"", "score": -5.2686357498168945, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT \"TV_series.Air_Date.What\" FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.424330234527588, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.580023288726807, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8187941263408548, "gold_bleu_score": 0.6223839585439366}
{"index": 620, "beams": [{"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.367344447724463e-08, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.329374074935913, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.371826171875, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.4045302867889404, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" OR TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.815699577331543, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_series ON TV_series.Channel = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.8979058265686035, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -4.365708827972412, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.396496295928955, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -4.960455417633057, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.132160186767578, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date, TV_series.Episode FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.267838478088379, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of of A Lifetime\"", "score": -5.268044471740723, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" ORDER BY TV_series.Air_Date", "score": -5.317183494567871, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.400796890258789, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.411520957946777, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "When did the episode \"A Love of a Lifetime\" air?", "inferred_code": "SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A of A Lifetime\"", "score": -5.4207916259765625, "correct_code": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.27899525613662846, "gold_bleu_score": 0.42030971496667285}
{"index": 621, "beams": [{"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -2.693876126613759e-07, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" OR TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.749006509780884, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -3.7715907096862793, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" AND TV_series.id = \"A Love of A Lifetime\"", "score": -3.8027639389038086, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.851040840148926, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Air_Date WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.883915662765503, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.283779621124268, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.34967041015625, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -4.504500389099121, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.051826000213623, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of of A Lifetime\"", "score": -5.095971584320068, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A of A Lifetime\"", "score": -5.134262561798096, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT \"TV_series.Weekly_Rank.TV_series.Air_Date\" FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.356429100036621, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.424631118774414, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank, TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.457005977630615, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.532884120941162, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8660925463249335, "gold_bleu_score": 0.5556096089165448}
{"index": 622, "beams": [{"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -2.0204066686346778e-07, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.9103941917419434, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.0890557765960693, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.7022318840026855, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" AND TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.7402961254119873, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" OR TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.813443422317505, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -3.8624444007873535, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\" AND TV_series.id = \"A Love of A Lifetime\"", "score": -3.9180617332458496, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Air_Date WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -4.063311576843262, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -4.332137107849121, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.74310302734375, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love of of A Lifetime\"", "score": -5.166839122772217, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT \"TV_series.Weekly_Rank.TV_series.Air_Date\" FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.294751167297363, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank, TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -5.419607639312744, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A Love Love of A Lifetime\"", "score": -5.552131175994873, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = \"A of A Lifetime\"", "score": -5.625295639038086, "correct_code": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5436189484126058, "gold_bleu_score": 0.5724623879867783}
{"index": 623, "beams": [{"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -0.003507198067381978, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -0.9341591000556946, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.2201241254806519, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.6404471397399902, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -2.7809395790100098, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -3.3342692852020264, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Air_Date WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.3393845558166504, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.id = TV_Channel.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.4145045280456543, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A of A Lifetime\"", "score": -3.460679531097412, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.490605115890503, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A Love A Lifetime\"", "score": -3.5185446739196777, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = \"A A of A Lifetime\"", "score": -3.6361067295074463, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.series_name WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -3.6470448970794678, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -3.8189523220062256, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.842510223388672, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.916541814804077, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.724352254487574, "gold_bleu_score": 0.6029997083268289}
{"index": 624, "beams": [{"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -0.13457053899765015, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Air_Date WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -0.9532885551452637, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.0319980382919312, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.id WHERE TV_series.Episode = \"A Love of A Lifetime\"", "score": -1.7160674333572388, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.839800238609314, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.9038944244384766, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.169506072998047, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.3227875232696533, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.3361783027648926, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.3786253929138184, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.545574188232422, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.5533883571624756, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.7480573654174805, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.8290436267852783, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of A A Lifetime\"", "score": -3.149850368499756, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}, {"orig_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "inferred_code": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A A Love of A Lifetime\"", "score": -3.1645114421844482, "correct_code": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.48663653870591206, "gold_bleu_score": 0.496484935318018}
{"index": 625, "beams": [{"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.03703879937529564, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -0.47811245918273926, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.6471476554870605, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.7199978828430176, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.863659143447876, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.217759609222412, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.320176124572754, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_series ON TV_series.id = TV_series.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -3.578505277633667, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.634172201156616, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"name Sky Radio\"", "score": -3.681635856628418, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.101938247680664, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.131243705749512, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.39678430557251, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -4.503423690795898, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.592576503753662, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.621832370758057, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9051214479754917, "gold_bleu_score": 0.5795254500038503}
{"index": 626, "beams": [{"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -0.003483206033706665, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.id WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.131160020828247, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.3718558549880981, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_series ON TV_series.id = TV_series.id JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -1.7805899381637573, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.7828010320663452, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\"", "score": -2.5356156826019287, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.6207120418548584, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.0293405055999756, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Radio\" AND TV_series.Share = \"Sky Radio\"", "score": -3.476008653640747, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.5390002727508545, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.553753137588501, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.701451301574707, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.234390735626221, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = \"Sky Sky Radio\"", "score": -4.329468250274658, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.387357234954834, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}, {"orig_question": "What is the episode for the TV series named \"Sky Radio\"?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.635031223297119, "correct_code": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.66635368219925, "gold_bleu_score": 0.4600286836572555}
{"index": 629, "beams": [{"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.140575885772705, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.644804000854492, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel ORDER BY TV_series.Air_Date DESC LIMIT 1", "score": -4.699686527252197, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.800073623657227, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.9514055252075195, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.051678657531738, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -5.094752311706543, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.277684688568115, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.492448329925537, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.499051094055176, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.505438327789307, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.556172847747803, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id ORDER BY TV_series.Air_Date DESC LIMIT 1", "score": -5.758829116821289, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.837716579437256, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.051025867462158, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "Find the production code and channel of the most recently aired cartoon .", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.804625511169434, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6659561193337052, "gold_bleu_score": 0.5876378936109142}
{"index": 630, "beams": [{"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -4.217701280140318e-05, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)", "score": -2.521498918533325, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN Cartoon ON Cartoon.Original_air_date = Cartoon.Channel WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)", "score": -3.1248364448547363, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Original_air_date, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -3.130976438522339, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.2492501735687256, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.746490716934204, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date LIMIT 1", "score": -3.9595375061035156, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.4262213706970215, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1 INTERSECT SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon", "score": -4.491682052612305, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN Cartoon ON Cartoon.Original_air_date = Cartoon.Channel ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -4.513892650604248, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Original_air_date, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)", "score": -4.618982791900635, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.621706962585449, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -4.854445934295654, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.9878153800964355, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1", "score": -5.115857124328613, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}, {"orig_question": "What is the produdction code and channel of the most recent cartoon ?", "inferred_code": "SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY (Cartoon.Original_air_date - Cartoon.Original_air_date) DESC LIMIT 1", "score": -5.130792617797852, "correct_code": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7225616738605884, "gold_bleu_score": 0.57933390014657}
{"index": 631, "beams": [{"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"", "score": -0.01007044967263937, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high TV\"", "score": -0.8185909986495972, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -0.8497167825698853, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high high TV\"", "score": -1.684962511062622, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.7449921369552612, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.7455755472183228, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.1398608684539795, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.244783878326416, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high high definition TV\"", "score": -2.4619288444519043, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.503638744354248, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.691545009613037, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"has definition TV\"", "score": -2.8642148971557617, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"has high TV\"", "score": -2.8716089725494385, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.921520948410034, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = channel", "score": -3.094008684158325, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "Find the package choice and series name of the TV channel that has high definition TV.", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"TV\"", "score": -3.181844472885132, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6522292074812286, "gold_bleu_score": 0.5990018068392569}
{"index": 632, "beams": [{"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"", "score": -0.0065618217922747135, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -0.6893397569656372, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.028406023979187, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.2053346633911133, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"", "score": -1.3221607208251953, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.449853539466858, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high TV\"", "score": -1.5565035343170166, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.5811939239501953, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_series ON TV_series.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"", "score": -1.6517002582550049, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.7111259698867798, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.7170016765594482, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.id WHERE TV_Channel.Hight_definition_TV = \"high definition TV\"", "score": -1.797028660774231, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.8287476301193237, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.0224227905273438, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"high high TV\"", "score": -2.322432279586792, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}, {"orig_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "inferred_code": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = \"supports definition TV\"", "score": -2.3374524116516113, "correct_code": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5809247899554176, "gold_bleu_score": 0.6384609946238028}
{"index": 633, "beams": [{"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -0.010412123054265976, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -0.775128960609436, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -2.225027322769165, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.9436681270599365, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -2.981367349624634, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.1486599445343018, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.1611344814300537, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\" AND Cartoon.Channel = \"Todd Casey\"", "score": -3.571242570877075, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.7195332050323486, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -3.828871011734009, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\" INTERSECT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -3.9652578830718994, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\" EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -4.000621318817139, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.Country WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -4.316094398498535, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.414358615875244, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.561391830444336, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.809803485870361, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8975655758413638, "gold_bleu_score": 0.6056276831636132}
{"index": 634, "beams": [{"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -0.08742537349462509, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -0.2974032461643219, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.4335277080535889, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.5846160650253296, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -1.682402491569519, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON TV_Channel.id = Cartoon.id WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -2.131260871887207, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.3917229175567627, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -2.6725070476531982, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.id = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -2.864036798477173, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"", "score": -2.9384632110595703, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.1016952991485596, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.2838804721832275, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.596572160720825, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = \"Todd Casey\" AND Cartoon.id = \"Todd Casey\"", "score": -3.622282028198242, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.7280333042144775, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}, {"orig_question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.791428804397583, "correct_code": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7366886261518147, "gold_bleu_score": 0.6089178928720825}
{"index": 639, "beams": [{"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"English\"", "score": -2.2567539303963713e-07, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Language = \"English\")", "score": -3.4654769897460938, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"English\" EXCEPT SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -3.5612542629241943, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.Language != \"English\"", "score": -4.336794376373291, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.Pixel_aspect_ratio_PAR FROM TV_Channel WHERE TV_Channel.Language = \"English\")", "score": -4.590986728668213, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.696125507354736, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.739581108093262, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"English\" AND TV_Channel.Country != \"English\"", "score": -4.751179218292236, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"not English\"", "score": -5.394007205963135, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.485318183898926, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.592705726623535, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.686400413513184, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"use English\"", "score": -5.852768421173096, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"do English\"", "score": -5.942696571350098, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.95094108581543, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "inferred_code": "SELECT * FROM TV_Channel", "score": -6.11782169342041, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6741155191972883, "gold_bleu_score": 0.5737591607381807}
{"index": 640, "beams": [{"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"English\"", "score": -3.3851313219201984e-07, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"English\" EXCEPT SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -3.5660011768341064, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Language = \"English\")", "score": -3.573805809020996, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -3.6995022296905518, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.303256988525391, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -4.320095539093018, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.Language != \"English\"", "score": -4.3300981521606445, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Pixel_aspect_ratio_PAR NOT LIKE \"% English %\"", "score": -4.993881702423096, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.001079082489014, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Language FROM TV_Channel WHERE TV_Channel.Language != \"English\"", "score": -5.240166664123535, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.535653591156006, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != \"not English\"", "score": -5.6078386306762695, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language = \"English\"", "score": -5.6189799308776855, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.753772735595703, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.871828556060791, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}, {"orig_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "inferred_code": "SELECT * FROM TV_Channel", "score": -5.929588317871094, "correct_code": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"}], "db_name": "tvshow", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5835396064962934, "gold_bleu_score": 0.5742073691571333}
{"index": 647, "beams": [{"orig_question": "How many poker players are there?", "inferred_code": "SELECT COUNT(*) FROM poker_player", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT COUNT(*) FROM poker_player ORDER BY COUNT(*)", "score": -6.678171157836914, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.05017614364624, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.176491737365723, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.215408802032471, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.448574066162109, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.479423999786377, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.4859938621521, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.546562194824219, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT COUNT(*) FROM poker_player ORDER BY poker_player.Poker_Player_ID", "score": -7.742371559143066, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT COUNT(*) FROM poker_player WHERE \"How\"", "score": -8.074586868286133, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -8.127010345458984, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -8.237627029418945, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM poker_player", "score": -8.25014591217041, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -8.357707023620605, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "How many poker players are there?", "inferred_code": "SELECT * FROM poker_player", "score": -8.559978485107422, "correct_code": "SELECT count(*) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 648, "beams": [{"orig_question": "Count the number of poker players.", "inferred_code": "SELECT COUNT(*) FROM poker_player", "score": 0.0, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -6.500609874725342, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -6.511817455291748, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT COUNT(*) FROM poker_player ORDER BY COUNT(*)", "score": -6.704338073730469, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -7.473307132720947, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -7.543666362762451, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -7.610232353210449, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT COUNT(*) FROM poker_player ORDER BY poker_player.Poker_Player_ID", "score": -7.715466022491455, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT COUNT(*) FROM poker_player WHERE \"the\"", "score": -7.9168314933776855, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -7.951401710510254, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.25716781616211, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.282177925109863, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.561182022094727, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.588540077209473, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT T(*) FROM poker_player", "score": -9.159404754638672, "correct_code": "SELECT count(*) FROM poker_player"}, {"orig_question": "Count the number of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -9.439068794250488, "correct_code": "SELECT count(*) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8932087248858315, "gold_bleu_score": 0.5110145823155815}
{"index": 651, "beams": [{"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -0.04780827462673187, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), MAX(poker_player.Best_Finish) FROM poker_player", "score": -0.7940731048583984, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -1.7263092994689941, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT DISTINCT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -2.649412155151367, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), AVG(poker_player.Best_Finish) FROM poker_player", "score": -3.336240291595459, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), MIN(poker_player.Best_Finish) FROM poker_player", "score": -3.496955394744873, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), SUM(poker_player.Best_Finish) FROM poker_player", "score": -4.042008876800537, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Best_Finish) FROM poker_player", "score": -4.112330436706543, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MIN(poker_player.Final_Table_Made), MAX(poker_player.Best_Finish) FROM poker_player", "score": -4.135404109954834, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.053068161010742, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.5480780601501465, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), 2 FROM poker_player", "score": -5.607276439666748, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MIN(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -5.952536582946777, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT MAX(poker_player.Best_Finish), \"best\" FROM poker_player", "score": -6.0839762687683105, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -6.231082916259766, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "List the final tables made and the best finishes of poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -6.44699239730835, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6111659216595836, "gold_bleu_score": 0.7420260743427887}
{"index": 652, "beams": [{"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -0.00035579627729021013, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT DISTINCT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player", "score": -3.253997802734375, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -3.610675096511841, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), MAX(poker_player.Best_Finish) FROM poker_player", "score": -4.519230842590332, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), AVG(poker_player.Best_Finish) FROM poker_player", "score": -5.927910327911377, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made), MIN(poker_player.Best_Finish) FROM poker_player", "score": -6.032081604003906, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT MIN(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -6.148100852966309, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -6.442695140838623, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -6.698302268981934, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -6.7232747077941895, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -6.79439640045166, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT YES(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -6.992715835571289, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -7.036888122558594, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -7.2508087158203125, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT SUM(poker_player.Final_Table_Made), poker_player.Best_Finish FROM poker_player", "score": -7.44387149810791, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}, {"orig_question": "What are the final tables made and best finishes for all poker players?", "inferred_code": "SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player ORDER BY poker_player.Best_Finish", "score": -7.874666690826416, "correct_code": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.603324019769022, "gold_bleu_score": 0.7978375597702146}
{"index": 653, "beams": [{"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player ORDER BY AVG(poker_player.Earnings)", "score": -6.305986404418945, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE \"What\"", "score": -7.536283016204834, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE \"the\"", "score": -7.740188121795654, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -8.08799934387207, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -8.552773475646973, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player AS 0", "score": -8.583823204040527, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player ORDER BY poker_player.Earnings", "score": -8.668724060058594, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -8.717023849487305, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -8.764666557312012, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT AVG(poker_player.Earnings) AS poker_player.People_ID FROM poker_player", "score": -8.777297019958496, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -8.809967041015625, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -9.272539138793945, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -9.321194648742676, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT MAX(poker_player.Earnings) FROM poker_player", "score": -9.527374267578125, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "What is the average earnings of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -9.532299041748047, "correct_code": "SELECT avg(Earnings) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9703044453696142, "gold_bleu_score": 0.8662882412156655}
{"index": 654, "beams": [{"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player", "score": 0.0, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player ORDER BY AVG(poker_player.Earnings)", "score": -7.1778669357299805, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE \"Return\"", "score": -7.186254024505615, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE \"the\"", "score": -7.198130130767822, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE \"average\"", "score": -7.7935709953308105, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player ORDER BY poker_player.Earnings", "score": -7.920350551605225, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player WHERE earnings", "score": -8.06387996673584, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings != poker_player.Earnings) FROM poker_player", "score": -8.192449569702148, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player AS 0", "score": -8.36279582977295, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.571070671081543, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.655661582946777, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -8.665958404541016, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT AVG(poker_player.Earnings) AS poker_player.People_ID FROM poker_player", "score": -8.832361221313477, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -9.253944396972656, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -9.283796310424805, "correct_code": "SELECT avg(Earnings) FROM poker_player"}, {"orig_question": "Return the average earnings across all poker players.", "inferred_code": "SELECT MAX(poker_player.Earnings) FROM poker_player", "score": -9.41959285736084, "correct_code": "SELECT avg(Earnings) FROM poker_player"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.7039614971083282}
{"index": 655, "beams": [{"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -6.832261334466239e-08, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player) ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -3.6047706604003906, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -4.352469444274902, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -5.599735260009766, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player EXCEPT SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -5.61013650894165, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player)", "score": -6.125357627868652, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player GROUP BY poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -6.441532135009766, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -6.499995708465576, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT earnings", "score": -6.758392810821533, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT \"highest\"", "score": -6.9061970710754395, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -6.939074993133545, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -6.972370147705078, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player) ORDER BY poker_player.Earnings DESC LIMIT earnings", "score": -7.015195846557617, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -7.090871334075928, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -7.1574249267578125, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "What is the money rank of the poker player with the highest earnings?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT \"VALUE\"", "score": -7.290215969085693, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8564509368708889, "gold_bleu_score": 0.631458862986117}
{"index": 656, "beams": [{"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -1.024840457830578e-06, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player) ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -2.887939929962158, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = (SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1)", "score": -3.1760764122009277, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = (SELECT poker_player.People_ID FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1)", "score": -3.8055005073547363, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -3.9283230304718018, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -3.938159227371216, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = (SELECT poker_player.People_ID FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1) ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -4.505939960479736, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.Earnings = (SELECT MAX(poker_player.Earnings) FROM poker_player)", "score": -4.6335530281066895, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = (SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1) ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -4.79112434387207, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -5.121061325073242, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -5.296514511108398, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player GROUP BY poker_player.Money_Rank ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -5.3671746253967285, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = 1 ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -5.487284183502197, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -5.748060703277588, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -6.438455104827881, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}, {"orig_question": "Return the money rank of the player with the greatest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -6.505377769470215, "correct_code": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5332733702280358, "gold_bleu_score": 0.5766730243065741}
{"index": 657, "beams": [{"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -5.1717574933718424e-06, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 200000", "score": -2.60853910446167, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player INTERSECT SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -4.154799461364746, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT * FROM poker_player", "score": -4.442734241485596, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Earnings) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -4.500165939331055, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(*) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -4.632305145263672, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000 AND poker_player.People_ID = 200000", "score": -4.664903163909912, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000 ORDER BY MAX(poker_player.Final_Table_Made)", "score": -4.691008567810059, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000 ORDER BY MAX(poker_player.Earnings)", "score": -5.0386786460876465, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings > 200000", "score": -5.285191535949707, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Best_Finish) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -5.4361252784729, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) AS poker_player.Final_Table_Made FROM poker_player WHERE poker_player.Earnings < 200000", "score": -5.48862886428833, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 20000000", "score": -5.51650333404541, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.676941394805908, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.78631591796875, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.980709075927734, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7812226091374971, "gold_bleu_score": 0.5981201271390224}
{"index": 658, "beams": [{"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -2.5652771000750363e-05, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 200000", "score": -2.211160898208618, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player JOIN poker_player ON poker_player.People_ID = poker_player.People_ID WHERE poker_player.Earnings < 200000", "score": -3.2647833824157715, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -3.8808584213256836, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) FROM poker_player JOIN poker_player ON poker_player.People_ID = poker_player.Poker_Player_ID WHERE poker_player.Earnings < 200000", "score": -4.032289028167725, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.444520473480225, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Final_Table_Made) AS poker_player.Final_Table_Made FROM poker_player WHERE poker_player.Earnings < 200000", "score": -4.5638651847839355, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.705448627471924, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.712177753448486, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.717325210571289, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.800705909729004, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.894477367401123, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.014343738555908, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT MAX(poker_player.Earnings) FROM poker_player WHERE poker_player.Earnings < 200000", "score": -5.304002285003662, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.528496742248535, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}, {"orig_question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.599226951599121, "correct_code": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8304554865416428, "gold_bleu_score": 0.49543512090530967}
{"index": 659, "beams": [{"orig_question": "What are the names of poker players?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -1.0641014824841477e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Poker_Player_ID = (SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID)", "score": -3.920994520187378, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = (SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID)", "score": -3.9432129859924316, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -4.040180206298828, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.420454978942871, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.448555946350098, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.601532459259033, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.738238334655762, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.929416656494141, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -4.991088390350342, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.037766456604004, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.046647071838379, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.096139430999756, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.141057968139648, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.142279148101807, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "What are the names of poker players?", "inferred_code": "SELECT * FROM poker_player", "score": -5.418393135070801, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9438185185220014, "gold_bleu_score": 0.6777428726372352}
{"index": 660, "beams": [{"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -1.0641014824841477e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = (SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID)", "score": -3.896515130996704, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Poker_Player_ID = (SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID)", "score": -3.9679548740386963, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -4.044985771179199, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.307190418243408, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.42631721496582, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.546874046325684, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.772218704223633, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.913944721221924, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -4.999899864196777, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.033078193664551, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.062873840332031, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.139665126800537, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.151614189147949, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.4593048095703125, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}, {"orig_question": "Return the names of all the poker players.", "inferred_code": "SELECT * FROM poker_player", "score": -5.5111985206604, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5771897870268136, "gold_bleu_score": 0.5653548727466453}
{"index": 661, "beams": [{"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -1.1197133176210627e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -3.114888906478882, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -3.3041131496429443, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -4.3009467124938965, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 OR poker_player.Earnings > 300000", "score": -4.583169460296631, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 0", "score": -4.695724964141846, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -4.8227858543396, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -5.157139301300049, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.335872173309326, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 0", "score": -5.358955383300781, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.373560905456543, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.440483093261719, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.495799541473389, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 300000", "score": -5.557043075561523, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings HAVING 300000", "score": -5.5843424797058105, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "What are the names of poker players whose earnings is higher than 300000?", "inferred_code": "SELECT * FROM poker_player", "score": -5.611728191375732, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8696818166259002, "gold_bleu_score": 0.6091682173184741}
{"index": 662, "beams": [{"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -1.1197133176210627e-07, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -3.103630781173706, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -3.3661506175994873, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -4.491976261138916, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 AND poker_player.People_ID = 300000", "score": -4.641607761383057, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 0", "score": -4.744508266448975, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000 ORDER BY people.Name", "score": -5.115091800689697, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000", "score": -5.146979808807373, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.157413959503174, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.261882305145264, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 300000", "score": -5.345020771026611, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.394587993621826, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = 300000", "score": -5.410350322723389, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.431655406951904, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT * FROM poker_player", "score": -5.503465175628662, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}, {"orig_question": "Give the names of poker players who have earnings above 300000.", "inferred_code": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 0", "score": -5.624240398406982, "correct_code": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7409638780258475, "gold_bleu_score": 0.49521598673826706}
{"index": 665, "beams": [{"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1", "score": -0.01242797076702118, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -0.8745357394218445, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1", "score": -2.170875072479248, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -2.9917778968811035, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -3.325894355773926, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + people.Name LIMIT 1", "score": -3.5551960468292236, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -3.567575454711914, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -3.62309193611145, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + people.People_ID LIMIT 1", "score": -3.6506378650665283, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + poker_player.Money_Rank LIMIT 1", "score": -3.665811061859131, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + poker_player.Earnings LIMIT 1", "score": -3.692728042602539, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -3.7233455181121826, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -3.9026525020599365, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings <= people.People_ID LIMIT 1", "score": -4.039813995361328, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings", "score": -4.180843830108643, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "What is the birth date of the poker player with the lowest earnings?", "inferred_code": "SELECT * FROM poker_player", "score": -4.18463134765625, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8312624277422237, "gold_bleu_score": 0.6017597719294043}
{"index": 666, "beams": [{"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1", "score": -0.13861632347106934, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -0.25645655393600464, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1", "score": -2.138737440109253, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -2.9311399459838867, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1", "score": -2.9413299560546875, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + poker_player.Money_Rank LIMIT 1", "score": -3.3921079635620117, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -3.4403440952301025, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -3.454698324203491, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + people.Name LIMIT 1", "score": -3.4750068187713623, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + people.People_ID LIMIT 1", "score": -3.579625129699707, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings EXCEPT SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -3.638324499130249, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + poker_player.Earnings LIMIT 1", "score": -3.7193806171417236, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1", "score": -3.7911970615386963, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings", "score": -3.922048807144165, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT * FROM poker_player", "score": -4.001123905181885, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}, {"orig_question": "Return the birth date of the poker player with the lowest earnings.", "inferred_code": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings + people.Height LIMIT 1", "score": -4.032052993774414, "correct_code": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6900743025514242, "gold_bleu_score": 0.5650961358472995}
{"index": 667, "beams": [{"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1", "score": -2.2394269194592198e-07, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -3.5090601444244385, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY poker_player.Money_Rank ORDER BY SUM(people.Height) DESC LIMIT 1", "score": -3.824939489364624, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY poker_player.Money_Rank ORDER BY MAX(people.Height) DESC LIMIT 1", "score": -4.0446085929870605, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player WHERE poker_player.People_ID = (SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1)", "score": -4.07645845413208, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -4.089877605438232, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT MAX(poker_player.Money_Rank) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1", "score": -4.3514790534973145, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -4.412672519683838, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height ASC LIMIT 1", "score": -4.497633934020996, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -4.74574613571167, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT MAX(poker_player.Money_Rank) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID", "score": -4.880007743835449, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -5.065339088439941, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -5.110172748565674, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT \"tallest\"", "score": -5.181168079376221, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC", "score": -5.263525485992432, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "What is the money rank of the tallest poker player?", "inferred_code": "SELECT * FROM poker_player", "score": -5.300431728363037, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7053105860553206, "gold_bleu_score": 0.4695407448995622}
{"index": 668, "beams": [{"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1", "score": -1.759549661528581e-07, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1)", "score": -2.9424924850463867, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -3.2524490356445312, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -3.282191753387451, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -3.68873929977417, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1) ORDER BY people.Height DESC LIMIT 1", "score": -4.177736759185791, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1", "score": -4.335439682006836, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -4.5011067390441895, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Height ORDER BY people.Height DESC LIMIT 1", "score": -4.563521862030029, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height ASC LIMIT 1", "score": -4.690854072570801, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -4.781806945800781, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -4.856045722961426, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT height", "score": -4.944850444793701, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT \"greatest\"", "score": -5.0426225662231445, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1", "score": -5.046047210693359, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}, {"orig_question": "Return the money rank of the poker player with the greatest height.", "inferred_code": "SELECT * FROM poker_player", "score": -5.1045002937316895, "correct_code": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7367430604998852, "gold_bleu_score": 0.5498927273107371}
{"index": 669, "beams": [{"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200", "score": -7.269337487514349e-08, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200", "score": -3.112868309020996, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 OR people.Height > 200", "score": -3.756513833999634, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 ORDER BY AVG(poker_player.Earnings)", "score": -3.984858274459839, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.045543193817139, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 AND 200", "score": -4.293882846832275, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.369693279266357, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY \"average\"", "score": -4.495007514953613, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY people.People_ID", "score": -4.560793399810791, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY 200", "score": -4.567277908325195, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.570150375366211, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 AND \"What\"", "score": -4.5727858543396, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.640717029571533, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.750149726867676, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT * FROM poker_player", "score": -4.806308746337891, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "What is the average earnings of poker players with height higher than 200?", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height < 200", "score": -4.94190788269043, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7149344970068512, "gold_bleu_score": 0.6075229017802984}
{"index": 670, "beams": [{"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200", "score": -8.723205979777049e-08, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200", "score": -3.0639431476593018, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 OR people.Height > 200", "score": -3.4502179622650146, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -3.690568208694458, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 AND people.Height > 200", "score": -3.8278744220733643, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY \"average\"", "score": -3.9855074882507324, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 AND \"average\"", "score": -4.252315998077393, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.271205902099609, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY 200", "score": -4.318666458129883, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.328562259674072, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 AND 200", "score": -4.336795330047607, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200 GROUP BY people.People_ID", "score": -4.353646278381348, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.41782808303833, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.525172710418701, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.5325846672058105, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}, {"orig_question": "Give average earnings of poker players who are taller than 200.", "inferred_code": "SELECT * FROM poker_player", "score": -4.77536153793335, "correct_code": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6290857502614147, "gold_bleu_score": 0.48121880293523145}
{"index": 681, "beams": [{"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\"", "score": -2.1282031070768426e-07, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" EXCEPT SELECT people.Name FROM people WHERE people.Nationality = \"Russia\"", "score": -3.893554449081421, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Nationality = \"Russia\"", "score": -4.920230388641357, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Name != \"Russia\"", "score": -5.078275203704834, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Nationality != \"Russia\"", "score": -5.2555718421936035, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia Russia\"", "score": -5.663602352142334, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -5.877528190612793, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -6.104036331176758, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality = \"Russia\"", "score": -6.254092693328857, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -6.319347858428955, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia : VALUE\"", "score": -6.541001796722412, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -6.544809818267822, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -6.747127532958984, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -7.113396644592285, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT * FROM poker_player", "score": -7.297883987426758, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "Show names of people whose nationality is not \"Russia\".", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality LIKE \"Russia\"", "score": -7.336501121520996, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8695004319285321, "gold_bleu_score": 0.7594054279621877}
{"index": 682, "beams": [{"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\"", "score": -7.448717838087759e-07, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.People_ID IN (SELECT people.Name FROM people WHERE people.Nationality = \"Russia\")", "score": -3.6052234172821045, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" EXCEPT SELECT people.Name FROM people WHERE people.Nationality = \"Russia\"", "score": -3.7054171562194824, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people JOIN people ON people.People_ID = people.People_ID WHERE people.Nationality != \"Russia\"", "score": -4.8076581954956055, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Name != \"Russia\"", "score": -4.946833610534668, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Nationality = \"Russia\"", "score": -5.005244731903076, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.People_ID IN (MOD((SELECT people.Name FROM people WHERE people.Nationality = \"Russia\"), \"Russia\"))", "score": -5.036949157714844, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.People_ID IN (SELECT people.People_ID FROM people WHERE people.Nationality = \"Russia\")", "score": -5.225021839141846, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Nationality != \"Russia\"", "score": -5.239612579345703, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT * FROM poker_player", "score": -5.2501091957092285, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.People_ID IN (MOD((SELECT people.Name FROM people WHERE people.Nationality = \"Russia\"), \"What\"))", "score": -5.358424186706543, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT * FROM poker_player", "score": -5.3617095947265625, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT * FROM poker_player", "score": -5.555606842041016, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Name != \"What\"", "score": -5.625853538513184, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT people.Name FROM people WHERE people.Nationality != \"Russia\" AND people.Name != \"What VALUE\"", "score": -5.691640853881836, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}, {"orig_question": "What are the names of people who are not from Russia?", "inferred_code": "SELECT * FROM poker_player", "score": -5.83735466003418, "correct_code": "SELECT Name FROM people WHERE Nationality != \"Russia\""}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9591464021667495, "gold_bleu_score": 0.7015626894170839}
{"index": 685, "beams": [{"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people ORDER BY COUNT(DISTINCT people.Nationality)", "score": -5.032873630523682, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -5.323785781860352, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -5.5578413009643555, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people WHERE people.Nationality = \"VALUE\"", "score": -5.638554096221924, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) = COUNT(DISTINCT people.Nationality) FROM people", "score": -6.175307273864746, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.216376781463623, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.231974124908447, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.469845771789551, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.561619281768799, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.576120376586914, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.601989269256592, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.702484607696533, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT * FROM poker_player", "score": -7.980175971984863, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT T(DISTINCT people.Nationality) FROM people", "score": -8.010684967041016, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "How many distinct nationalities are there?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT people.Nationality) FROM people", "score": -8.116576194763184, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8766293077173709, "gold_bleu_score": 0.7863935966684718}
{"index": 686, "beams": [{"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people ORDER BY COUNT(DISTINCT people.Nationality)", "score": -4.980079174041748, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people WHERE people.Nationality = \"VALUE\"", "score": -5.621915340423584, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) = COUNT(DISTINCT people.Nationality) FROM people", "score": -5.859267711639404, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people WHERE people.Nationality < \"VALUE\"", "score": -5.989777565002441, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -6.142315864562988, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -6.892607688903809, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT COUNT(DISTINCT people.Nationality) FROM people WHERE people.Nationality", "score": -7.217555522918701, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.384746551513672, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.408247470855713, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.445609092712402, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.4885687828063965, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.521141529083252, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT * FROM poker_player", "score": -7.646265029907227, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT T(DISTINCT people.Nationality) FROM people", "score": -8.032279968261719, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}, {"orig_question": "Count the number of different nationalities.", "inferred_code": "SELECT SUM(DISTINCT people.Nationality) FROM people", "score": -8.314043045043945, "correct_code": "SELECT count(DISTINCT Nationality) FROM people"}], "db_name": "poker_player", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8256477002422209, "gold_bleu_score": 0.4381230834301708}
{"index": 687, "beams": [{"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) FROM AREA_CODE_STATE", "score": 0.0, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM AREA_CODE_STATE", "score": -6.9526214599609375, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) AS AREA_CODE_STATE.state FROM AREA_CODE_STATE", "score": -7.5197553634643555, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(AREA_CODE_STATE.state) FROM AREA_CODE_STATE", "score": -7.623683452606201, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) FROM AREA_CODE_STATE WHERE \"How\"", "score": -7.734033107757568, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) FROM AREA_CODE_STATE ORDER BY AREA_CODE_STATE.state", "score": -7.819427013397217, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) FROM AREA_CODE_STATE GROUP BY AREA_CODE_STATE.state", "score": -7.825655937194824, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(* - AREA_CODE_STATE.state) FROM AREA_CODE_STATE", "score": -7.845903396606445, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT COUNT(*) FROM AREA_CODE_STATE WHERE \"many\"", "score": -7.922252655029297, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -7.97632360458374, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -8.13714599609375, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -8.975001335144043, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -9.04296588897705, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT T(AREA_CODE_STATE.state) FROM AREA_CODE_STATE", "score": -9.13917350769043, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -9.197640419006348, "correct_code": "SELECT count(*) FROM area_code_state"}, {"orig_question": "How many states are there?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -9.330552101135254, "correct_code": "SELECT count(*) FROM area_code_state"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 689, "beams": [{"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES", "score": -5.876462410014938e-07, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES WHERE VOTES.state IN (SELECT VOTES.state FROM VOTES)", "score": -4.496259689331055, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state", "score": -4.904842376708984, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.9358601570129395, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.140399932861328, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.25242280960083, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES WHERE VOTES.state = \"VALUE\"", "score": -5.318364143371582, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES", "score": -5.716982364654541, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.071061134338379, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.081195831298828, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state IN (DISTINCT VOTES.state) FROM VOTES", "score": -6.102378845214844, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.237060546875, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.260021686553955, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.3590922355651855, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES GROUP BY VOTES.vote_id", "score": -6.562564849853516, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}, {"orig_question": "List the vote ids, phone numbers and states of all votes.", "inferred_code": "SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES LIMIT 1", "score": -6.663702487945557, "correct_code": "SELECT vote_id ,  phone_number ,  state FROM votes"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7933314558229714, "gold_bleu_score": 0.7123315684461309}
{"index": 690, "beams": [{"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT MAX(AREA_CODE_STATE.area_code), MIN(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE", "score": -3.761256550660619e-08, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -3.578252077102661, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT MAX(AREA_CODE_STATE.area_code), MIN(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE GROUP BY AREA_CODE_STATE.area_code", "score": -4.25909948348999, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT MAX(AREA_CODE_STATE.area_code), MIN(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE ORDER BY MIN(AREA_CODE_STATE.area_code)", "score": -4.692192554473877, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.70081090927124, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT MAX(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE", "score": -4.968173980712891, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.970259666442871, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT MAX(AREA_CODE_STATE.area_code), MIN(AREA_CODE_STATE.area_code) FROM AREA_CODE_STATE GROUP BY AREA_CODE_STATE.area_code", "score": -5.023684024810791, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.149019718170166, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.152556896209717, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.162171363830566, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.396434783935547, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.430544853210449, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.5276408195495605, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.574565410614014, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}, {"orig_question": "What are the maximum and minimum values of area codes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.779094696044922, "correct_code": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4271061400625482, "gold_bleu_score": 0.7106265420967098}
{"index": 691, "beams": [{"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\"", "score": -2.4049442799878307e-05, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT MAX(VOTES.created) FROM VOTES WHERE VOTES.state = \"CA\"", "score": -2.9180424213409424, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\" ORDER BY VOTES.created DESC LIMIT 1", "score": -3.4822423458099365, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT COUNT(*) FROM VOTES WHERE VOTES.state = \"CA\"", "score": -3.504729986190796, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\" EXCEPT SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\"", "score": -3.697188138961792, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT \"VALUE\" AS select VOTES.created FROM VOTES WHERE VOTES.state = \"CA\"", "score": -4.343128681182861, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.470263481140137, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.477801322937012, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\" AND VOTES.created = \"VALUE\"", "score": -4.816332817077637, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\" AND VOTES.created = \"last\"", "score": -4.967216968536377, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT DISTINCT VOTES.created FROM VOTES WHERE VOTES.state = \"CA\"", "score": -5.198004722595215, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT 4 AS select VOTES.created FROM VOTES WHERE VOTES.state = \"CA\"", "score": -5.427807807922363, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.549007415771484, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT \"VALUE\" FROM VOTES WHERE VOTES.state = \"CA\"", "score": -5.697200298309326, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT \"select VOTES.created\" FROM VOTES WHERE VOTES.state = \"CA\"", "score": -5.70224142074585, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}, {"orig_question": "What is last date created of votes from the state 'CA'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -6.004653453826904, "correct_code": "SELECT max(created) FROM votes WHERE state  =  'CA'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7571514668053516, "gold_bleu_score": 0.40796504219693225}
{"index": 692, "beams": [{"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\"", "score": -5.453824769574567e-07, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\" EXCEPT SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name = \"Jessie Alloway\"", "score": -3.3849751949310303, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\"", "score": -4.238605976104736, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.240360736846924, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.70254373550415, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Jessie Alloway\"", "score": -4.710081577301025, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.8575944900512695, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\" EXCEPT SELECT * FROM CONTESTANTS WHERE CONTESTANTS.contestant_name = \"Jessie Alloway\"", "score": -4.9240617752075195, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway VALUE\"", "score": -5.235452175140381, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Allowayay\"", "score": -5.430272102355957, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.489849090576172, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_number FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\"", "score": -5.514191150665283, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"not Jessie Alloway\"", "score": -5.669132232666016, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\" EXCEPT SELECT CONTESTANTS.contestant_number FROM CONTESTANTS WHERE CONTESTANTS.contestant_name = \"Jessie Alloway\"", "score": -5.685366630554199, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"'Alloway\"", "score": -5.756965160369873, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}, {"orig_question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "inferred_code": "SELECT * FROM CONTESTANTS WHERE CONTESTANTS.contestant_name != \"Jessie Alloway\"", "score": -5.815130233764648, "correct_code": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9140219883058364, "gold_bleu_score": 0.8050484842106532}
{"index": 693, "beams": [{"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES", "score": -3.705327458192187e-07, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES JOIN VOTES ON VOTES.state = VOTES.state", "score": -4.813652992248535, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES EXCEPT SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES", "score": -5.170834541320801, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.818370819091797, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES JOIN CONTESTANTS ON VOTES.state = CONTESTANTS.contestant_number", "score": -5.839534282684326, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.848705768585205, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT DISTINCT VOTES.state, VOTES.created FROM VOTES", "score": -5.9806036949157715, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES GROUP BY VOTES.state", "score": -6.525811195373535, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT MIN(DISTINCT VOTES.state), VOTES.created FROM VOTES", "score": -6.76209020614624, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT VOTES.state, DISTINCT VOTES.created FROM VOTES GROUP BY VOTES.state", "score": -6.968722343444824, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -7.044419288635254, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -7.061556339263916, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, DISTINCT VOTES.created FROM VOTES GROUP BY VOTES.state", "score": -7.165870666503906, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT VOTES.state, VOTES.created FROM VOTES GROUP BY VOTES.state", "score": -7.271734237670898, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -7.3592705726623535, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}, {"orig_question": "What are the distinct states and create time of all votes?", "inferred_code": "SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES EXCEPT SELECT DISTINCT VOTES.state FROM VOTES", "score": -7.917457103729248, "correct_code": "SELECT DISTINCT state ,  created FROM votes"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5946856333194763, "gold_bleu_score": 0.6769549435462966}
{"index": 699, "beams": [{"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabatha Gehling\"", "score": -2.8354532332741655e-05, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.state WHERE CONTESTANTS.contestant_name = \"Tabatha Gehling\"", "score": -1.5806602239608765, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabatha Gehlihling\"", "score": -2.5524239540100098, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabathaa Gehling\"", "score": -2.5837693214416504, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tab Tabatha Gehling\"", "score": -2.781270980834961, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Taba Gehling\"", "score": -2.83418345451355, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabathahling\"", "score": -2.868664264678955, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabathatha Gehling\"", "score": -2.980135440826416, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabatha Gehling\" GROUP BY VOTES.state", "score": -3.1385388374328613, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -3.1992478370666504, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"atha Gehling\"", "score": -3.3306965827941895, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabath Gehling\"", "score": -3.376068353652954, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -3.491788148880005, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -3.5379714965820312, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabatha Gehling\"", "score": -3.7439115047454834, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}, {"orig_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "inferred_code": "SELECT VOTES.created, \"VOTES.state.VOTES.phone_number\" FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE CONTESTANTS.contestant_name = \"Tabatha Gehling\"", "score": -3.8301334381103516, "correct_code": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.91558789028318, "gold_bleu_score": 0.765953033909599}
{"index": 701, "beams": [{"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE \"% Al %\"", "score": -1.5045026202642475e-07, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE \"% Al %\" AND CONTESTANTS.contestant_name LIKE \"% Al %\"", "score": -3.739445209503174, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT DISTINCT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE \"% Al %\"", "score": -4.5459489822387695, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -4.551860332489014, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name NOT LIKE \"% Al %\"", "score": -4.940708637237549, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.235909461975098, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.262957572937012, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.3309245109558105, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE \"%st %\"", "score": -5.455552101135254, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name HAVING \"% Al %\"", "score": -5.536417484283447, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE MOD(CONTESTANTS.contestant_name, \"% Al %\")", "score": -5.601855278015137, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.657834529876709, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.778337001800537, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.814517021179199, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.9045891761779785, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}, {"orig_question": "Return the names of the contestants whose names contain the substring 'Al' .", "inferred_code": "SELECT * FROM AREA_CODE_STATE", "score": -5.979116439819336, "correct_code": "select contestant_name from contestants where contestant_name like \"%al%\""}], "db_name": "voter_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4401058416291186, "gold_bleu_score": 0.4626653835587112}
{"index": 702, "beams": [{"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -4.897050942531678e-08, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 EXCEPT SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -5.145945072174072, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country JOIN country ON country.Code = country.Code WHERE country.IndepYear > 1950", "score": -5.714912414550781, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear > 1950", "score": -5.751888751983643, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -5.90435266494751, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "score": -5.966447830200195, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 OR country.IndepYear > 1950", "score": -6.124619007110596, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country UNION SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -6.157526969909668, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -7.2395243644714355, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > MOD(1950, 1950)", "score": -7.303083419799805, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name, country.GovernmentForm FROM country WHERE country.IndepYear > 1950", "score": -7.724081516265869, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -7.958596229553223, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT \"country.Name.What\" FROM country WHERE country.IndepYear > 1950", "score": -8.050875663757324, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -8.106241226196289, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT * FROM city", "score": -8.195401191711426, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "What are the names of all the countries that became independent after 1950?", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear = 1950", "score": -8.31886100769043, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5863483614506804, "gold_bleu_score": 0.6252807801857834}
{"index": 703, "beams": [{"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -4.897050942531678e-08, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 EXCEPT SELECT country.Name FROM country WHERE country.IndepYear > 1950", "score": -5.018856525421143, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.252562999725342, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.518309593200684, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.520246982574463, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.520969867706299, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.IndepYear > 1950", "score": -5.5522050857543945, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.5575079917907715, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -5.624643802642822, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 AND country.IndepYear > 1950", "score": -5.825123310089111, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > 1950 OR country.IndepYear > 1950", "score": -6.195438861846924, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -6.752976894378662, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.LifeExpectancy > 1950", "score": -6.999423027038574, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -7.10101842880249, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT country.Name FROM country WHERE country.IndepYear > MOD(1950, 1950)", "score": -7.104281425476074, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}, {"orig_question": "Give the names of the nations that were founded after 1950.", "inferred_code": "SELECT * FROM city", "score": -7.58807897567749, "correct_code": "SELECT Name FROM country WHERE IndepYear  >  1950"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5018344392839593, "gold_bleu_score": 0.3696102755832501}
{"index": 720, "beams": [{"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -8.266903932963032e-06, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" AND country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -1.7368285655975342, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy EXCEPT SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -3.177266836166382, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy INTERSECT SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -3.1894454956054688, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -3.3932197093963623, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" UNION SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -3.5069665908813477, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" EXCEPT SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -3.548787832260132, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.632002115249634, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" GROUP BY country.Name ORDER BY MIN(country.LifeExpectancy) LIMIT 1", "score": -3.662843704223633, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.6935033798217773, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy", "score": -3.8068113327026367, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.8927767276763916, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy ASC LIMIT 1", "score": -3.9242660999298096, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT * FROM city", "score": -4.005034923553467, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" AND country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\") ORDER BY country.LifeExpectancy LIMIT 1", "score": -4.046401500701904, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "What is the name of country that has the shortest life expectancy in Asia?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -4.350276947021484, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.682732275771919, "gold_bleu_score": 0.542757241815971}
{"index": 721, "beams": [{"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -1.5826532262508408e-06, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" EXCEPT SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -2.271933078765869, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" AND country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -2.406818389892578, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" INTERSECT SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -2.425729751586914, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asia\")", "score": -2.6847379207611084, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy EXCEPT SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -2.9692790508270264, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT * FROM city", "score": -3.0705349445343018, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy INTERSECT SELECT country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -3.1741416454315186, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" EXCEPT SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT country.LifeExpectancy FROM country WHERE country.Continent = \"Asia\")", "score": -3.4982516765594482, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" INTERSECT SELECT country.Name FROM country WHERE country.LifeExpectancy = (SELECT country.LifeExpectancy FROM country WHERE country.Continent = \"Asia\")", "score": -3.6325697898864746, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT * FROM city", "score": -3.6459712982177734, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country JOIN country ON country.Code = country.GNP WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -3.7052347660064697, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.LifeExpectancy LIMIT 1", "score": -3.860090732574463, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.Region LIMIT 1", "score": -4.108663558959961, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy < country.GNP LIMIT 1", "score": -4.165550708770752, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}, {"orig_question": "Give the name of the country in Asia with the lowest life expectancy.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Asia\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -4.223631858825684, "correct_code": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5985088299953288, "gold_bleu_score": 0.5380760287931822}
{"index": 722, "beams": [{"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -9.788096576812677e-06, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNPOld) FROM country WHERE country.Continent = \"Asia\"", "score": -2.360672950744629, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT * FROM city", "score": -2.9365718364715576, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country JOIN country ON country.Code = country.GNPOld WHERE country.Continent = \"Asia\"", "score": -3.073909282684326, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country JOIN country ON country.Code = country.Code WHERE country.Continent = \"Asia\"", "score": -3.1955313682556152, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT * FROM city", "score": -3.2609996795654297, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), SUM(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.3778181076049805, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.4431257247924805, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT MAX(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.473676919937134, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT \"sum\" AS select sum (country.Population) , max (country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.579132318496704, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT 0 AS select sum (country.Population) , max (country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.689863443374634, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population / country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -3.8273303508758545, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT \"select sum (country.Population) , max (country.GNP)\" FROM country WHERE country.Continent = \"Asia\"", "score": -3.8323476314544678, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), MAX(country.Population) FROM country WHERE country.Continent = \"Asia\"", "score": -3.933246374130249, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), \"max\" AS  FROM country WHERE country.Continent = \"Asia\"", "score": -4.053897857666016, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "What is the total population and maximum GNP in Asia?", "inferred_code": "SELECT SUM(country.Population), \"max\" AS VALUE FROM country WHERE country.Continent = \"Asia\"", "score": -4.159592151641846, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4556617659176203, "gold_bleu_score": 0.5371226209534581}
{"index": 723, "beams": [{"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.GNP DESC LIMIT 1", "score": -0.004057419486343861, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -1.0661628246307373, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" ORDER BY country.Population DESC LIMIT 1", "score": -1.3279774188995361, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.Population), country.GNP FROM country WHERE country.Continent = \"Asia\" AND country.GNP = (SELECT MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\")", "score": -1.7998794317245483, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.9370675086975098, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.949998378753662, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -1.962593674659729, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" INTERSECT SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -1.9689840078353882, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\" INTERSECT SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -2.030611276626587, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country WHERE country.Continent = \"Asia\"", "score": -2.038461685180664, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.GNP), country.GNP FROM country WHERE country.Continent = \"Asia\" AND country.GNP = (SELECT MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\")", "score": -2.0996859073638916, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.Population), MAX(country.GNP) FROM country JOIN country ON country.Code = country.GNP WHERE country.Continent = \"Asia\"", "score": -2.1825437545776367, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -2.241391181945801, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT * FROM city", "score": -2.348036289215088, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT SUM(country.GNP), MAX(country.GNP) FROM country WHERE country.Continent = \"Asia\"", "score": -2.4928643703460693, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}, {"orig_question": "How many people live in Asia, and what is the largest GNP among them?", "inferred_code": "SELECT country.Population, country.GNP FROM country JOIN country ON country.Code = country.GNP WHERE country.Continent = \"Asia\" ORDER BY country.GNP DESC LIMIT 1", "score": -2.4949870109558105, "correct_code": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4662830850893439, "gold_bleu_score": 0.28533030120047004}
{"index": 732, "beams": [{"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -2.938231205007469e-07, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage ORDER BY COUNT(DISTINCT countrylanguage.Language)", "score": -5.133817195892334, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "score": -5.190420627593994, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"the\"", "score": -5.855574131011963, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"world\"", "score": -5.876959800720215, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"spoken\"", "score": -5.923296928405762, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = in", "score": -5.953837871551514, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"are\"", "score": -6.067095756530762, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -7.243450164794922, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -7.424041748046875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -7.586032867431641, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.043636322021484, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.172531127929688, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT T(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.372936248779297, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.662195205688477, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "How many unique languages are spoken in the world?", "inferred_code": "SELECT * FROM city", "score": -8.706598281860352, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8008452158970519, "gold_bleu_score": 0.5252370525746305}
{"index": 733, "beams": [{"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -5.876464683751692e-07, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage UNION SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -5.192495822906494, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage ORDER BY COUNT(DISTINCT countrylanguage.Language)", "score": -5.213846206665039, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"VALUE\"", "score": -5.459442615509033, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"used around\"", "score": -5.70443058013916, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around around\"", "score": -5.71453857421875, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = \"around\"", "score": -5.757821559906006, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.310642242431641, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language", "score": -7.494221210479736, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.529928684234619, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.739284515380859, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -7.939546585083008, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -8.314314842224121, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT SUM(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.478657722473145, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT T(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -8.592789649963379, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}, {"orig_question": "What is the number of distinct languages used around the world?", "inferred_code": "SELECT * FROM city", "score": -8.626880645751953, "correct_code": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8682864140700377, "gold_bleu_score": 0.4426112924445589}
{"index": 734, "beams": [{"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -1.6836720462265475e-08, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\" OR country.Continent = \"Africa\"", "score": -4.071258068084717, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\" ORDER BY COUNT(*)", "score": -4.607633113861084, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Africa\" OR country.Continent = \"Africa\"", "score": -4.617349624633789, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.841836452484131, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) AS country.GovernmentForm FROM country WHERE country.Continent = \"Africa\"", "score": -5.008450031280518, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) AS country.GNP FROM country WHERE country.Continent = \"Africa\"", "score": -5.1181488037109375, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.142816543579102, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) AS country.IndepYear FROM country WHERE country.Continent = \"Africa\"", "score": -5.216058254241943, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) AS country.GNPOld FROM country WHERE country.Continent = \"Africa\"", "score": -5.2604756355285645, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.283079624176025, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.638052940368652, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT SUM(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -5.66916561126709, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.709259510040283, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "score": -5.729555130004883, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many type of governments are in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country GROUP BY country.Continent = \"Africa\"", "score": -5.781431198120117, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5168155170482976, "gold_bleu_score": 0.36192243944580776}
{"index": 735, "beams": [{"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": 0.0, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.0303120613098145, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\" OR country.Continent = \"Africa\"", "score": -4.102216720581055, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\" ORDER BY COUNT(DISTINCT country.GovernmentForm)", "score": -4.352735996246338, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) = COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -4.59899377822876, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.946931838989258, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -4.983178615570068, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.086001396179199, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"in Africa\"", "score": -5.303239345550537, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent != \"Africa\"", "score": -5.433053016662598, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.667054176330566, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.67752742767334, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.693120956420898, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT COUNT(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent LIKE \"Africa\"", "score": -5.730478286743164, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT T(DISTINCT country.GovernmentForm) FROM country WHERE country.Continent = \"Africa\"", "score": -5.756976127624512, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}, {"orig_question": "How many different forms of governments are there in Africa?", "inferred_code": "SELECT * FROM city", "score": -5.924130439758301, "correct_code": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6017185780353409, "gold_bleu_score": 0.5507944824325376}
{"index": 762, "beams": [{"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -0.003456567879766226, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = \"asian\")", "score": -0.761573314666748, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(country.Continent) FROM country)", "score": -0.9195417165756226, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy DESC LIMIT 1", "score": -1.0919694900512695, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(*) FROM country WHERE country.Continent = \"asian\")", "score": -1.317955493927002, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.4498047828674316, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country)", "score": -1.7454850673675537, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(country.Continent) FROM country WHERE country.Continent = \"asian\")", "score": -1.917533040046692, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.096020221710205, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" AND country.LifeExpectancy = (SELECT MAX(country.Continent) FROM country) ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -2.1185638904571533, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population DESC LIMIT 1", "score": -2.1948328018188477, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -2.1961710453033447, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.2399091720581055, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Region DESC LIMIT 1", "score": -2.287032127380371, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.Continent DESC LIMIT 1", "score": -2.3739304542541504, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Find the name, population and expected life length of asian country with the largest area?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"asian\" ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -2.3789920806884766, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7758344261630845, "gold_bleu_score": 0.46995640322285076}
{"index": 763, "beams": [{"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -0.07762492448091507, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -0.3522413969039917, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asian\")", "score": -0.7064640522003174, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\"", "score": -0.733331024646759, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asian\")", "score": -0.7509632110595703, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "score": -0.7759265303611755, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Population = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = \"Asian\")", "score": -1.0316320657730103, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.LifeExpectancy LIMIT 1", "score": -1.1446014642715454, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.1613657474517822, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.2667592763900757, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.4222710132598877, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"Asian\" ORDER BY country.Population,country.Region", "score": -1.4839364290237427, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.4919639825820923, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"largest Asian\" ORDER BY country.Population,country.LifeExpectancy LIMIT 1", "score": -1.5595380067825317, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"of\" ORDER BY country.LifeExpectancy DESC LIMIT 1", "score": -1.6667298078536987, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the name, population, and life expectancy of the largest Asian country by land?", "inferred_code": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = \"the\" AND country.Continent = \"Asian\" ORDER BY country.Population,country.LifeExpectancy", "score": -1.693317174911499, "correct_code": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5669163771609895, "gold_bleu_score": 0.5129853912259096}
{"index": 770, "beams": [{"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "score": -2.4332432746887207, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -2.894355535507202, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.0501060485839844, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -3.616312265396118, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.8911237716674805, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT countrylanguage.IsOfficial) < 1930", "score": -4.318896293640137, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Name = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -4.632710933685303, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -4.877172946929932, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.148089408874512, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language < 1930", "score": -5.4239935874938965, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.590715408325195, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.6190056800842285, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930 ORDER BY COUNT(DISTINCT countrylanguage.Language)", "score": -5.755903720855713, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.8088178634643555, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT * FROM city", "score": -5.866062164306641, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage", "score": -6.4577717781066895, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5692012833061206, "gold_bleu_score": 0.4379361228178078}
{"index": 771, "beams": [{"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -3.251563310623169, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.IndepYear < 1930", "score": -3.519744873046875, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -3.7057392597198486, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.IsOfficial < 1930", "score": -4.482772350311279, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -4.627022743225098, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -4.731587886810303, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage HAVING COUNT(DISTINCT countrylanguage.Language) < 1930", "score": -5.05838680267334, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.171734809875488, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.30159854888916, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language), COUNT(DISTINCT countrylanguage.CountryCode) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.612412452697754, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930", "score": -5.625551700592041, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.741053581237793, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.781151294708252, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.833208084106445, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -5.8653459548950195, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}, {"orig_question": "For the countries founded before 1930, what is the total number of distinct official languages?", "inferred_code": "SELECT * FROM city", "score": -6.10210657119751, "correct_code": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.15960610399265618, "gold_bleu_score": 0.39333128011671975}
{"index": 788, "beams": [{"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.21057403087615967, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.6490392684936523, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -1.0855708122253418, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.3709162473678589, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.432852864265442, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population = (SELECT MIN(country.Population) FROM country)", "score": -1.7202249765396118, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -1.8881731033325195, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT * FROM city", "score": -2.1565680503845215, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "score": -2.1942574977874756, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.3431930541992188, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, city.Name, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.428365468978882, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.570411443710327, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.LocalName, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -2.607262372970581, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, country.SurfaceArea, country.Population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.6473231315612793, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT country.Name, SMALLEST(country.Population) FROM country ORDER BY (country.Population - country.SurfaceArea) LIMIT 1", "score": -2.662900924682617, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "What are the name, independence year, and surface area of the country with the smallest population?", "inferred_code": "SELECT * FROM city", "score": -2.7421019077301025, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8129419834546443, "gold_bleu_score": 0.7268209781922127}
{"index": 789, "beams": [{"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1", "score": -0.0025932651478797197, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY country.Population LIMIT 1", "score": -1.1849931478500366, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -1.3427951335906982, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE city.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.2578577995300293, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode GROUP BY city.CountryCode ORDER BY MIN(country.Population) LIMIT 1", "score": -2.522026538848877, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY city.Population LIMIT 1", "score": -2.580852746963501, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(country.Population) FROM country)", "score": -2.5987837314605713, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.6646251678466797, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.7295517921447754, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -2.901089668273926, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population = (SELECT MIN(country.Population) FROM country) ORDER BY country.Population LIMIT 1", "score": -2.9629263877868652, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode ORDER BY (country.Population - country.SurfaceArea) LIMIT 1", "score": -2.9842586517333984, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN city ON country.Code = city.CountryCode GROUP BY city.CountryCode ORDER BY SUM(country.Population) LIMIT 1", "score": -3.377110004425049, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -3.5418293476104736, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY (country.Population - country.SurfaceArea) LIMIT 1", "score": -3.767641067504883, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}, {"orig_question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "inferred_code": "SELECT * FROM city", "score": -3.85508394241333, "correct_code": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7432926596384839, "gold_bleu_score": 0.658006449027007}
{"index": 790, "beams": [{"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.08106760680675507, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.Capital FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.4286510944366455, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.6080598831176758, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country)", "score": -1.7112994194030762, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.8275271654129028, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT country.Population, country.Name, country.Capital FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country)", "score": -1.9503681659698486, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -1.9945380687713623, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.0891318321228027, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.1994576454162598, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.2203025817871094, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.257675886154175, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.3700153827667236, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.38057541847229, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.527247190475464, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.5318379402160645, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "What are the population, name and leader of the country with the largest area?", "inferred_code": "SELECT * FROM city", "score": -2.589019536972046, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7179622131595429, "gold_bleu_score": 0.5450667343298755}
{"index": 791, "beams": [{"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1", "score": -0.0006187214166857302, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(country.SurfaceArea) FROM country)", "score": -1.4228734970092773, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.7461780309677124, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.7870415449142456, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -1.9668920040130615, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Region = (SELECT country.HeadOfState FROM country WHERE country.Region = \"the\")", "score": -1.9804168939590454, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.0377461910247803, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT country.Name, country.Population, country.HeadOfState FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Region = (SELECT MAX(country.SurfaceArea) FROM country)", "score": -2.0459203720092773, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.067246437072754, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.0898563861846924, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.1066999435424805, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.236238479614258, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.31661319732666, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.3678019046783447, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.8157198429107666, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}, {"orig_question": "Give the name, population, and head of state for the country that has the largest area.", "inferred_code": "SELECT * FROM city", "score": -2.9086110591888428, "correct_code": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8378407619030639, "gold_bleu_score": 0.5765205856649862}
{"index": 806, "beams": [{"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": 0.0, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" OR country.Continent = \"Asia\"", "score": -4.114320755004883, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" ORDER BY COUNT(*)", "score": -4.891418933868408, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.2759318351745605, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.3559041023254395, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT 10 AS select count (*) FROM country WHERE country.Continent = \"Asia\"", "score": -5.3734588623046875, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) AS * FROM country WHERE country.Continent = \"Asia\"", "score": -5.425731658935547, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.46547269821167, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) AS country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -5.659966945648193, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": -5.664139270782471, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.8527092933654785, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -5.9229536056518555, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "score": -5.929462432861328, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "score": -5.988345623016357, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT * FROM city", "score": -6.084934711456299, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "how many countries are in Asia?", "inferred_code": "SELECT SUM(*) FROM country WHERE country.Continent = \"Asia\"", "score": -6.14567232131958, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6693736508327404, "gold_bleu_score": 0.47667146368351204}
{"index": 807, "beams": [{"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\"", "score": 0.0, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" OR country.Continent = \"Asia\"", "score": -3.8357794284820557, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" OR country.Continent = \"in *) =\"", "score": -4.392343521118164, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" OR country.Continent = \"in *)\"", "score": -4.486932277679443, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -4.643566131591797, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country JOIN country ON country.Code = country.Code WHERE country.Continent = \"Asia\"", "score": -4.662489891052246, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent = \"Asia\" ORDER BY COUNT(*)", "score": -4.859863758087158, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -4.937333106994629, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.112163543701172, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.417790412902832, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.602809429168701, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT * FROM city", "score": -5.622451305389404, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) AS * FROM country WHERE country.Continent = \"Asia\"", "score": -5.674400329589844, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) AS country.Name FROM country WHERE country.Continent = \"Asia\"", "score": -5.7910566329956055, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country WHERE country.Continent != \"Asia\"", "score": -5.8063883781433105, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}, {"orig_question": "Count the number of countries in Asia.", "inferred_code": "SELECT COUNT(*) FROM country GROUP BY country.Continent = \"Asia\"", "score": -5.941066265106201, "correct_code": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4617819735011045, "gold_bleu_score": 0.3625647610706927}
{"index": 808, "beams": [{"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -3.151210648866254e-06, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" INTERSECT SELECT country.Name FROM country WHERE country.Population = 80000", "score": -2.5273497104644775, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" OR country.Population = 80000", "score": -3.346508741378784, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.048856735229492, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -4.058209419250488, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" UNION SELECT country.Name FROM country WHERE country.Population = 80000", "score": -4.085785865783691, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000 AND country.Population = 80000", "score": -4.2380146980285645, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "score": -4.239626407623291, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.369830131530762, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.552235126495361, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.630279541015625, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.803373336791992, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -4.952279090881348, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe.country.Population\" = 80000", "score": -5.143446922302246, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "score": -5.194624900817871, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "inferred_code": "SELECT * FROM city", "score": -5.277181625366211, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8641832622266292, "gold_bleu_score": 0.7017498701384881}
{"index": 809, "beams": [{"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population = 80000", "score": -0.09398302435874939, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population > 80000", "score": -0.3273041248321533, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" INTERSECT SELECT country.Name FROM country WHERE country.Population = 80000", "score": -2.581346035003662, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population <= 80000", "score": -2.607647180557251, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population < 80000", "score": -2.8871638774871826, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" INTERSECT SELECT country.Name FROM country WHERE country.Population > 80000", "score": -2.959622859954834, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population >= 80000", "score": -3.1105358600616455, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.47067928314209, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" OR country.Population = 80000", "score": -3.532205820083618, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND country.Population HAVING 80000", "score": -3.5377867221832275, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.579455852508545, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" OR country.Population > 80000", "score": -3.581860303878784, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.675727605819702, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -3.984708547592163, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT country.Name FROM country WHERE country.Continent = \"Europe\" AND (country.Population - 80000)", "score": -4.016007423400879, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}, {"orig_question": "Give the names of countries that are in Europe and have a population equal to 80000.", "inferred_code": "SELECT * FROM city", "score": -4.063652038574219, "correct_code": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6587925373804945, "gold_bleu_score": 0.6496959193829974}
{"index": 812, "beams": [{"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000", "score": -1.4801183169765864e-05, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -3.4014415740966797, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 1600 AND 900000", "score": -3.5401291847229004, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -3.5476911067962646, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 9000", "score": -3.637146472930908, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000 EXCEPT SELECT city.Name FROM city WHERE city.Population >= 900000", "score": -3.6604459285736084, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000 EXCEPT SELECT city.Name FROM city WHERE city.Population > 900000", "score": -3.680018186569214, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000 EXCEPT SELECT city.Name FROM city WHERE city.Population >= 160000", "score": -3.787489175796509, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -3.871060848236084, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000 EXCEPT SELECT city.Name FROM city WHERE city.Population >= 1600 AND 900000", "score": -3.8992061614990234, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -4.083181858062744, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -4.169990062713623, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -4.433990478515625, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND \"and000\"", "score": -4.476218223571777, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 90000000", "score": -4.494531154632568, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}, {"orig_question": "What are the cities whose population is between 160000 and 900000?", "inferred_code": "SELECT * FROM city", "score": -4.942355632781982, "correct_code": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.22281769789776973, "gold_bleu_score": 0.4281560152660355}
{"index": 813, "beams": [{"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000", "score": -8.386715308006387e-06, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -3.5015063285827637, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 9000", "score": -3.676577091217041, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -3.7188494205474854, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -3.754467010498047, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 1600 AND 900000", "score": -3.836576461791992, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND \"and000\"", "score": -4.363043785095215, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 90000000", "score": -4.695150375366211, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -4.963646411895752, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -5.0509724617004395, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -5.091399669647217, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 9000000", "score": -5.248281955718994, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -5.288845539093018, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -5.420536994934082, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT city.Name FROM city WHERE city.Population <= 160000 AND 900000", "score": -5.457822322845459, "correct_code": "select name from city where population between 160000 and 900000"}, {"orig_question": "Return the names of cities that have a population between 160000 and 900000 .", "inferred_code": "SELECT * FROM city", "score": -5.502001762390137, "correct_code": "select name from city where population between 160000 and 900000"}], "db_name": "world_1", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4183021855424848, "gold_bleu_score": 0.5039684296912179}
{"index": 822, "beams": [{"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) FROM conductor", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) FROM conductor ORDER BY COUNT(*)", "score": -6.589535236358643, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -7.034054279327393, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -7.324399948120117, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -7.33136510848999, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -7.461551666259766, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) FROM conductor WHERE \"How\"", "score": -7.751921653747559, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) FROM conductor WHERE \"many\"", "score": -7.917840957641602, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM conductor", "score": -7.993369102478027, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) FROM conductor ORDER BY conductor.Age", "score": -8.204060554504395, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -8.258773803710938, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -8.346419334411621, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -8.572745323181152, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT * FROM conductor", "score": -8.645519256591797, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT COUNT(*) AS conductor.Conductor_ID FROM conductor", "score": -8.697546005249023, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "How many conductors are there?", "inferred_code": "SELECT T(*) FROM conductor", "score": -9.373101234436035, "correct_code": "SELECT count(*) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 823, "beams": [{"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor", "score": 0.0, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor UNION SELECT COUNT(*) FROM conductor", "score": -6.035428047180176, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -6.277475357055664, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor ORDER BY COUNT(*)", "score": -6.589407444000244, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.589506149291992, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor WHERE \"of\"", "score": -7.870793342590332, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.933221817016602, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM orchestra", "score": -7.9439263343811035, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor WHERE \"the\"", "score": -8.074295043945312, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -8.13776969909668, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -8.286028861999512, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -8.464383125305176, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -8.496810913085938, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT DISTINCT COUNT(*) FROM conductor", "score": -8.561908721923828, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -8.566969871520996, "correct_code": "SELECT count(*) FROM conductor"}, {"orig_question": "Count the number of conductors.", "inferred_code": "SELECT COUNT(*) FROM conductor ORDER BY conductor.Age", "score": -8.6343994140625, "correct_code": "SELECT count(*) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9144054015286409, "gold_bleu_score": 0.45661538345323555}
{"index": 826, "beams": [{"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\"", "score": -8.512812144090276e-08, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" EXCEPT SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"", "score": -3.9072582721710205, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT conductor.Conductor_ID FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -3.9923975467681885, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT * FROM conductor", "score": -4.026211738586426, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -4.52216100692749, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"USA\"))", "score": -5.428150177001953, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT * FROM conductor", "score": -5.63115930557251, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT * FROM conductor WHERE conductor.Nationality = \"USA\"), \"USA\"))", "score": -5.776163101196289, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT * FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -5.9042463302612305, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"What\"))", "score": -5.916867256164551, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT * FROM conductor", "score": -6.080643653869629, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT conductor.Age FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -6.1441144943237305, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA USA\"", "score": -6.177160263061523, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"", "score": -6.212631702423096, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT * FROM conductor", "score": -6.287082672119141, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "What are the names of conductors whose nationalities are not \"USA\"?", "inferred_code": "SELECT * FROM conductor", "score": -6.395478248596191, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9859486223005993, "gold_bleu_score": 0.8164339190051895}
{"index": 827, "beams": [{"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\"", "score": -1.4897422317972087e-07, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -3.7632737159729004, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (SELECT conductor.Conductor_ID FROM conductor WHERE conductor.Nationality = \"USA\")", "score": -3.7977020740509033, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" EXCEPT SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"", "score": -3.926623821258545, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -4.261154651641846, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"USA\"))", "score": -4.616520404815674, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -4.8218464851379395, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -4.840539455413818, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -4.953448295593262, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -5.0182204246521, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -5.117395401000977, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"Return\"))", "score": -5.125375747680664, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -5.204122066497803, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT * FROM conductor", "score": -5.281200885772705, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"the\"))", "score": -5.3091325759887695, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}, {"orig_question": "Return the names of conductors that do not have the nationality \"USA\".", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Nationality != \"USA\" AND conductor.Conductor_ID IN (MOD((SELECT conductor.Name FROM conductor WHERE conductor.Nationality = \"USA\"), \"conductors\"))", "score": -5.410595417022705, "correct_code": "SELECT Name FROM conductor WHERE Nationality != 'USA'"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7819704275020027, "gold_bleu_score": 0.6534540147315163}
{"index": 830, "beams": [{"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show ORDER BY AVG(show.Attendance)", "score": -6.129495143890381, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -6.993523597717285, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE \"What\"", "score": -7.805753231048584, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE \"the\"", "score": -7.909322261810303, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -7.911936283111572, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -7.939825057983398, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -8.14399242401123, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show ORDER BY show.Attendance", "score": -8.197488784790039, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) AS show.Show_ID FROM show", "score": -8.246251106262207, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT MAX(show.Attendance) FROM show", "score": -8.36216926574707, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) AS show.Performance_ID FROM show", "score": -8.39700698852539, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -8.523344039916992, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT AVG(show.Attendance) FROM show ORDER BY show.Show_ID", "score": -8.556638717651367, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -8.721590995788574, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "What is the average attendance of shows?", "inferred_code": "SELECT * FROM conductor", "score": -9.138537406921387, "correct_code": "SELECT avg(Attendance) FROM SHOW"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.8873807879817832}
{"index": 831, "beams": [{"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show", "score": 0.0, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE show.Result = \"VALUE\"", "score": -6.23328161239624, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT * FROM conductor", "score": -6.277508735656738, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE show.Show_ID", "score": -7.61521053314209, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE \"the\"", "score": -7.76554536819458, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE \"Return\"", "score": -7.960481643676758, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show ORDER BY show.Show_ID", "score": -7.982198238372803, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) AS show.Performance_ID FROM show", "score": -7.987726211547852, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) AS show.Show_ID FROM show", "score": -8.018115043640137, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show WHERE attendance", "score": -8.054421424865723, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT * FROM conductor", "score": -8.098388671875, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT * FROM conductor", "score": -8.101943969726562, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show ORDER BY show.Attendance", "score": -8.167597770690918, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT AVG(show.Attendance) FROM show AS 0", "score": -8.650054931640625, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT MAX(show.Attendance) FROM show", "score": -8.712907791137695, "correct_code": "SELECT avg(Attendance) FROM SHOW"}, {"orig_question": "Return the average attendance across all shows.", "inferred_code": "SELECT * FROM conductor", "score": -8.893427848815918, "correct_code": "SELECT avg(Attendance) FROM SHOW"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.7043599410559339}
{"index": 832, "beams": [{"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\"", "score": -4.6619777549494756e-07, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance JOIN performance ON performance.Performance_ID = performance.Performance_ID WHERE performance.Type != \"Live final\"", "score": -3.0387847423553467, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.048450231552124, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), share FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.169834852218628, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), \"minimum\" FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.2547905445098877, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), performance.Performance_ID FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.3408641815185547, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final final\"", "score": -3.3889825344085693, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), share AS select min (performance.Share) FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.395958423614502, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.5353775024414062, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.5487232208251953, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), share AS select performance.Share FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.577315092086792, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share / performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\"", "score": -3.5808589458465576, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), \"maximum\" FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.6628000736236572, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) AS performance.Performance_ID FROM performance WHERE performance.Type != \"Live final\"", "score": -3.686628580093384, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), DISTINCT performance.Share FROM performance WHERE performance.Type != \"Live final\"", "score": -3.7708003520965576, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), 1 FROM performance WHERE performance.Type != \"Live final\"", "score": -3.8551573753356934, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9679820465668314, "gold_bleu_score": 0.894893047699482}
{"index": 833, "beams": [{"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\"", "score": -3.063584586016077e-07, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share NOT IN (SELECT performance.Performance_ID FROM performance WHERE performance.Type = \"Live final\")", "score": -2.2520675659179688, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -2.5196776390075684, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), performance.Performance_ID FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -2.996269702911377, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance JOIN performance ON performance.Performance_ID = performance.Performance_ID WHERE performance.Type != \"Live final\"", "score": -3.012503147125244, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\" AND performance.Share != \"Live final\"", "score": -3.033785343170166, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.123473882675171, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), \"shares\" FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.413395881652832, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), \"minimum\" FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.419175624847412, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share / performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final\"", "score": -3.5053577423095703, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), \"maximum\" FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.6994686126708984, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share), performance.Type FROM performance WHERE performance.Type != \"Live final\" GROUP BY performance.Share", "score": -3.7386412620544434, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.746690273284912, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type != \"Live final final\"", "score": -3.8209786415100098, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT MAX(performance.Share), MIN(performance.Share) FROM performance WHERE performance.Type = \"Live final\"", "score": -3.886594295501709, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}, {"orig_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "inferred_code": "SELECT * FROM conductor", "score": -3.8928182125091553, "correct_code": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7400407525207751, "gold_bleu_score": 0.6883783119665219}
{"index": 834, "beams": [{"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor ORDER BY COUNT(DISTINCT conductor.Nationality)", "score": -5.023891925811768, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor WHERE conductor.Nationality = \"VALUE\"", "score": -5.820539474487305, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor WHERE conductor.Nationality < \"VALUE\"", "score": -5.845027446746826, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor WHERE conductor.Nationality", "score": -6.565389633178711, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -6.733003616333008, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT conductor.Nationality) FROM conductor", "score": -7.0474772453308105, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -7.094731330871582, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -7.6121649742126465, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -7.943263053894043, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -8.009977340698242, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT T(DISTINCT conductor.Nationality) FROM conductor", "score": -8.033106803894043, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -8.501946449279785, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -8.639326095581055, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT * FROM conductor", "score": -8.72511100769043, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "How many different nationalities do conductors have?", "inferred_code": "SELECT SUM(DISTINCT conductor.Nationality) FROM conductor", "score": -8.76975154876709, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6857410186354469}
{"index": 835, "beams": [{"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor", "score": 0.0, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -4.4445648193359375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor ORDER BY COUNT(DISTINCT conductor.Nationality)", "score": -5.188811779022217, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -5.845019817352295, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor WHERE conductor.Nationality = \"VALUE\"", "score": -5.931153297424316, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -6.06965446472168, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT COUNT(DISTINCT conductor.Nationality) FROM conductor WHERE conductor.Nationality", "score": -6.652406215667725, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -6.741281986236572, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -6.9212327003479, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT conductor.Nationality) FROM conductor", "score": -7.3284406661987305, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.409520626068115, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.6662445068359375, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.6857476234436035, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.741240501403809, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT * FROM conductor", "score": -7.7924933433532715, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}, {"orig_question": "Count the number of different nationalities of conductors.", "inferred_code": "SELECT T(DISTINCT conductor.Nationality) FROM conductor", "score": -8.088203430175781, "correct_code": "SELECT count(DISTINCT Nationality) FROM conductor"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9232902208016385, "gold_bleu_score": 0.6108939870966938}
{"index": 838, "beams": [{"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -2.277420207974501e-08, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -3.8116416931152344, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor EXCEPT SELECT conductor.Year_of_Work FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -5.669034957885742, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work ASC LIMIT 1", "score": -6.370192050933838, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT \"most\"", "score": -6.436888217926025, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor)", "score": -6.599054336547852, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name, conductor.Year_of_Work FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -6.665322303771973, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) ORDER BY conductor.Year_of_Work ASC LIMIT 1", "score": -6.841618537902832, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) ORDER BY conductor.Year_of_Work DESC LIMIT \"most\"", "score": -6.958043098449707, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -7.0467634201049805, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT \"years\"", "score": -7.116211414337158, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT * FROM conductor", "score": -7.12769889831543, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT \"the\"", "score": -7.225850582122803, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT * FROM conductor", "score": -7.293705940246582, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT \"work\"", "score": -7.455676078796387, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "List the name of the conductor with the most years of work.", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT \"of\"", "score": -7.503495216369629, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6463122451612578, "gold_bleu_score": 0.4787460137648574}
{"index": 839, "beams": [{"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -1.366452409001795e-07, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -3.466128349304199, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor)", "score": -4.635555744171143, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.791780948638916, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.882518291473389, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -4.8857622146606445, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor JOIN conductor ON conductor.Conductor_ID = conductor.Conductor_ID ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -5.162999629974365, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY SUM(conductor.Year_of_Work) DESC LIMIT 1", "score": -5.3200554847717285, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor EXCEPT SELECT conductor.Year_of_Work FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -5.636103630065918, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT * FROM conductor", "score": -5.646025657653809, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor GROUP BY conductor.Year_of_Work ORDER BY COUNT(*) DESC LIMIT 1", "score": -5.751509189605713, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work ASC LIMIT 1", "score": -6.057961463928223, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor) ORDER BY conductor.Year_of_Work ASC LIMIT 1", "score": -6.428214073181152, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT conductor.Name, conductor.Year_of_Work FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1", "score": -6.4941864013671875, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT * FROM conductor", "score": -6.995413303375244, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}, {"orig_question": "What is the name of the conductor who has worked the greatest number of years?", "inferred_code": "SELECT * FROM conductor", "score": -7.0932722091674805, "correct_code": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6676829540456768, "gold_bleu_score": 0.36679183922150965}
{"index": 840, "beams": [{"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -0.08008013665676117, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID", "score": -0.6227432489395142, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -1.1930418014526367, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -1.6029489040374756, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID", "score": -2.07987117767334, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM orchestra JOIN orchestra ON orchestra.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID", "score": -2.9372825622558594, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -3.095661163330078, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -3.3018174171447754, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -3.3250679969787598, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM orchestra JOIN conductor ON conductor.Conductor_ID = orchestra.Conductor_ID", "score": -3.8712618350982666, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -4.118748664855957, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -4.123397350311279, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Orchestra = conductor.Conductor_ID", "score": -4.395105838775635, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -4.526636123657227, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -5.415326118469238, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "Show the names of conductors and the orchestras they have conducted.", "inferred_code": "SELECT * FROM conductor", "score": -6.006849765777588, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9191409024004903, "gold_bleu_score": 0.5502205788168827}
{"index": 841, "beams": [{"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -0.08242397755384445, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -0.5145897269248962, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID", "score": -1.1592479944229126, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM orchestra JOIN conductor ON conductor.Conductor_ID = orchestra.Conductor_ID", "score": -3.74648380279541, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -3.7874908447265625, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -3.8162455558776855, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID", "score": -3.9257729053497314, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM orchestra JOIN orchestra ON orchestra.Orchestra = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID", "score": -3.932244062423706, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -4.0774006843566895, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -4.208617210388184, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -4.2880682945251465, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -4.306606769561768, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Orchestra = conductor.Conductor_ID", "score": -4.916386604309082, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -4.980123996734619, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -5.435511112213135, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}, {"orig_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "inferred_code": "SELECT * FROM conductor", "score": -5.7176384925842285, "correct_code": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9291002880960341, "gold_bleu_score": 0.6271645589750077}
{"index": 846, "beams": [{"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -2.188773891020901e-07, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -3.9585812091827393, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN orchestra ON orchestra.Orchestra_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -4.09775447845459, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT * FROM conductor", "score": -4.154728412628174, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 AND orchestra.Orchestra > \"after 2008\"", "score": -4.1996846199035645, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE conductor.Year_of_Work > 2008", "score": -4.59829568862915, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 AND conductor.Year_of_Work > 2008", "score": -4.795780181884766, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 AND orchestra.Orchestra > \"after 2008 VALUE\"", "score": -4.8198561668396, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 OR orchestra.Year_of_Founded > 2008", "score": -4.825726509094238, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT * FROM conductor", "score": -4.964850902557373, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 ORDER BY conductor.Year_of_Work", "score": -5.217441082000732, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT * FROM conductor", "score": -5.218291759490967, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > MOD(2008, 2008)", "score": -5.252523422241211, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT * FROM conductor", "score": -5.284048557281494, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT * FROM conductor", "score": -5.404088497161865, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded < 2008", "score": -5.660530090332031, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7224009472600272, "gold_bleu_score": 0.6909688113232372}
{"index": 847, "beams": [{"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -5.556120754590665e-07, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -3.938133716583252, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -3.971881628036499, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -4.155843257904053, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN orchestra ON orchestra.Orchestra_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -4.226714134216309, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008", "score": -4.258918285369873, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 AND orchestra.Orchestra > \"after\"", "score": -4.406982421875, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE conductor.Year_of_Work > 2008", "score": -4.640559673309326, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 AND conductor.Year_of_Work > 2008", "score": -4.716670036315918, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008 OR orchestra.Year_of_Founded > 2008", "score": -4.724217414855957, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -5.007115840911865, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -5.064812660217285, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > MOD(2008, 2008)", "score": -5.157447338104248, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -5.34119987487793, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT * FROM conductor", "score": -5.446945667266846, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}, {"orig_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "inferred_code": "SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded < 2008", "score": -5.645799160003662, "correct_code": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"}], "db_name": "orchestra", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7617651912134298, "gold_bleu_score": 0.7922203011074306}
{"index": 946, "beams": [{"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -7.522513101321238e-08, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -3.8768694400787354, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"the\"", "score": -4.546019554138184, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"of\"", "score": -4.6746907234191895, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"it\"", "score": -4.6794281005859375, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"who\"", "score": -4.680477142333984, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"professional\"", "score": -4.6938066482543945, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"operated\"", "score": -4.708467960357666, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -4.775791168212891, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \". the\"", "score": -4.803552627563477, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -4.854059219360352, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Treatments.professional_id", "score": -5.495338439941406, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "score": -5.573285102844238, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -5.81168794631958, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT Treatments.date_of_treatment LIKE Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -6.114742279052734, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "List the date of each treatment, together with the first name of the professional who operated it.", "inferred_code": "SELECT * FROM Breeds", "score": -6.364470958709717, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.718247042163773, "gold_bleu_score": 0.49416145951531837}
{"index": 947, "beams": [{"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -3.761256550660619e-08, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -4.321481227874756, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.574334144592285, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"?\"", "score": -4.637453556060791, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"?\"", "score": -4.729859828948975, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"operating\"", "score": -4.813050746917725, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"operating\"", "score": -4.851864814758301, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"of\"", "score": -4.868652820587158, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = \"of\"", "score": -4.897152423858643, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id AND Treatments.professional_id = Professionals.professional_id", "score": -5.270798683166504, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Treatments.professional_id", "score": -5.418342113494873, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Treatments.date_of_treatment", "score": -5.9514665603637695, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id ORDER BY Professionals.first_name", "score": -5.996168613433838, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.253170967102051, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.3650383949279785, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}, {"orig_question": "What are the date and the operating professional's first name of each treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -6.474490642547607, "correct_code": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8133186386983455, "gold_bleu_score": 0.46699665174136773}
{"index": 950, "beams": [{"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -7.273505616467446e-06, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.430180788040161, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id EXCEPT SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -2.913987159729004, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code, MAX(Dogs.size_code) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id", "score": -3.5152902603149414, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -3.5390536785125732, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.size_code", "score": -3.6685807704925537, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -3.8245151042938232, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.owner_id, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.9805448055267334, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id", "score": -4.168522357940674, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code, DISTINCT Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id", "score": -4.173001289367676, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.284114837646484, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.300103187561035, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, SIZE(Dogs.size_code) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -4.530627727508545, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -4.569015979766846, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.664876461029053, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List each owner's first name, last name, and the size of his for her dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.725339889526367, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9189807932060583, "gold_bleu_score": 0.46480434311039803}
{"index": 951, "beams": [{"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -0.002006884664297104, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -1.0622590780258179, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.owner_id, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.4368953704833984, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.453120708465576, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, \"size\" AS select Owners.first_name , Owners.last_name , Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -2.7920494079589844, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, SIZE(Owners.first_name), Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.0437793731689453, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, SIZE(Owners.owner_id), Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.083425998687744, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.2207374572753906, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.228212356567383, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, SIZE(Owners.first_name), Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.2306463718414307, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -3.252788543701172, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, SIZE(Owners.first_name), Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.3403427600860596, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -3.387265205383301, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.396803379058838, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT Owners.first_name, Owners.last_name, \"the\" AS VALUE FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code", "score": -3.4201700687408447, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name, last name, and the size of their dog?", "inferred_code": "SELECT * FROM Breeds", "score": -3.481107711791992, "correct_code": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9411227853797774, "gold_bleu_score": 0.549794106581503}
{"index": 952, "beams": [{"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -1.5045026202642475e-07, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"VALUE\"", "score": -4.1100263595581055, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"'\"", "score": -4.340097904205322, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"pairs\"", "score": -4.346783638000488, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"s\"", "score": -4.396008491516113, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"dogs\"", "score": -4.410750389099121, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"the\"", "score": -4.439134120941162, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Dogs.owner_id = Dogs.dog_id", "score": -4.456865310668945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"owner\"", "score": -4.482907772064209, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -4.968660354614258, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name", "score": -5.048587322235107, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id", "score": -5.0681939125061035, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -5.25788688659668, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.first_name", "score": -5.408275127410889, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Owners.first_name", "score": -5.439502716064453, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "List pairs of the owner's first name and the dogs's name.", "inferred_code": "SELECT * FROM Breeds", "score": -5.53792142868042, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6525395772636065, "gold_bleu_score": 0.4812988974820793}
{"index": 953, "beams": [{"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id", "score": -1.1283768941439121e-07, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name IN (SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id)", "score": -3.6373536586761475, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -3.8636388778686523, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.055410385131836, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"VALUE\"", "score": -4.229221343994141, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.494629383087158, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.530430316925049, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name IN (SELECT Owners.first_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id)", "score": -4.634176731109619, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.671724319458008, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.776933670043945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name IN (SELECT Owners.owner_id FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id)", "score": -4.797332763671875, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name != \"VALUE\"", "score": -4.854208469390869, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -4.867785453796387, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.first_name = \"?\"", "score": -4.96377420425415, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT * FROM Breeds", "score": -5.075021266937256, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}, {"orig_question": "What are each owner's first name and their dogs's name?", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.name", "score": -5.118597507476807, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7801655724905379, "gold_bleu_score": 0.43187962406216196}
{"index": 956, "beams": [{"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\"", "score": -5.088632860861253e-06, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -2.580552101135254, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -2.9648666381835938, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -3.074542760848999, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = \"Virginia\"", "score": -3.6148314476013184, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "score": -3.7757208347320557, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"the\"", "score": -3.8456737995147705, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"someone\"", "score": -3.858428955078125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"owner\"", "score": -3.8598430156707764, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"Which\"", "score": -3.9002232551574707, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"who\"", "score": -3.9308252334594727, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.200909614562988, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.22820520401001, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Dogs.name", "score": -4.290887355804443, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Owners.first_name", "score": -4.52349853515625, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "inferred_code": "SELECT * FROM Breeds", "score": -4.582353591918945, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6172000280650994, "gold_bleu_score": 0.5146722694085729}
{"index": 957, "beams": [{"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\"", "score": -8.341967827618646e-08, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"own\"", "score": -3.3558156490325928, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\"", "score": -3.3751726150512695, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"they\"", "score": -3.3883018493652344, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"Virginia\"", "score": -3.5563974380493164, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"dogs\"", "score": -3.558828830718994, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \".\"", "score": -3.6275177001953125, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = and", "score": -3.7785184383392334, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" AND Dogs.name = \"of\"", "score": -3.7882020473480225, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.249566078186035, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = \"Virginia\" ORDER BY Dogs.name", "score": -4.48910665512085, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.501842498779297, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.647955894470215, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.812715530395508, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.823880195617676, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}, {"orig_question": "Find the first names of owners living in Virginia and the names of dogs they own.", "inferred_code": "SELECT * FROM Breeds", "score": -4.844923496246338, "correct_code": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6846839591564684, "gold_bleu_score": 0.5698477563167285}
{"index": 958, "beams": [{"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -0.08516436815261841, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -0.45484161376953125, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = (SELECT DISTINCT Treatments.dog_id FROM Treatments)", "score": -3.1562445163726807, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = \"VALUE\"", "score": -3.9082388877868652, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -4.002609729766846, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.00322961807251, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -4.122458457946777, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.231893539428711, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = 0", "score": -4.294192790985107, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs WHERE Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments)", "score": -4.436986446380615, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.462122440338135, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT DISTINCT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -4.505504608154297, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment = 1", "score": -4.644304275512695, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT * FROM Breeds", "score": -4.91511869430542, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment", "score": -5.224802017211914, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "score": -5.361025810241699, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9389050123908892, "gold_bleu_score": 0.5254267135603129}
{"index": 959, "beams": [{"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -0.003628162434324622, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -1.4107649326324463, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id EXCEPT SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id", "score": -3.634106397628784, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -3.90097975730896, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment = (SELECT DISTINCT Treatments.dog_id FROM Treatments)", "score": -3.926560640335083, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs WHERE Dogs.dog_id IN (SELECT Treatments.dog_id FROM Treatments)", "score": -4.521415710449219, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.56937313079834, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -4.753250598907471, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.8811798095703125, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.270988464355469, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id", "score": -5.311610698699951, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.319553852081299, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.344733715057373, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.35499906539917, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.416370391845703, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}, {"orig_question": "Find the arriving date and the departing date of the dogs that received a treatment.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id ORDER BY Treatments.date_of_treatment", "score": -5.432349681854248, "correct_code": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8384744672393108, "gold_bleu_score": 0.5557495116727738}
{"index": 964, "beams": [{"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs EXCEPT SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -5.888107776641846, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INTERSECT SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -6.048559188842773, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Dogs ON Dogs.dog_id = Dogs.dog_id", "score": -6.568475246429443, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -6.989933490753174, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.284716606140137, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.517141819000244, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.521103858947754, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.57051420211792, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.609341144561768, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.847163677215576, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "score": -8.104175567626953, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.442852973937988, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.62647819519043, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.98484992980957, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "What are the arriving date and the departing date of all the dogs?", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed = Dogs.date_departed FROM Dogs", "score": -9.24472713470459, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6323338880454831}
{"index": 965, "beams": [{"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": 0.0, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs EXCEPT SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -5.878540515899658, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INTERSECT SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs", "score": -6.011416435241699, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Dogs ON Dogs.dog_id = Dogs.dog_id", "score": -6.481797695159912, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.076929092407227, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.1834397315979, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.346281051635742, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -7.383238792419434, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_departed", "score": -8.13547420501709, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.222320556640625, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.282132148742676, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.377513885498047, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.619887351989746, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs ORDER BY Dogs.date_arrived", "score": -8.62783432006836, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs GROUP BY Dogs.date_arrived", "score": -8.866382598876953, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}, {"orig_question": "List the arrival date and the departure date for all the dogs.", "inferred_code": "SELECT Dogs.date_arrived LIKE Dogs.date_departed FROM Dogs", "score": -9.671111106872559, "correct_code": "SELECT date_arrived ,  date_departed FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8955266660521799, "gold_bleu_score": 0.6063674900019801}
{"index": 966, "beams": [{"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": -7.345579433604144e-07, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE ANY(SELECT COUNT(*) FROM Treatments)", "score": -4.727675914764404, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments ORDER BY COUNT(*)", "score": -5.34656286239624, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.106276035308838, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments", "score": -6.179775714874268, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.185295104980469, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.259042739868164, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.67329740524292, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -6.738164901733398, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id", "score": -6.9301066398620605, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE \"any\"", "score": -6.959907531738281, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.date_of_treatment", "score": -6.977588653564453, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE \"through\"", "score": -7.241445541381836, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT COUNT(NEG(Treatments.dog_id)) FROM Treatments", "score": -7.5963873863220215, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT DISTINCT Treatments.dog_id FROM Treatments", "score": -7.644096374511719, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "How many dogs went through any treatments?", "inferred_code": "SELECT * FROM Breeds", "score": -7.857954502105713, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4817232663733281, "gold_bleu_score": 0.5475958431976697}
{"index": 967, "beams": [{"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": 0.0, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE TREATMENT(SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments)", "score": -4.683233261108398, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.327815055847168, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT COUNT(DISTINCT Treatments.dog_id) FROM Treatments ORDER BY COUNT(*)", "score": -5.437358856201172, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.539456367492676, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.784274578094482, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.834507465362549, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.018126964569092, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.256542205810547, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.338175296783447, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.412400722503662, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -6.714104652404785, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT Treatments.dog_id, COUNT(*) FROM Treatments GROUP BY Treatments.dog_id", "score": -6.756136894226074, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.date_of_treatment", "score": -6.901639938354492, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -7.07806921005249, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}, {"orig_question": "Count the number of dogs that went through a treatment.", "inferred_code": "SELECT DISTINCT COUNT(DISTINCT Treatments.dog_id) FROM Treatments", "score": -7.132758617401123, "correct_code": "SELECT count(DISTINCT dog_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3498697431411334, "gold_bleu_score": 0.37933361671824406}
{"index": 968, "beams": [{"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments", "score": -0.01166624017059803, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.professional_id = Dogs.dog_id", "score": -1.3654966354370117, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -1.3837690353393555, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -2.009423017501831, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = (SELECT DISTINCT Treatments.professional_id FROM Treatments)", "score": -2.460000514984131, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -2.757582426071167, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 0", "score": -2.9310078620910645, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.0593807697296143, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.1808295249938965, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.3830857276916504, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments WHERE Treatments.dog_id = (SELECT DISTINCT Treatments.dog_id FROM Treatments)", "score": -3.466265916824341, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.6024763584136963, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = 1", "score": -3.7360243797302246, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.7388737201690674, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT COUNT(*) FROM Treatments WHERE Treatments.dog_id = (SELECT DISTINCT Treatments.dog_id FROM Treatments)", "score": -3.8133656978607178, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "How many professionals have performed any treatment to dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -3.970315456390381, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.407598968301797, "gold_bleu_score": 0.5764230263062109}
{"index": 969, "beams": [{"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -0.3579515516757965, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Professionals.professional_id = Professionals.professional_id", "score": -0.41850388050079346, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Professionals.professional_id = Treatments.professional_id", "score": -0.44614332914352417, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "score": -0.5218529105186462, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = 1", "score": -0.6053094863891602, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -0.6855764389038086, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \"VALUE\"", "score": -0.8209885358810425, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = \"VALUE\"", "score": -0.8326215147972107, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = (SELECT DISTINCT Dogs.dog_id FROM Dogs)", "score": -0.9426783323287964, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = (SELECT DISTINCT Treatments.professional_id FROM Treatments)", "score": -0.9732769131660461, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -1.1729724407196045, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.professional_id = Dogs.dog_id", "score": -1.2038012742996216, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.dog_id = (SELECT DISTINCT Dogs.dog_id FROM Dogs)", "score": -1.2491835355758667, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -1.2499101161956787, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id", "score": -1.3476966619491577, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}, {"orig_question": "Find the number of professionals who have ever treated dogs.", "inferred_code": "SELECT COUNT(*) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Professionals ON Professionals.professional_id = Dogs.owner_id", "score": -1.3743783235549927, "correct_code": "SELECT count(DISTINCT professional_id) FROM Treatments"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.310591395833546, "gold_bleu_score": 0.4439188653135234}
{"index": 970, "beams": [{"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -0.014507846906781197, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -0.7594831585884094, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -1.0513451099395752, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "score": -1.1077343225479126, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -1.6656386852264404, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -2.03381085395813, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.246001720428467, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.street LIKE \"% West %\"", "score": -2.3239026069641113, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.state LIKE \"% West %\"", "score": -2.4672091007232666, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -2.7963051795959473, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.email_address LIKE \"% West %\"", "score": -2.8526060581207275, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "score": -3.071098566055298, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -3.179574966430664, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -3.251309394836426, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "score": -3.2869179248809814, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "inferred_code": "SELECT * FROM Breeds", "score": -3.424156904220581, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7143562879610648, "gold_bleu_score": 0.4503798770606967}
{"index": 971, "beams": [{"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -0.0010688287438824773, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -1.3366527557373047, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -1.6434894800186157, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE \"% West %\"", "score": -1.9986317157745361, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name NOT LIKE \"% West %\"", "score": -2.0906529426574707, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.2519829273223877, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West %\"", "score": -2.6869897842407227, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \"% West %\"", "score": -2.6981754302978516, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.7906928062438965, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.8380813598632812, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -2.8865621089935303, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE \"% West %\"", "score": -2.909816265106201, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.zip_code LIKE \"% West %\"", "score": -3.0089337825775146, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT * FROM Breeds", "score": -3.0574796199798584, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name HAVING \"% West %\"", "score": -3.170086622238159, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}, {"orig_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "inferred_code": "SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE \"% West\"", "score": -3.209993600845337, "correct_code": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.746084185692771, "gold_bleu_score": 0.4858152164118199}
{"index": 972, "beams": [{"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.2142470445251092e-06, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -2.9447884559631348, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -2.9591667652130127, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\" AND Owners.state LIKE \"% North %\"", "score": -3.1283085346221924, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1424386501312256, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1427860260009766, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1652884483337402, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.2147865295410156, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -3.6426215171813965, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "score": -4.08009672164917, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -4.105656147003174, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.zip_code LIKE \"% North %\"", "score": -4.157749176025391, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"%st %\"", "score": -4.193653106689453, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% 'North %\"", "score": -4.254100799560547, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT * FROM Breeds", "score": -4.366340160369873, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, \"email\" FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -4.440992832183838, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7153500340801298, "gold_bleu_score": 0.492094781494503}
{"index": 973, "beams": [{"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -0.0029214106034487486, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -1.1869922876358032, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state IN (SELECT Owners.state FROM Owners WHERE Owners.state LIKE \"% North %\")", "score": -1.2632797956466675, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state IN (SELECT Owners.state FROM Owners WHERE Owners.last_name LIKE \"% North %\")", "score": -1.3964658975601196, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state NOT LIKE \"% North %\"", "score": -1.8677406311035156, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state IN (SELECT Owners.state FROM Owners WHERE Owners.first_name LIKE \"% North %\")", "score": -2.387373685836792, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name IN (SELECT Owners.state FROM Owners WHERE Owners.state LIKE \"% North %\")", "score": -2.6053085327148438, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state IN (SELECT Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\")", "score": -2.7690610885620117, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name NOT LIKE \"% North %\"", "score": -2.9125466346740723, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"% North\"", "score": -3.103177309036255, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state HAVING \"% North %\"", "score": -3.2579283714294434, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE COUNT(*) LIKE \"% North %\"", "score": -3.262470245361328, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE MOD(Owners.state, \"% North %\")", "score": -3.2919321060180664, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE \"% North %\"", "score": -3.424407720565796, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.first_name LIKE \"% North %\"", "score": -3.739112138748169, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}, {"orig_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "inferred_code": "SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state != \"VALUE\"", "score": -3.8926310539245605, "correct_code": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.724221556490567, "gold_bleu_score": 0.4951366818383156}
{"index": 976, "beams": [{"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -0.031395211815834045, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -1.0570148229599, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "score": -2.0067555904388428, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -2.222362995147705, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY (Treatments.date_of_treatment - Treatments.date_of_treatment) DESC LIMIT 1", "score": -3.7605361938476562, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "score": -3.960561752319336, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.0744853019714355, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.281288146972656, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.299408435821533, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment LIMIT 1", "score": -4.335098743438721, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -4.402598857879639, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -4.481595993041992, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.520873546600342, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.611410617828369, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT * FROM Breeds", "score": -4.617795467376709, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "How much does the most recent treatment cost?", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "score": -5.634914875030518, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4374957276924083, "gold_bleu_score": 0.33082428251841095}
{"index": 977, "beams": [{"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -0.0857698991894722, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -0.6591694951057434, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY (Treatments.date_of_treatment - Treatments.date_of_treatment) DESC LIMIT 1", "score": -3.7991480827331543, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment ASC LIMIT 1", "score": -3.8230841159820557, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.36602783203125, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.478099346160889, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.530869960784912, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.606906890869141, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.6345953941345215, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1", "score": -4.738621234893799, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -4.862084865570068, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.0394392013549805, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1", "score": -5.515195846557617, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT * FROM Breeds", "score": -5.605044841766357, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.date_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1", "score": -5.829851150512695, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}, {"orig_question": "Show me the cost of the most recently performed treatment.", "inferred_code": "SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment", "score": -5.956782341003418, "correct_code": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4805500497048476, "gold_bleu_score": 0.41474557462480066}
{"index": 984, "beams": [{"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "score": -0.03924805670976639, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "score": -0.44109290838241577, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"no\"", "score": -1.534359097480774, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -1.5378175973892212, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = \"no\"", "score": -1.5567713975906372, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -1.5686053037643433, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"no\"", "score": -1.5924228429794312, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.126859426498413, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"no\"", "score": -2.2252447605133057, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" OR Dogs.abandoned_yn = \"no\"", "score": -2.234926223754883, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.2942187786102295, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.3199663162231445, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT * FROM Breeds", "score": -2.3996334075927734, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.abandoned_yn = 0", "score": -2.685415029525757, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "score": -2.7176573276519775, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = \"yes\"", "score": -2.8695435523986816, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.47734223963990985, "gold_bleu_score": 0.41443758643117223}
{"index": 985, "beams": [{"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 0", "score": -0.11464347690343857, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -0.26899296045303345, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.weight = 1", "score": -0.7249127626419067, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.0124825239181519, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.4324158430099487, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.4616174697875977, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"no\"", "score": -1.484259843826294, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = \"yes\"", "score": -1.5175265073776245, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.596110463142395, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 1", "score": -1.6103678941726685, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "score": -1.6320329904556274, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.6325818300247192, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -1.9560341835021973, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT * FROM Breeds", "score": -2.0260977745056152, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\" AND Dogs.age = 0", "score": -2.0843279361724854, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}, {"orig_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "inferred_code": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = \"yes\"", "score": -2.485745906829834, "correct_code": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.3280904371947414, "gold_bleu_score": 0.3284870331214472}
{"index": 986, "beams": [{"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -4.893072605133057, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs JOIN Dogs ON Dogs.dog_id = Dogs.dog_id", "score": -6.405590057373047, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"What\"", "score": -6.844048023223877, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -6.844099998474121, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.0742058753967285, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"the\"", "score": -7.286775588989258, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"average\"", "score": -7.687020301818848, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE age", "score": -7.697107315063477, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -7.747556209564209, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs GROUP BY \"What\"", "score": -8.082741737365723, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "score": -8.182677268981934, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.233857154846191, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT AVG(Dogs.age) AS Dogs.age FROM Dogs", "score": -8.63577938079834, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.774474143981934, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "What is the average age of all the dogs?", "inferred_code": "SELECT * FROM Breeds", "score": -8.911568641662598, "correct_code": "SELECT avg(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.8744112806861306}
{"index": 987, "beams": [{"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs", "score": 0.0, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs EXCEPT SELECT AVG(Dogs.age) FROM Dogs", "score": -5.88735294342041, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs JOIN Dogs ON Dogs.dog_id = Dogs.dog_id", "score": -6.448909282684326, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"Compute\"", "score": -7.028655052185059, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"the\"", "score": -7.203563213348389, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"average\"", "score": -7.592926979064941, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE age", "score": -7.683045864105225, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs ORDER BY Dogs.age", "score": -8.186829566955566, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs GROUP BY \"Compute\"", "score": -8.201952934265137, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.243409156799316, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) FROM Dogs WHERE \"of\"", "score": -8.336443901062012, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT AVG(Dogs.age) AS Dogs.age FROM Dogs", "score": -8.669854164123535, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -8.960505485534668, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -9.724835395812988, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -9.821484565734863, "correct_code": "SELECT avg(age) FROM Dogs"}, {"orig_question": "Compute the average age of all the dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -9.823015213012695, "correct_code": "SELECT avg(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6835220555486654}
{"index": 988, "beams": [{"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -0.0001872893190011382, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -3.4371843338012695, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -3.668485403060913, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1", "score": -3.9251341819763184, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -4.121812343597412, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)", "score": -4.183372974395752, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.207950115203857, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT SUM(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -5.17024564743042, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs) ORDER BY Dogs.age DESC LIMIT 1", "score": -5.894517421722412, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT DISTINCT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -5.908410549163818, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT \"dog\"", "score": -6.711591720581055, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT \"oldest\"", "score": -6.74669885635376, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -6.868322849273682, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT * FROM Breeds", "score": -6.89438009262085, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC", "score": -7.2092509269714355, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "What is the age of the oldest dog?", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age LIMIT 1", "score": -7.615482807159424, "correct_code": "SELECT max(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6459156864442666, "gold_bleu_score": 0.3971835052851224}
{"index": 989, "beams": [{"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -0.03928891941905022, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -0.9687455892562866, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -2.8463141918182373, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs", "score": -3.062757730484009, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)", "score": -3.954087495803833, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs EXCEPT SELECT MAX(Dogs.age) FROM Dogs", "score": -4.06630277633667, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs EXCEPT SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.212324142456055, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT COUNT(*) FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.251772403717041, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -4.467640399932861, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT MAX(Dogs.age) FROM Dogs", "score": -4.6920270919799805, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1", "score": -4.698691368103027, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.14885950088501, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.527596950531006, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT * FROM Breeds", "score": -5.803388595581055, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT COUNT(*) FROM Dogs", "score": -6.239777088165283, "correct_code": "SELECT max(age) FROM Dogs"}, {"orig_question": "Tell me the age of the oldest dog.", "inferred_code": "SELECT SUM(Dogs.age) FROM Dogs", "score": -6.582103252410889, "correct_code": "SELECT max(age) FROM Dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6637848690831923, "gold_bleu_score": 0.3400426546498776}
{"index": 990, "beams": [{"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -0.00034692336339503527, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -2.3705830574035645, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.1339666843414307, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges GROUP BY Charges.charge_type", "score": -3.2047462463378906, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.378746509552002, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"How\" FROM Charges GROUP BY Charges.charge_type", "score": -3.6050267219543457, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -3.7265491485595703, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -3.8639755249023438, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges GROUP BY Charges.charge_type", "score": -3.9622011184692383, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"much\" FROM Charges GROUP BY Charges.charge_type", "score": -4.055780410766602, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"does\" FROM Charges GROUP BY Charges.charge_type", "score": -4.120072841644287, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"amount\" FROM Charges GROUP BY Charges.charge_type", "score": -4.138580322265625, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"charge\" FROM Charges GROUP BY Charges.charge_type", "score": -4.307803630828857, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, \"each\" FROM Charges GROUP BY Charges.charge_type", "score": -4.519311428070068, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT * FROM Breeds", "score": -4.746750354766846, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "How much does each charge type costs? List both charge type and amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, Charges.charge_id FROM Charges GROUP BY Charges.charge_type", "score": -4.7593183517456055, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9201134822735095, "gold_bleu_score": 0.3058273342423725}
{"index": 991, "beams": [{"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -2.245403038614313e-06, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges GROUP BY Charges.charge_type", "score": -5.048239707946777, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges EXCEPT SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -5.921177864074707, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges INTERSECT SELECT Charges.charge_type, Charges.charge_amount FROM Charges", "score": -6.202081203460693, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -6.293411731719971, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.326548099517822, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.341336727142334, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.498866558074951, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -6.855027675628662, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount", "score": -7.061983108520508, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type", "score": -7.099074363708496, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -7.5592360496521, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges WHERE Charges.charge_type", "score": -7.801581859588623, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT Charges.charge_type, Charges.charge_amount FROM Charges GROUP BY Charges.charge_type", "score": -8.078142166137695, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -8.157703399658203, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}, {"orig_question": "List each charge type and its amount.", "inferred_code": "SELECT * FROM Breeds", "score": -8.400769233703613, "correct_code": "SELECT charge_type ,  charge_amount FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9168103121742686, "gold_bleu_score": 0.5207835991485817}
{"index": 992, "beams": [{"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -0.046297382563352585, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -0.8295762538909912, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_amount) FROM Charges) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.7375648021698, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.775954008102417, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.8235714435577393, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.994962453842163, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1", "score": -4.09605598449707, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)", "score": -4.1544084548950195, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_type) FROM Charges) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.206183433532715, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.245023250579834, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_type) FROM Charges)", "score": -4.335978984832764, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_amount) FROM Charges)", "score": -4.456491470336914, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.464248180389404, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT * FROM Breeds", "score": -4.488218784332275, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type LIMIT 1)", "score": -4.64061164855957, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "How much does the most expensive charge type costs?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_amount) FROM Charges) ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.808231353759766, "correct_code": "SELECT max(charge_amount) FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.33446542465758666, "gold_bleu_score": 0.279935722968822}
{"index": 993, "beams": [{"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.805364824278513e-06, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)", "score": -3.2248408794403076, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_type) FROM Charges)", "score": -3.780897617340088, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_type) FROM Charges) ORDER BY Charges.charge_type DESC LIMIT 1", "score": -3.8776304721832275, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY COUNT(*) DESC LIMIT 1", "score": -3.8810312747955322, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT MAX(Charges.charge_type) FROM Charges) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -3.940415143966675, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -4.109230041503906, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = \"VALUE\" ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.466253757476807, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.496783256530762, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1", "score": -4.6245856285095215, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1", "score": -4.909026622772217, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -5.036893367767334, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT * FROM Breeds", "score": -5.180571556091309, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type ASC LIMIT 1", "score": -5.189836502075195, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY Charges.charge_type DESC LIMIT 1", "score": -5.376124382019043, "correct_code": "SELECT max(charge_amount) FROM Charges"}, {"orig_question": "What is the charge amount of the most expensive charge type?", "inferred_code": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3", "score": -5.406473159790039, "correct_code": "SELECT max(charge_amount) FROM Charges"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5054651270941756, "gold_bleu_score": 0.415195597384403}
{"index": 994, "beams": [{"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals INTERSECT SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": -4.757294654846191, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals EXCEPT SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": -4.846284866333008, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -5.301295280456543, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -5.678017616271973, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "score": -5.979465484619141, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals GROUP BY Professionals.email_address, Professionals.home_phone", "score": -6.103305339813232, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -6.627026081085205, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "score": -6.906098365783691, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.365818500518799, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals GROUP BY Professionals.email_address", "score": -7.536754131317139, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals LIMIT 1", "score": -7.701617240905762, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.761909008026123, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.865624904632568, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.917187213897705, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "List the email, cell phone and home phone of all the professionals.", "inferred_code": "SELECT * FROM Breeds", "score": -7.937696933746338, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9578714290329388, "gold_bleu_score": 0.5758477077149512}
{"index": 995, "beams": [{"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": 0.0, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals INTERSECT SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": -4.994166851043701, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals EXCEPT SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals", "score": -5.056965351104736, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -5.380258560180664, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.home_phone,Professionals.cell_number", "score": -6.013831615447998, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals JOIN Professionals ON Professionals.professional_id = Professionals.professional_id", "score": -6.0939836502075195, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals GROUP BY Professionals.email_address, Professionals.home_phone", "score": -6.15385103225708, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -6.611596584320068, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.cell_number", "score": -6.828467845916748, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.060408115386963, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals GROUP BY Professionals.email_address", "score": -7.146419048309326, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals WHERE Professionals.home_phone", "score": -7.165480136871338, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.234859943389893, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.67303991317749, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number FROM Professionals ORDER BY Professionals.email_address,Professionals.cell_number", "score": -7.772560119628906, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}, {"orig_question": "What are the email, cell phone and home phone of each professional?", "inferred_code": "SELECT * FROM Breeds", "score": -7.925555229187012, "correct_code": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6377936511959258}
{"index": 996, "beams": [{"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, Breeds.breed_name FROM Breeds", "score": -6.235916953301057e-05, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT Breeds.breed_code, Breeds.breed_name FROM Breeds", "score": -4.318337440490723, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -5.8653669357299805, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, Breeds.breed_name FROM Breeds GROUP BY Breeds.breed_code", "score": -6.536331653594971, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds", "score": -6.703893661499023, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, \"all\" AS Breeds.breed_name FROM Breeds", "score": -6.915765762329102, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds GROUP BY Breeds.breed_code", "score": -7.198164463043213, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.318114280700684, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.318943023681641, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, \"type\" FROM Breeds", "score": -7.489953994750977, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, \"the\" FROM Breeds", "score": -7.556292533874512, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, \"What\" FROM Breeds", "score": -7.5597825050354, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, \"the\" FROM Breeds", "score": -7.6043853759765625, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT * FROM Breeds", "score": -7.653946399688721, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_name, \"are\" FROM Breeds", "score": -7.691583633422852, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "What are all the possible breed type and size type combinations?", "inferred_code": "SELECT DISTINCT Breeds.breed_code, \"are\" FROM Breeds", "score": -7.710045337677002, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8699108665463778, "gold_bleu_score": 0.34258836619747074}
{"index": 997, "beams": [{"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs", "score": -4.2346610484855773e-07, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -4.642165184020996, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code", "score": -4.705094337463379, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, DISTINCT Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -4.74045991897583, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code, DISTINCT Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.41569709777832, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.484376430511475, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.size_code = \"VALUE\"", "score": -5.555634021759033, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs JOIN Breeds ON Dogs.size_code = Breeds.breed_code", "score": -5.582370758056641, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, COUNT(*) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.81801176071167, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, MAX(Dogs.size_code) FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -5.890604019165039, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -5.965571403503418, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.043672561645508, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.185889720916748, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs GROUP BY Dogs.breed_code, Dogs.size_code", "score": -6.200808048248291, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.214093208312988, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}, {"orig_question": "Find the distinct breed type and size type combinations for dogs.", "inferred_code": "SELECT * FROM Breeds", "score": -6.737004280090332, "correct_code": "SELECT DISTINCT breed_code ,  size_code FROM dogs"}], "db_name": "dog_kennels", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.2844409176927636}
{"index": 1000, "beams": [{"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY COUNT(*)", "score": -6.637549877166748, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -7.0588836669921875, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -7.2839436531066895, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -7.4158034324646, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -7.5412492752075195, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -7.570664405822754, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE \"How\"", "score": -7.989629745483398, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer WHERE \"many\"", "score": -8.005589485168457, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM singer", "score": -8.151849746704102, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Name", "score": -8.219527244567871, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -8.35108757019043, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Net_Worth_Millions", "score": -8.402189254760742, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -8.429369926452637, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -8.437529563903809, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "How many singers are there?", "inferred_code": "SELECT * FROM singer", "score": -8.617803573608398, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 1.0}
{"index": 1001, "beams": [{"orig_question": "What is the count of singers?", "inferred_code": "SELECT COUNT(*) FROM singer", "score": 0.0, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT COUNT(*) FROM singer UNION SELECT COUNT(*) FROM singer", "score": -5.606403350830078, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY COUNT(*)", "score": -6.449214458465576, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.157378196716309, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.394737720489502, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.500473499298096, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.525506973266602, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.602186679840088, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.7572479248046875, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -8.292109489440918, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -8.454683303833008, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT COUNT(*) FROM singer ORDER BY singer.Net_Worth_Millions", "score": -8.606223106384277, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM singer", "score": -8.688629150390625, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -8.71036434173584, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT * FROM singer", "score": -8.818950653076172, "correct_code": "SELECT count(*) FROM singer"}, {"orig_question": "What is the count of singers?", "inferred_code": "SELECT T(*) FROM singer", "score": -9.373693466186523, "correct_code": "SELECT count(*) FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8968068482588875, "gold_bleu_score": 0.3678169127800635}
{"index": 1004, "beams": [{"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer EXCEPT SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": -5.857297420501709, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"VALUE\"", "score": -6.047878265380859, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer INTERSECT SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": -6.236476898193359, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"?\"", "score": -6.283576011657715, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"singers\"", "score": -6.4452080726623535, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"of\"", "score": -6.649091720581055, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.1313629150390625, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer ORDER BY singer.Birth_Year,singer.Citizenship", "score": -7.211716651916504, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.230264186859131, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.585532188415527, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.821682929992676, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.856971263885498, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT * FROM singer", "score": -7.8923163414001465, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer GROUP BY singer.Birth_Year", "score": -8.128632545471191, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth year and citizenship of singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer ORDER BY singer.Citizenship", "score": -8.373244285583496, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6525202111539576, "gold_bleu_score": 0.6925029068250624}
{"index": 1005, "beams": [{"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": 0.0, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer EXCEPT SELECT singer.Birth_Year, singer.Citizenship FROM singer", "score": -5.942869186401367, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"VALUE\"", "score": -6.120631217956543, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"?\"", "score": -6.3329949378967285, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"singers\"", "score": -6.6324462890625, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer WHERE singer.Name = \"of\"", "score": -6.642741680145264, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -6.7334513664245605, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -6.821629047393799, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -7.1930251121521, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -7.848315715789795, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -8.013941764831543, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -8.09403133392334, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT * FROM singer", "score": -8.112709045410156, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer GROUP BY singer.Birth_Year", "score": -8.267302513122559, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer ORDER BY singer.Citizenship", "score": -8.451824188232422, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}, {"orig_question": "What are the birth years and citizenships of the singers?", "inferred_code": "SELECT singer.Birth_Year, singer.Citizenship FROM singer ORDER BY singer.Birth_Year", "score": -8.508228302001953, "correct_code": "SELECT Birth_Year ,  Citizenship FROM singer"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8141060310617929, "gold_bleu_score": 0.7268144310166508}
{"index": 1006, "beams": [{"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France\"", "score": -3.6179463336338813e-07, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France\" EXCEPT SELECT singer.Name FROM singer WHERE singer.Citizenship = \"France\"", "score": -3.988255500793457, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer JOIN singer ON singer.Singer_ID = singer.Singer_ID WHERE singer.Citizenship != \"France\"", "score": -4.867849349975586, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France\" AND singer.Citizenship = \"France\"", "score": -4.925106525421143, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France\" AND singer.Citizenship != \"France\"", "score": -5.2229719161987305, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != MOD(\"France\", singer.Citizenship) != \"France\"", "score": -5.336577892303467, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France France\"", "score": -5.875828266143799, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -6.047499656677246, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship = \"France\"", "score": -6.27998161315918, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -6.393574237823486, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"France : VALUE\"", "score": -6.558735370635986, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -7.130509853363037, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -7.282036304473877, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -7.33119535446167, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT * FROM singer", "score": -7.380676746368408, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "List the name of singers whose citizenship is not \"France\".", "inferred_code": "SELECT singer.Name FROM singer GROUP BY singer.Citizenship != \"France\"", "score": -7.449920654296875, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 1.0, "gold_bleu_score": 0.6076289910660269}
{"index": 1007, "beams": [{"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"French\"", "score": -1.3194874100008747e-06, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"French\" EXCEPT SELECT singer.Name FROM singer WHERE singer.Citizenship = \"French\"", "score": -3.8753793239593506, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer JOIN singer ON singer.Singer_ID = singer.Singer_ID WHERE singer.Citizenship != \"French\"", "score": -4.6179423332214355, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"VALUE\"", "score": -4.630675315856934, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"not French\"", "score": -4.885746479034424, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"French\" AND singer.Citizenship != \"French\"", "score": -4.978006362915039, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT * FROM singer", "score": -5.3005475997924805, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"% French\"", "score": -5.403787136077881, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"are French\"", "score": -5.969664573669434, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT * FROM singer", "score": -5.990508079528809, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != 3", "score": -6.00246524810791, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"French VALUE\"", "score": -6.24545955657959, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT * FROM singer", "score": -6.336389064788818, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship != \"yes\"", "score": -6.347867488861084, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Citizenship = \"French\"", "score": -6.412730693817139, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}, {"orig_question": "What are the names of the singers who are not French citizens?", "inferred_code": "SELECT * FROM singer", "score": -6.784051895141602, "correct_code": "SELECT Name FROM singer WHERE Citizenship != \"France\""}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.9269287704596713, "gold_bleu_score": 0.6580853322094203}
{"index": 1010, "beams": [{"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -2.277420207974501e-08, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -3.884553909301758, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer EXCEPT SELECT singer.Net_Worth_Millions FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -5.776854038238525, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer)", "score": -6.088006973266602, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT \"largest\"", "score": -6.570545196533203, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -6.971888542175293, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT * FROM singer", "score": -7.023922920227051, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT * FROM singer", "score": -7.060958385467529, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions DESC LIMIT \"largest\"", "score": -7.065861225128174, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC LIMIT 1", "score": -7.078494548797607, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT \"the\"", "score": -7.185306072235107, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions ASC LIMIT 1", "score": -7.2754621505737305, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT \"net\"", "score": -7.279857158660889, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT \"worth\"", "score": -7.329052925109863, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT * FROM singer", "score": -7.56881856918335, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer with the largest net worth?", "inferred_code": "SELECT * FROM singer", "score": -7.646405220031738, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8434033626356119, "gold_bleu_score": 0.6028323645831173}
{"index": 1011, "beams": [{"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -3.6438731854104844e-07, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -3.367302417755127, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.055716037750244, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer GROUP BY singer.Name ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.191948890686035, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -4.367008686065674, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer)", "score": -4.491900444030762, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY COUNT(*) DESC LIMIT 1", "score": -4.957615375518799, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer UNION SELECT singer.Name FROM singer GROUP BY singer.Net_Worth_Millions ORDER BY singer.Net_Worth_Millions DESC LIMIT 1", "score": -5.076892375946045, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT * FROM singer", "score": -5.492512226104736, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer GROUP BY singer.Net_Worth_Millions ORDER BY COUNT(*) DESC LIMIT 1", "score": -5.580455303192139, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions ASC LIMIT 1", "score": -5.743757724761963, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC LIMIT 1", "score": -5.7445759773254395, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (SELECT MAX(singer.Net_Worth_Millions) FROM singer) ORDER BY singer.Net_Worth_Millions DESC LIMIT \"most\"", "score": -6.682232856750488, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions + singer.Net_Worth_Millions DESC LIMIT 1", "score": -6.688384056091309, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT * FROM singer", "score": -6.931459903717041, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}, {"orig_question": "What is the name of the singer who is worth the most?", "inferred_code": "SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT \"most\"", "score": -7.219017028808594, "correct_code": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8658925344816067, "gold_bleu_score": 0.528066624632559}
{"index": 1018, "beams": [{"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -2.820943620918115e-07, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -4.354499340057373, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON song.Singer_ID = song.Song_ID", "score": -4.3863444328308105, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \". of\"", "score": -4.489903450012207, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"of\"", "score": -4.587713241577148, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"singers\"", "score": -4.603425979614258, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \". songs\"", "score": -4.608541488647461, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \". .\"", "score": -4.617193698883057, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"songs\"", "score": -4.692318439483643, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"Show\"", "score": -4.721728801727295, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Title, singer.Name", "score": -4.9159135818481445, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT * FROM singer", "score": -5.40875244140625, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID", "score": -5.47169303894043, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Name", "score": -5.521103382110596, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT song.Title LIKE singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -5.901920795440674, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "Show titles of songs and names of singers.", "inferred_code": "SELECT * FROM singer", "score": -5.980466365814209, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.6745269382764363, "gold_bleu_score": 0.3726151189902587}
{"index": 1019, "beams": [{"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -2.068691316026161e-07, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -3.951293706893921, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"?\"", "score": -4.092054843902588, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID", "score": -4.314699172973633, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -4.558629035949707, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -4.588307857513428, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON song.Singer_ID = song.Song_ID", "score": -4.615501403808594, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -4.637712478637695, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"What\"", "score": -4.701178550720215, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Name = \"titles\"", "score": -4.731647491455078, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID", "score": -5.261811256408691, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -5.401946544647217, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT song.Title, singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID ORDER BY singer.Name", "score": -5.429137229919434, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -5.57963752746582, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -5.863524913787842, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}, {"orig_question": "What are the song titles and singer names?", "inferred_code": "SELECT * FROM singer", "score": -6.03700590133667, "correct_code": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.4479856822704179, "gold_bleu_score": 0.342921550841815}
{"index": 1020, "beams": [{"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -6.550342277478194e-07, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -2.4507603645324707, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT * FROM singer", "score": -3.141728639602661, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT * FROM singer", "score": -3.1810343265533447, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 AND song.Singer_ID IN (SELECT DISTINCT song.Singer_ID FROM song WHERE song.Sales > 300000)", "score": -3.462421417236328, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -3.5109996795654297, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales = 300000", "score": -3.780242443084717, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales >= 300000", "score": -3.9146595001220703, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 ORDER BY singer.Name", "score": -4.00597620010376, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT * FROM singer", "score": -4.053516387939453, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 0", "score": -4.1773505210876465, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT MIN(singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -4.304920673370361, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 GROUP BY song.Singer_ID", "score": -4.5701494216918945, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name, \"Show\" FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -4.674347877502441, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales >= 300000", "score": -4.738893508911133, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "Show distinct names of singers that have songs with sales more than 300000.", "inferred_code": "SELECT DISTINCT singer.Name, \"that\" FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -4.777454376220703, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.7605262259564145, "gold_bleu_score": 0.5394135268197474}
{"index": 1021, "beams": [{"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -0.0006906605558469892, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000", "score": -1.7938657999038696, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer WHERE singer.Net_Worth_Millions > 300000", "score": -2.3472323417663574, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -2.7839934825897217, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -2.786374092102051, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -3.033860445022583, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT singer.Name FROM singer WHERE singer.Net_Worth_Millions > 300000", "score": -3.1771762371063232, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -3.2617344856262207, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -3.566446304321289, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -3.5686771869659424, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 EXCEPT SELECT DISTINCT song.Singer_ID FROM song WHERE song.Sales > 300000", "score": -3.5792222023010254, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -3.7250375747680664, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT MIN(singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000", "score": -3.8823533058166504, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -3.9471166133880615, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT * FROM singer", "score": -4.1744771003723145, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}, {"orig_question": "what are the different names of the singers that have sales more than 300000?", "inferred_code": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 ORDER BY singer.Name", "score": -4.28508996963501, "correct_code": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"}], "db_name": "singer", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5926722909772558, "gold_bleu_score": 0.4555721945126309}
{"index": 1030, "beams": [{"orig_question": "How many available features are there in total?", "inferred_code": "SELECT COUNT(*) FROM Other_Available_Features", "score": 0.0, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT COUNT(*) FROM Other_Available_Features UNION SELECT COUNT(*) FROM Other_Available_Features", "score": -5.205198287963867, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.353893280029297, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.407716274261475, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.556026458740234, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.583914756774902, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.597911834716797, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -7.97105073928833, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT COUNT(* - Other_Available_Features.feature_id) FROM Other_Available_Features", "score": -8.0270414352417, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT COUNT(*) FROM Other_Available_Features ORDER BY Other_Available_Features.feature_name", "score": -8.105319023132324, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT DISTINCT COUNT(*) FROM Other_Available_Features", "score": -8.333564758300781, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -8.391631126403809, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -8.437017440795898, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -8.579106330871582, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -8.87264347076416, "correct_code": "SELECT count(*) FROM Other_Available_Features"}, {"orig_question": "How many available features are there in total?", "inferred_code": "SELECT T(*) FROM Other_Available_Features", "score": -8.921683311462402, "correct_code": "SELECT count(*) FROM Other_Available_Features"}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.8667284195701088, "gold_bleu_score": 0.5458923540709608}
{"index": 1031, "beams": [{"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\"", "score": -1.1630940832674241e-07, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\" EXCEPT SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\"", "score": -2.743379592895508, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -3.1635241508483887, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\" AND Other_Available_Features.feature_type_code = \"AirCon\"", "score": -3.4684672355651855, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\"", "score": -3.510425567626953, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code JOIN Other_Available_Features ON Other_Available_Features.feature_id = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"AirCon\"", "score": -3.7601490020751953, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"Air AirCon\"", "score": -3.850724697113037, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"feature AirCon\"", "score": -4.3782830238342285, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -4.584404945373535, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code GROUP BY Other_Available_Features.feature_type_code HAVING COUNT(*) = 1", "score": -4.696427345275879, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -4.714974880218506, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code GROUP BY Other_Available_Features.feature_type_code = Other_Available_Features.feature_name = \"AirCon\"", "score": -4.804556846618652, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -4.910547733306885, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name = \"featureCon\"", "score": -4.950212478637695, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features ON Ref_Feature_Types.feature_type_code = Other_Available_Features.feature_type_code WHERE Other_Available_Features.feature_name != \"AirCon\"", "score": -5.116041660308838, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}, {"orig_question": "What is the feature type name of feature AirCon?", "inferred_code": "SELECT * FROM Ref_Feature_Types", "score": -5.209257125854492, "correct_code": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""}], "db_name": "real_estate_properties", "gold_sql2ot_fail": false, "gold_ot3_fail": false, "gold_nubia_score": 0.5850330241864526, "gold_bleu_score": 0.5609190390216617}
