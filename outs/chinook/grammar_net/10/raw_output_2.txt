{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14590820237120888, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.14764692353650188, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.18161108248398022, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.1873154990791558, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18800348108358744, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.1964586276702746, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22749237760292265, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23142140632027372, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.23167617347940797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2385169943413355, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25587878762106797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26856751706540444, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.27401847615647157, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27785932185212625, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.27898398015018055, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.17166269668449397, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23035180390402907, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23399021940698048, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.24207467827173137, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25282601160566, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2548201303489026, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26234308821951696, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2638007663882034, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.26575278181339546, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2687815673106334, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2696942109240338, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2710984354277121, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27449474863669554, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.28765493532521963, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.29281442946860686, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16090442585103815, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2064090205016439, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.206468209726258, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.21447718111812716, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22177148538062305, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24673706203953857, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24873559754643612, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2638787589316202, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26825143472736035, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2771642750880503, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.27878256346891533, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2819402105571056, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2833675195764589, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2894188392868345, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.29049104904761197, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Album.ArtistId),Track.Name,=,Coma),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3849159998532352, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.4256876595528622, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.43776425213141695, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma), Genre.Name),Genre.Name))", "score": -0.43986299756343955, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Coma),Album.AlbumId,Track.AlbumId),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))", "score": -0.44301271844394513, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4515043220193377, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.45213121334752754, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.AlbumId,Track.AlbumId),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))", "score": -0.45285987041268366, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Coma), Genre.Name),Genre.Name))", "score": -0.46448410385791145, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4729101439382669, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.4755138466399729, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4764704133668364, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.4773279063217362, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.48445848845319156, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4855968262048813, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.16616216414746793, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1693038300194624, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.20645553326261076, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.22661851194579902, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.240368366855364, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.24702966640614418, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.251017042199017, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2628963638167196, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2735846638982314, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(Album),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.279145988415638, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.29567794531403285, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30497691753828304, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3066327206131583, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3095921955003516, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.32109720334176906, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.1842836163732897, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.2082781234216993, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.23396798368757632, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.29849776612645645, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3009155602761379, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3175215110585831, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.32161744400251097, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3415160181069927, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3456119510509206, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3461171469180264, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.34765339004001045, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.34853494106770794, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3545131236083011, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.36521518067399134, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Track.Name))", "score": -0.36687215711924015, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1494347718749429, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16786908314190988, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17875778702935152, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.1858846786797693, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.1890055986682976, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18975232416206242, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19877385658469857, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2046952830025235, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21118786248473645, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21289749629790064, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2204364851079091, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.2204636114467117, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22234222507065746, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.22274109463103478, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.22740211338154057, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.03529104077097145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.33458523125227657, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.47052999631341663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4719096650260326, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5886371065753337, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5930963684695598, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.5974442005277196, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6088271057004948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.622178785957658, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Employee.Address))", "score": -0.6491662282387551, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Invoice.BillingAddress))", "score": -0.6819574851433572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.6868796264643606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.6975355078357097, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.7625590503476121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.7656221566620165, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.45030890705208804, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.4718673190353362, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.49062142915381024, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5022694426984793, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5119450848800674, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5121798411370584, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5121945675549378, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5156539366835142, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5279866361822568, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5401033403744475, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5454734629295445, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5474347955621433, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.Milliseconds),Track.Name))", "score": -0.5494289360149031, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5752174688037016, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5811558647432843, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.25982472534277196, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2786811780007505, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2829111635703801, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29573959253408677, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.29799653132627085, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3071698053044278, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.3101344413341296, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3133526676053981, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.3166560790986567, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3199982342681344, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3207946409916224, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32607675996200325, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32618109932113365, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.UnitPrice),Track.Name))", "score": -0.3761373703945318, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.UnitPrice),Track.Name))", "score": -0.38827528040239057, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.11622735585217972, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.12478336372372766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.135455988426841, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.16953483378004117, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18902586028962418, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23646735758631396, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2906606855096031, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30819653877129977, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.33663600258989557, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.36016949181509283, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,2509409),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.38212706159030774, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Bytes,!=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4098313639912787, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Track),Album.AlbumId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4276235151766671, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Track.Bytes,=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.4459638485253182, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,2509409), Artist.Name),Artist.Name))", "score": -0.4520489662639084, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.11489001163770458, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.13733947315372602, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.15644194254529262, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18768013188402236, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.19678436061105276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.2997843331285546, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3288523674746017, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Artist),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3439225436785778, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Employee),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.3609970581210054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Employee),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.36160781485793686, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Employee),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37248353340096524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Genre.GenreId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.38950366950368104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Employee.PostalCode))", "score": -0.3913007124258393, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Invoice.BillingCity))", "score": -0.39345893571137147, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.3991209980065824, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3227391421186127, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.32643413548430794, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3408137006447595, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.34450869401045475, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3614500188117616, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3772294420071431, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3796943298424402, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3809244353728383, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.38787451445021615, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3915695078159114, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3953039381509685, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.39899899957010526, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), Track.TrackId),Track.Bytes)", "score": -0.4009046247900888, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Redmond), Customer.Email),Track.Bytes))", "score": -0.41273503307820647, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Redmond), Invoice.Total),Track.Bytes))", "score": -0.42233160440446227, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.04369478135049576, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Country),Employee.LastName))", "score": -0.3856100498014712, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.4579563524821424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.Country))", "score": -0.463262368204596, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.4735465617611982, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.4948963716608821, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.49557265935277517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.517166025178055, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.5207226094097256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.522167840252223, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5236207895966827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5385158350777388, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5487840001515668, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Phone),Employee.LastName))", "score": -0.559416717129352, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Track.Name))", "score": -0.5678213129067444, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.20325423273339677, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2342976356483655, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.24886492514274766, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.288371298784298, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.29133888689401516, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.29196447598664504, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.2939512484382654, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3065317654810272, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3133463155341412, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31395159163955805, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3243327158030877, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3243846020383363, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32496850786038606, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32791359409161097, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3411474489774567, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.2529254141911047, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.2735666818669649, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.3098303419351318, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.32632396230352745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate)", "score": -0.34113806582329614, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.35323481004617385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.3562457166070043, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.3625876223716944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.4056853123737006, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Invoice.Total),Invoice.Total)", "score": -0.42467965954335823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.4267027431791241, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Employee.BirthDate)", "score": -0.4272708408324833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.43975184205919504, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.4413404508603761, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate)", "score": -0.4414474616783653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11397302343628528, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.15791267639976847, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.17828025107319836, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17910699443486774, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18040787367841896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19168951493524133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20386947193325364, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20677191881201554, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21584691570648024, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.21670352517767366, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2170258715774783, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.22841422786339158, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2307734750999015, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24940647922738854, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.25169799546453286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.08578544354168116, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.27610421797362505, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.3576994450959319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.41777795890448033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.4703826816949004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.5219581766250485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.5438412638577574, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.5550292344960326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.571482781899249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.6003280264521891, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6036430631029361, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.6050469857837015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6080967333364242, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6162304492863768, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6272927288628125, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.026499088487919317, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.6526180603223211, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6940309931170222, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingPostalCode),Artist.Name)", "score": -0.7226031307282079, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7397258916173758, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7903431280185313, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), InvoiceLine.InvoiceLineId),Artist.Name)", "score": -0.8460125209884211, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Album.AlbumId),Artist.Name)", "score": -0.8597310422393071, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Album.ArtistId),Artist.Name)", "score": -0.8733505321220907, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Track.TrackId),Artist.Name)", "score": -0.8791060203688044, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.8791199776058255, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.ArtistId),Artist.Name)", "score": -0.8800146517724182, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.8831021082469444, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.9189325310325918, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.924515104558191, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.029096736133734882, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6025479260439212, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.6702643389423708, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -0.7072979618146681, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.8526536075150943, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -0.8528548860256437, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.FirstName))", "score": -0.9185590582852465, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -0.9984938083668023, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.0226777145729915, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.034910432160832, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.0354170236497942, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.City))", "score": -1.0373787266769554, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Customer.FirstName),Album.Title))", "score": -1.0462978473995717, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.08732173735561, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Customer.City),Album.Title))", "score": -1.0918352385478216, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19971689027937145, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.20250155063598024, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.21250326877249712, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.23438875641498544, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2619930627186621, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.30294693184710525, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3035178926295433, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.31244027148149967, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3347822847185931, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3520420132220758, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35522200364414547, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,!=,Jazz),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3582562769862534, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,!=,Jazz),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.36166210792504894, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,!=,Jazz),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3623112433020835, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3784884083528696, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.14503568475484643, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.18242427026102656, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.1915566596617216, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.195414536929833, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20121354912533274, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20770792349672645, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2152114998306865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21922421578638318, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22072539474045225, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2673527790843493, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.26832615198646736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.2703828479288149, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.27221610787825506, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28682231326268093, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29561974110433215, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.23496219313528854, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2741604262104541, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.2875466177693411, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Genre.Name))", "score": -0.32012949060536744, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Genre.Name))", "score": -0.33351568216425437, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Genre.Name),Track.Name))", "score": -0.3355501405803208, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.34048615836047375, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Genre.Name),Track.Name))", "score": -0.3489363321392077, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.3757205791765303, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Genre.Name),Genre.Name))", "score": -0.38151920497523406, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.3891067707354173, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,!=,Jay Kay),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Genre.Name))", "score": -0.393789233530799, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Genre.Name),Genre.Name))", "score": -0.39490539653412104, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), MediaType.Name),Track.Name))", "score": -0.3963715209281368, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.39666146595151136, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.11221769687944952, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1315495533092571, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),Track.Milliseconds),Album.Title))", "score": -0.17237629544433852, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),Track.Milliseconds),Album.Title))", "score": -0.1866080176668807, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.22707902193043306, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33744857094625735, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.399969857036253, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,InvoiceLine.InvoiceId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4016697517024412, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.40609609385422574, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.41613484073443, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),InvoiceLine.Quantity),Album.Title))", "score": -0.4219220394952132, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),Track.Bytes),Album.Title))", "score": -0.42346514646204303, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),InvoiceLine.Quantity),Album.Title))", "score": -0.4247560203590239, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4257971582956766, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),Track.UnitPrice),Album.Title))", "score": -0.4270269981322287, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.018357975332037313, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.4156657200474001, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.5218016086169375, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.534775566120613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5564652564936984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5565340122933229, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5611347742898557, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,U2), Track.Bytes),Track.Bytes))", "score": -0.5679091943129606, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),filter(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Composer,=,U2),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5743707195330171, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5762424724032083, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Employee.Email))", "score": -0.592941506223724, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5979321627762936, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5980009375424623, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Name),Track.Bytes))", "score": -0.6137285990807868, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,U2), Track.Bytes),Track.Bytes))", "score": -0.6511232388838835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.020661274347730796, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.3413918403948628, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6009167354339797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6363738886535216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.6498362360562169, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingState),Invoice.BillingState))", "score": -0.6670126618297391, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Employee.State))", "score": -0.6688931889557457, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Employee.State))", "score": -0.678221022388243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.6849002992075839, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6925777832244755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6966749075145311, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.7043503421752877, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.7280349364440175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Employee.Address))", "score": -0.747712356765883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.7555351719121268, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1259695506374391, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1306744961041428, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.16898316120226384, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1933938280033598, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21466463378476233, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21493975116435418, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36223998487363523, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3625151022532271, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.37357642407397323, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3977579402825355, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39803305766212743, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4142379710263522, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.43843431963896184, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4485921001455825, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45551735414797795, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.15484744014214255, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.1717678238565924, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.1864470094037881, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1864621220535452, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1879112293578985, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.19305748866821693, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20111603945137502, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.2026680562632214, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.20437780534788053, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20888246645124306, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20961142140779135, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2124433261717275, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.21814311269301356, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2215525205195074, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.22408748077687418, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.20975292825229025, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2251622669743651, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.2676530143216234, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.28968292909747384, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2902109426923602, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))", "score": -0.2953437771450433, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Track.Bytes,!=,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.30131810724965463, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30543093157818685, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.32383306658640426, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3241888210134429, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.32456777107948936, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.32640606159439156, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.32669251383050424, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3289097544114529, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Artist),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.34485972859092, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.State),Employee.State))", "score": -0.21391805504773753, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Fort Worth), Employee.State),Employee.State))", "score": -0.2273605877708178, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.State),Employee.State))", "score": -0.2913680299648761, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Fort Worth), Employee.State),Employee.State))", "score": -0.32485579469005815, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,=,Fort Worth),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.34347521319566676, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.Country),Employee.State))", "score": -0.3442463744103653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3489823111016901, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3563249343257111, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3694025000610904, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.State),Employee.State))", "score": -0.37979434078442864, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3814555689409311, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Fort Worth), Employee.State),Employee.State))", "score": -0.38429546699449274, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.3985084055004696, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4015866333793383, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Fort Worth), Employee.State),Employee.State))", "score": -0.40230577289519254, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.16638800173946444, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.19568249834829304, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21904890105426036, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22613715093104103, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2347466002053596, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)", "score": -0.24198834242052794, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.24963453490846155, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25498073640448393, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2575999336656862, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.259154742630346, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada), Track.Milliseconds),Track.Milliseconds))", "score": -0.2594054628963625, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26352163973535264, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.2685907531815702, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27023603126859613, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.29599980602994885, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,Five Years Gone), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.37198324914985986, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.37540111669746357, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.38116688819209316, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.38273975974468727, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.40380938724028487, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4072709885287922, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.41645462757102547, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,Five Years Gone), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.41802804799713733, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4232849402942504, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.42567610913541, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4260148014360926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.42721167860762244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(MediaType),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4401011791614539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4508025836474175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), Invoice.BillingCountry),InvoiceLine.Quantity))", "score": -0.46506733678032486, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.0679639042983936, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.3799156702516484, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.3842539526186711, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.40181614469213317, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.43053911129468414, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.46247775640865685, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.47370150054187365, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5109913480176754, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5189234867134045, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.5257198304166104, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5315300698664656, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5568079729284438, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5795049315118871, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5808474867214536, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.620622722388382, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14821251475398053, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16159298334842437, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.1695848157390555, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17056477727154806, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17592738422299126, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.18823937141457694, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.19635042855094223, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1976679537741813, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20736882950280008, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21237175045029838, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21535524062781086, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22089670175790196, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2273308163938774, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2282808658068091, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.2382285002870253, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03555837158415274, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.6662589154841161, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7251003698225974, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -0.7491202210247919, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -0.8659614149085587, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8911388028645888, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.0640087312393707, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.UnitPrice)", "score": -1.078022948156051, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0873361946914128, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1161391039864055, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Track.UnitPrice)", "score": -1.1608842536967268, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.UnitPrice))", "score": -1.182484086583673, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.20065319325961, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.211888038626542, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.2247252010057799, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.07905970476167568, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1882854249288357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4269182026346243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43269174694614776, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4871568620164908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5361439228017844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5419174671133078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5660896837671316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5963825821836508, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6171817719896353, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6388503383805073, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6753154039342917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7264075072907872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7369265650359011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7403903369286127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.15515300587620717, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.20334538728956164, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.24287606914060053, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3005060865771002, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.32072939282145485, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.3316829021760624, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3364841217495073, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.34022508811516905, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.3641312367811585, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.36535869175503427, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3686481687758433, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38553553061436335, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.38575390924299885, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38942659126924345, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.38964499305227196, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.015924342880817434, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.5739907322954908, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6022030399490989, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.620042312982908, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6296260392187801, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6578384576259314, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6977098472575146, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Customer.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.6992928033491912, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7259221549111227, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7425295590050229, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7533449747600639, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Invoice.BillingCity,!=,None), Artist.Name),Artist.Name))", "score": -0.7542364665780267, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7549203464491016, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Customer.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.7549282387119802, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Artist),Employee.Title,!=,None), Artist.Name),Artist.Name))", "score": -0.859973134669417, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.12306626090985373, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.21319298869521064, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.22786983086371534, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23275591872095436, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23702755186972205, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2412318811515604, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24708093076048596, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25110596234869254, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2798129650490175, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2939966529915176, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29523900925623375, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.33917496975649536, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34720547119908485, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Album),Album.ArtistId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId), Album.Title),Album.Title))", "score": -0.3955885952789261, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Album),Album.ArtistId,Album.AlbumId),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40762328944646375, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.039491377501690295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.3341815059175133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Employee.PostalCode))", "score": -0.362355667828524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Customer.PostalCode))", "score": -0.44676442231138935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5723455675979494, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Artist.ArtistId))", "score": -0.5743989830007195, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.6318585304179578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.6761493881567731, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.Country),Customer.PostalCode))", "score": -0.6811431774040102, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.717670205012837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.7414545507272123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.FirstName))", "score": -0.7571512942304253, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.FirstName),Customer.PostalCode))", "score": -0.7679126986404299, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Employee.PostalCode))", "score": -0.7696287126382231, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.7730278400340467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.13258320398948664, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20543440183567904, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.23434380399088495, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23677955147746826, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.23833511249687994, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24589773206109428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25673688331364025, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2657657456351504, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2996745112429229, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.3002193560424407, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3025925125482381, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.30358408451053015, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.3067776523696055, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.31178953557083433, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3234509194952288, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23783035979795386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24992479787397315, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27487750754880835, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3966927047185891, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40878714279460837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4337398524694436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5030228535943024, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5156494717411988, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.526314474951505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5355968813710206, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5384089130275242, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5428547489755147, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5468483607583039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5472234118096821, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5549491777383082, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Milliseconds))", "score": -0.19878094957493886, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.20746033952855214, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Milliseconds))", "score": -0.34285813139103993, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.3515375213446532, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))", "score": -0.36723511607669934, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.3759145060303126, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.39306872652196034, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Bytes))", "score": -0.39682478026770696, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Name))", "score": -0.4017481164755736, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Bytes),Track.Milliseconds))", "score": -0.5113122978928004, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.5199916878464137, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Bytes))", "score": -0.540901962083808, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.5615228930237208, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Bytes))", "score": -0.5652789467694674, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.5702022829773341, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.23485375452104956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.24044977717359864, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.24330919312380617, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.24420781512016196, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.26614195369791044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Bossa Nova), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.27530903840509613, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2826291415809206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2987850297478889, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),InvoiceLine.Quantity))", "score": -0.2988206613798437, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.29968365174424466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.30422703087285685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.31049694140858314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.32189837829120926, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.32695530749677887, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),InvoiceLine.Quantity))", "score": -0.3271400864480387, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.04078362729145389, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.578646499464373, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.6811009656151754, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.7424065361384637, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Country))", "score": -0.7496594659574258, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.7914415142023395, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Track.Name))", "score": -0.844813187418709, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),MediaType.Name))", "score": -0.8606866932223587, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.8758745343002969, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.CustomerId))", "score": -0.8778609786307566, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.9133247462695556, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.9142011523516177, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.921199746729165, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Playlist.Name))", "score": -0.9223769771391915, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Invoice.BillingCountry))", "score": -0.9607401468053085, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.37785124273312065, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.37824193369290265, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38653634224444566, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38692703320422767, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39194546260375057, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3927621182310913, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,Hermeto Pascoal),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.39410451493492343, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.3962201286236825, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39662909255368783, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39701978351346984, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.40095345957919, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.4017701152065307, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.40531421167604387, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.40570490263582587, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.43739863839371534, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.02897743773246475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.3759901829489536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Employee.Phone))", "score": -0.4924375920982129, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.LastName),Customer.Phone))", "score": -0.5797765970655746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Track.Composer))", "score": -0.6205257385463483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6227295704611606, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6284894653090305, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Playlist.PlaylistId))", "score": -0.6355148165912397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Country),Customer.Phone))", "score": -0.6668542147108383, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6694788046606845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6714828320273227, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Fax),Customer.Phone))", "score": -0.6781644940801925, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Customer.LastName))", "score": -0.6788050144405133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6831058569678135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.699064285350687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))", "score": -0.023080111564922845, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.State),Customer.Address))", "score": -0.4664181425141578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))", "score": -0.5165050541309422, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Country),Customer.Address))", "score": -0.5677367701100593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Employee.Address))", "score": -0.5690525626669114, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.State))", "score": -0.5744547700414842, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Mark),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5802772291351436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Mark),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.5901692739076522, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Invoice.BillingAddress))", "score": -0.6291997885236924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Invoice.BillingAddress),Customer.Address))", "score": -0.6337297215031867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Employee.Address),Customer.Address))", "score": -0.6568534626530891, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Mark), Customer.Address),Customer.Address))", "score": -0.6866326155395654, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Country))", "score": -0.6912005400190537, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Mark), Customer.Address),Customer.Address))", "score": -0.750492762275826, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.PostalCode),Customer.Address))", "score": -0.7645018949078803, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.22452207410242409, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.23860498273279518, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.36885871121194214, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.3822507386794314, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.38294161984231323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3963336473098025, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Employee.Country),Employee.Country))", "score": -0.4624707860639319, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.476553694694303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.49493935832288116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.5090222669532523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.5265873757889494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Customer.Country))", "score": -0.5288269048323855, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5406702844193205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5429098134627566, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Employee.Country),Employee.Country))", "score": -0.544299797504209, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.020043844533574884, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.37619469984383613, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5237164046317652, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5926255555259559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6043589146689736, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6058530153312122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.624537362893534, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6441739745805535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6534685330391949, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6540141094231869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6753147981962684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6788035921143294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6897836469015601, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7016296957983665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7031962416967872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11588423586170171, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15478602223369797, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.1578285616507005, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1785161468465206, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.17967113177348615, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.2042064551617592, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.2071552998289863, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2141583531724132, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23616153392750708, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.2624557534857419, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.270684521239194, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3004829028785563, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3053323964641546, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.3218826839987587, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.34320741485959205, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.22001581786589514, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.22075168523354347, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.23200927783962094, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.24734754196233186, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2658216109537533, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.26618469596300487, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2671775561206071, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.27560239161147687, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2781781559367306, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2821050710321104, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.28653386290706645, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.28761055700203797, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.30551571510593273, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3063638770653417, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.3096098748185872, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3358835525282665, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3473461116227158, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3551295580589845, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),getData(Track),Genre.GenreId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3577516367508956, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3650047476319226, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36876748277696236, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37740776655871916, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3785262048644672, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38519127410348897, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),getData(Track),Genre.GenreId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38750187894587357, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3901065713705733, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3909168927725025, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.39895516636853406, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3998652855808104, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40067560602791935, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.032117849263226465, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.7558868078790347, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.Total),Invoice.Total))", "score": -0.8841932128852932, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8872983694927304, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -1.052406673374858, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.Total))", "score": -1.0740547932949953, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.Total),Invoice.Total)", "score": -1.1974137561224039, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Customer), Invoice.InvoiceId),Invoice.Total)", "score": -1.2024854648418803, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.Total))", "score": -1.2067438247932585, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -1.2153996045474778, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Customer.Phone),Invoice.Total)", "score": -1.29380766052129, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Track.TrackId),Invoice.Total)", "score": -1.3218775090427135, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.BillingCountry)", "score": -1.329036735693411, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.BillingAddress),Invoice.Total)", "score": -1.3536366171205247, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.InvoiceDate)", "score": -1.3879265032045114, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.01818311682654894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.4560753482929503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.5856860651566631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5969509128735808, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5998838468863036, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.620029712609599, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Track.Composer))", "score": -0.6221698609168794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Phone),Employee.Phone))", "score": -0.6495558224511294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6506152395413665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6516467575238494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6542027239011077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Country),Employee.Phone))", "score": -0.6676503008020518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6858265184035506, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Customer.Phone))", "score": -0.7069656443299417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.LastName),Employee.Phone))", "score": -0.7188613002908824, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.15658574543264098, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2107740963907545, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.2118548342911219, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Milliseconds))", "score": -0.23325629394060576, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Milliseconds),Track.Milliseconds))", "score": -0.2502555324513991, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.2607204357060072, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.2661055118913916, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.27595268449776716, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2797222225684653, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2883629956819171, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2947534416127958, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.295469760234074, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.30366952643066253, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.3041105155471685, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Milliseconds),Track.Milliseconds))", "score": -0.3053931236280273, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.10216456047493301, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14363857666018973, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.16763728141389994, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.20290397645814956, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22747702742943518, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,<=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.28936241199751117, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),Playlist.Name,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.29773552139347964, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,<=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3067459681279166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,<=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3120920699797497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32330198151692746, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.35339782922425217, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingCountry))", "score": -0.36363889925491716, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.39107134700992646, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.40148506593151834, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4131242585307884, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.10824887140188366, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.18380466906819493, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3126021150836688, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.33130279769289855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.3424851198462894, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(Track),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.36981927388580893, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38333212941145506, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,We Will Rock You),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.39823633118428065, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.400129058566904, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.4124346433101916, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.41620292644916024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.42812729152749396, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4386305358963306, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),getData(Genre),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.46474940699990247, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.48022954969201237, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.1906685560622278, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.22014102792161824, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.22322522688253643, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2309938557257189, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2355349926034139, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.24330362144659637, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2559505988456915, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2590253906481518, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.25958991008101134, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2604623327679798, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.26826036456656893, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId), Invoice.BillingState),Invoice.BillingState))", "score": -0.27840948382396263, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2829599135008566, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.283003219633379, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.29002357391901623, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.02576200522162253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.City))", "score": -0.4030478563872748, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.UnitPrice))", "score": -0.4390618172255927, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4513688422521227, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5047785429917684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.572351031824961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.5850912299720221, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6186562276858382, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6383265646264058, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.6644050446120673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6778500415166491, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.Bytes))", "score": -0.6835486856070929, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.Milliseconds))", "score": -0.6890270677176886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.69683199936755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7280910734916688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18410604869625427, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.23405974757860643, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23508980898388024, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2363340003605826, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.23635455532685665, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24205615931278762, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2462191760808607, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2514956738071184, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2688254960339141, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28642912737369114, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.293185300452033, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.2945754233320254, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2978683958562393, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3019878600762592, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.30270433961983306, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11807348142016083, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15017875698316518, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.16068966262897066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1678780148494416, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1776203300002033, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.182898490483263, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.19566235482823638, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.22320497916543972, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.22880899406634755, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2539881601222568, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26230669880885216, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.28694526468766257, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29268638532387903, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3063425171585959, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30943267220845505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.1743703466501693, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.205918568169596, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.20706888915519894, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.21191237713777247, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.23445624733021359, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2376174627501428, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.24013157162289755, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.24702246368436095, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.25220274780454205, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2530589196910991, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2616077487387602, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26188856913668285, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2713249329387134, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.27613479673352237, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.27754951768272473, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.01743219108548354, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8312993788167404, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8466894741015123, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.9182789843906932, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.9223042844591879, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9940057760609595, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0454525166506385, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0746127317956702, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.1959597509348703, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.2209263297562256, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.2792398026945961, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Album), Artist.Name),Artist.Name)", "score": -1.2845756016994752, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.2974970704666122, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.2995093829097166, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.3131279754427951, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.00845593224284699, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8252293142640339, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.8353245404279707, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.9972765537180825, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -1.005437521256681, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0108805437071238, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.0361335070115452, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0546197032939921, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0657414991741243, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.0910469461388412, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1698636290494524, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.FirstName),Artist.Name))", "score": -1.3160448442051371, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.325115644507715, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.3485838153557337, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.3856330000734818, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.State),Employee.State))", "score": -0.14978448484907858, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Canada), Employee.State),Employee.State))", "score": -0.3529106024361681, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.35986741425156427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.38362152580244385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.39545219099401746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.40692839605735637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.State),Employee.State))", "score": -0.40915032659540884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.41771079396609573, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Canada), Employee.State),Employee.State))", "score": -0.41923084293375723, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.42229106339206984, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.42413467844954217, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.43907036890185297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.4442116970534557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,Canada), Employee.State),Employee.State))", "score": -0.48048377487854393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.48853701368212343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.03887629589007702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3331200004176935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.45192737342371775, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5017574171070552, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.Country))", "score": -0.5175907671073219, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5390639640021021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5643670623735049, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6016734630738747, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6172794992889976, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.657380253644078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6824089592410019, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6836209984468689, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Country))", "score": -0.6864267348864814, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.7400197147944709, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7406990945892176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.17535482194388258, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.21716650990541314, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.22916151993813996, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2608893144991096, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2642373645735593, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.29588170035095174, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.30768334474563513, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30846226590073406, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30959057621299435, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3285416085838557, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.34134299599421825, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3424712969378695, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.34266657294721015, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.34379488325947044, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),PlaylistTrack.PlaylistId,MediaType.MediaTypeId), Track.Name),Track.Name))", "score": -0.4073278579801404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.5712138931030495, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.576881281542228, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.580456070112632, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.5861234585518105, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.5980027238601906, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.6036701122993691, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.6089883367294533, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.6146557251686318, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.6686181346649391, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.6778603116745217, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.6954069654220802, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Track.Name),Track.Name))", "score": -0.7060950021023018, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.7063924143785698, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Track.Name),Track.Name))", "score": -0.7117622266287071, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Customer.Email),Track.Name))", "score": -0.7158728907579643, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds))", "score": -0.1276593458846465, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.22444562076162897, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.2251252164466238, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.22637240309635925, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds))", "score": -0.2479359867303675, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds))", "score": -0.2604134902012776, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.30950490343951387, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.3214306088380293, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds)", "score": -0.3267160593223385, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.3269867742215548, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.32704933391910435, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34692012104255393, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds)", "score": -0.35123511538200813, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.3561501601047803, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3571788173677815, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12461191885751187, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1313712322179703, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.13430225367056486, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.1621188967122805, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.17790945881486048, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18058018685262553, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22147372218957667, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22379268287681722, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2333521874907372, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.23657796294412323, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23909388299608397, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24201408262207655, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2521550687232466, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.26310795900078005, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28042820758385484, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.0722426534484839, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.2716001444579073, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.40832189422508236, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.4685065294470405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Employee.Phone))", "score": -0.4937332081462955, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.49634210717340466, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Country,=,Belgium),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.5399922340791792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.5854739392962074, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.6195292319025612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Track.Composer))", "score": -0.6319823968078708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.6621372545923805, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Playlist.PlaylistId))", "score": -0.6712910639907932, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.LastName),Customer.Phone))", "score": -0.7023201379779493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Invoice.Total),Customer.Phone))", "score": -0.7159758005145704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Employee.Phone),Customer.Phone))", "score": -0.7176620159152662, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.12024877061806723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.1522070214064588, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.15509510525499068, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.1612030526684913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.17591417565765027, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.17758281512049556, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3164376097409398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId), Album.Title),Album.Title))", "score": -0.318848753996961, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Genre.GenreId), Album.Title),Album.Title))", "score": -0.3465776288319908, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3616176373571449, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3742313440786001, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3760901991421426, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.38363138966496374, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.3873419455782358, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3961006398250879, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.42297013028243396, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Album),Album.AlbumId,Album.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4693934715048768, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.48478630412692125, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.4883890017038426, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5034882374676323, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5232545059277339, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Track.UnitPrice),Album.Title))", "score": -0.5254747230128751, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5266266181955183, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5302293157724396, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(MediaType),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5363008488231983, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Track.Name,=,SCRIABIN: Vers la flamme),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5373232681156428, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5385468801361081, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5418406066254194, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5458347115177499, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5494374090946712, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14321869035360948, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15289091418950684, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18279338148007387, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19168939774225577, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.20047098708986866, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2052999025274555, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23131358629307452, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23446524713395434, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23727022092615027, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24056488522593703, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2444410367222174, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2588018299248556, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2778658847842552, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3095283149196707, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3109421565203107, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.1725736814822168, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.17401892886916823, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18073669916629434, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.18576108182014536, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.19239529895960353, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.20245328485294087, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.21106226825272437, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.23669479029574386, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24941902212228298, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.25428033861583704, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.25571658809895764, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2652137385056639, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2690680544129458, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.28465791406654045, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.298068205173533, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.20369064345140941, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.22519535571753566, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.28194864323958047, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.2835294064111015, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.32103927253493186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,H\u00c3\u00a1 Tempos),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.32798190712258074, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3410988190724905, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.35102175259600854, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.TrackId),Track.Bytes)", "score": -0.3525015589097331, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.3552090973612437, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3699432416178752, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3953790618397761, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.41196240371139076, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.4134536153679954, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.4135431668829119, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.032220163024248905, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Employee.Country))", "score": -0.2887020563848637, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5072065022450261, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5161979985776974, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5258043179015199, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5377516901262425, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6175728254248503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6481616651781223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6638240484662674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Employee.Country),Invoice.BillingCountry))", "score": -0.6651258735128067, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6659181868799351, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6815234751462487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6974905995793961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.InvoiceDate))", "score": -0.7106746589906834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7150552597504429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4425412025250037, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,Drama),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4531377714996822, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.46319019944439144, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.48552158698654935, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.49822163376440287, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.506170583905937, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5188706306837906, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5215583400785572, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.525451546275946, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.526118307110289, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5412020182259485, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5459718809426293, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.5467673040296767, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Drama),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5500956535493695, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),Track.UnitPrice,=,Drama),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5533639640286326, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.03570585031047813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.4308771415053343, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Fax),Employee.Fax))", "score": -0.46889543217285234, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.47970096472636214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.4958904207123851, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.5225650489701366, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Fax),Employee.Fax))", "score": -0.5605963977553917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Fax),Employee.Fax))", "score": -0.5621270936801696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.BirthDate))", "score": -0.5751726551352476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Album.Title))", "score": -0.5885130687056517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.6092232999762928, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.BirthDate),Employee.Fax))", "score": -0.6092324790915882, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.City),Employee.Fax))", "score": -0.6435939011535083, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Fax),Customer.Fax))", "score": -0.6462303894567788, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Phone))", "score": -0.6659746690093016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.Total),Invoice.Total))", "score": -0.15153684377127521, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.17216720056713353, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.20150753749054245, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.Total),Invoice.Total))", "score": -0.20215468034200385, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.Total),Invoice.Total))", "score": -0.2031606357265063, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.20322079264819312, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.20492601711362804, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.20725125697701247, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.21127374583510522, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.Total),Invoice.Total))", "score": -0.2208351739832561, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2369692975438912, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2425803179626827, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24477661241952242, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.24504545742898487, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.2699654837961489, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3041239509490984, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3092716905551496, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.347172423095023, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35094901334976963, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Customer),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35267866136593923, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3619718801578174, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3637015813023816, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36493035484072156, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.38277850019756265, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.3855445740310719, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Invoice.CustomerId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.39566319036659, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3978343876364969, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.EmployeeId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4029211126537024, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4175570796764153, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42766994092443, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.1831937667177091, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.19831981581651126, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.22239137414157478, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2335594843927381, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.23600288650858775, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,<,1962-02-18 00:00:00),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24553169633497576, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24608978211355725, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.24748823070888007, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.2507381459268625, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.251353488310361, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.25613333273826955, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.26336098094998706, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceDate,<,1962-02-18 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.26386536590173376, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2661219446662778, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2958719235119516, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.20007722999600125, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.2334218480382393, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2514090803882254, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25338136747260004, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32129099846171033, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.32596542716580257, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32676657836654904, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51),merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33438236701666596, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3385803532255726, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3408521889547955, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3413246976099692, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34253612486206575, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00f8nder Boulevard 51),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3425596165549581, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3452238209248463, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3730289033234622, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.22504352503549932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.28340139217099697, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.2865947620861647, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.2960384730578469, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Genre.Name,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.30325613970427723, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.30941525749739174, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.31147594235249015, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.31269984624581776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.35518556579873206, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3677729994813856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3698338094879878, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.37291237472462985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.3916172000723065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.Address),Invoice.BillingAddress))", "score": -0.41213265036929214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.42211898725057523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.18471756045063245, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.22907580665245375, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.25339759851995813, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2700610371778791, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2960248734009374, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30202911499551116, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3174773215892803, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.32635558453138247, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3282172612486583, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.32827700536497023, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.335597947645525, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33727588774211303, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.34567282158419665, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3466613273697218, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-11-19 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3519846308938115, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.017461674433125678, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.734865036162437, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.Total))", "score": -0.7824413442768722, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Playlist.Name))", "score": -0.8647953691649772, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.8673917179930989, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Playlist.PlaylistId))", "score": -0.8823026453103314, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.9287622309429784, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.9464343086819704, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.9591599546834879, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -1.0007104926641313, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.Total),Customer.Phone))", "score": -1.0066933525503876, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -1.012491480733354, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.BillingCountry))", "score": -1.0234051412129606, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Customer.Phone),Customer.Phone))", "score": -1.1448721303200196, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Track.Composer))", "score": -1.1487276813411704, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.19309554135239287, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19500325998376636, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19582476357064693, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.19899605649265598, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2405111312697133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.24954576820516788, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), MediaType.Name),Invoice.BillingCountry))", "score": -0.2545897004262307, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.2558925364822013, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2583688472429809, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2597663291391283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.Quantity),Invoice.BillingCountry))", "score": -0.2679376150178161, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2719940494029, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28604840552228294, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2869950305192372, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.2879988718098716, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.25180157134718095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingCity))", "score": -0.2675335796063238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),MediaType.Name))", "score": -0.2708970473825928, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),Track.Name))", "score": -0.2727599042588103, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingPostalCode))", "score": -0.30544925506336607, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),InvoiceLine.Quantity))", "score": -0.30943618818058555, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),Genre.Name))", "score": -0.3116933365309125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),MediaType.Name))", "score": -0.31191629351084277, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3153235554643058, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3310555637234486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Genre.Name),MediaType.Name))", "score": -0.3369472752808585, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Genre.Name),Track.Name))", "score": -0.338810132157076, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.34539095220021865, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Genre.Name))", "score": -0.34863443587660975, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingCity))", "score": -0.3611229604593615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.20131068830188747, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.20406653964196966, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20869698170497372, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.21065322907854098, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21672690856728968, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,NV),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.22386586372623235, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23685014505782814, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,NV), MediaType.Name),MediaType.Name))", "score": -0.23708969505804986, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.251530683802353, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25354287214915805, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,NV), MediaType.Name),MediaType.Name))", "score": -0.26584383391606387, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.2681389669983414, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.275696554538803, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2767452894042246, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27936490397242447, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.09790360996519086, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24913339334825757, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7305530199619953, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.8140159908624144, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.8383189076348961, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.9638757044855569, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), Track.TrackId),InvoiceLine.Quantity)", "score": -0.9652457742454811, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.9895486910179628, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.0264038545710226, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.0387143035260835, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -1.1151054878686237, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.Quantity),InvoiceLine.Quantity)", "score": -1.166007034265182, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.1776336379540893, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.1899440869091502, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Customer.Company)", "score": -1.1918886157614192, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.03858132871391717, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34728045227529947, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Employee.Address))", "score": -0.45714992728608195, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Employee.Address),Invoice.BillingAddress))", "score": -0.49374707719834987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49399855338560883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.502970645451569, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5980891978979344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6444941447261954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6803067124128575, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,!=,AB),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6821983947463467, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.State,!=,AB),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6962404687708154, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Fax,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7083486116171116, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,<,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7087883909844095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.732976411251002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Genre.Name))", "score": -0.7385599955596263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.1598185446811023, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Milliseconds),Track.Milliseconds))", "score": -0.21138244056136582, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.21200038752472264, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2146360269309037, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Bytes),Track.Milliseconds))", "score": -0.22516818660273552, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Milliseconds),Track.Milliseconds))", "score": -0.23543233076180908, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Bytes),Track.Milliseconds))", "score": -0.2411083745388885, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Milliseconds))", "score": -0.2557396995657573, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))", "score": -0.2722678774770679, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.29780995489664935, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.31067339622633355, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))", "score": -0.31699193524465696, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.330053906120879, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3326850221446266, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.359413828351537, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.04680477615487313, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.5751260867638136, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6462409190201742, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.872042197756599, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8825639990710453, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9579612629676468, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Album), Artist.Name),Artist.Name)", "score": -1.0327582546285556, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.089045649958728, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0894826114876643, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Artist), Album.ArtistId),Artist.Name)", "score": -1.1364520056320004, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.172901810127052, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -1.1764427379422961, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.1970226391405365, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.2093685246329355, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.ArtistId),Artist.Name)", "score": -1.2127381396060355, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.04051025154075286, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.5618211531163428, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.5851454538783623, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.5886694289455134, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.5952972126497926, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.5975463425969171, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.614103082477496, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6176270575446471, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6310224832273846, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6347485366960742, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6382725117632254, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6602178519327503, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.663741765184692, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6658745468566288, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6857645126453393, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09325207336773023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1145453625816194, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.14774967362062943, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.14827949028824824, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.16037112378012391, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.20892392367555887, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2133240274767735, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22542927098200924, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23232354375774042, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2342165892419568, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29703819588402425, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3086633720387257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3213254463789264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.32702108497528193, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37613683785360447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.07546640598038974, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.14760367871051072, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1723415380119266, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.23142044380188015, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.2682847039023103, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.2703108735232028, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.27392586082810966, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.3275813709505425, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.33263871949873325, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35286346020544995, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Track.Name))", "score": -0.35843174383070897, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.3632973324382647, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3976296824260561, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds,=,Jazz),Track.Bytes),Album.Title))", "score": -0.4173033925042241, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.41962699723323976, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.20166824573202746, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.24798814191069476, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2825081773168518, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2850595390978701, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29491201831613256, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.32512530009025054, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32674148786422635, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32910612031316727, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.32942555338576224, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.33137943527653735, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3363565079864034, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.33736411595247884, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3387211404353443, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3469269179941034, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3533963318482453, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.11836859394214834, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.12291167683308327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.1438522137263729, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.18105339897169323, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20725375944445468, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2932555689831206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30446364170737034, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Invoice.BillingCountry),Playlist.Name))", "score": -0.31554252420141665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.3556479664275208, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingCountry))", "score": -0.3626538279979172, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Invoice.BillingCountry),Playlist.Name))", "score": -0.3634444626122608, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.367392218750894, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36795715064149426, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Employee.LastName))", "score": -0.3968023174504004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.39747378461812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.14781006590167114, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.27096857079374775, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.2801825034421674, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.28076019835369004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.2878623889258283, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.28844008383735104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.30138492933399724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Artist.ArtistId,Track.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30451515335877744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3102622876201722, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.31164636675576274, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.32629304764704103, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3264750433810147, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34141408225687836, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.35720893901480194, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3826510759162298, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.3043134556610312, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.3317712815005507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.4277107985217299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.45801070793459076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.48546853377411026, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.Title),Employee.BirthDate))", "score": -0.48842266662904876, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.Title),Employee.BirthDate))", "score": -0.5158804924685683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.Address))", "score": -0.5285933287341322, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.Address))", "score": -0.5560511545736517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.State))", "score": -0.5675132544238295, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.Address),Employee.BirthDate))", "score": -0.5690995798904623, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.5801093847949232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.State),Employee.BirthDate))", "score": -0.5803117045556064, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.5814080507952895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.State))", "score": -0.594971080263349, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.10497936367434574, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.1584897393390335, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.16060530929928674, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.21371474491106007, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.28012367765399376, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.30014345492893557, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3197984343799402, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.32528534956351224, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3257781836608012, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.34073546804603283, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3552535284321249, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3571672753732528, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3677195411311487, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.37085989068281, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Milliseconds),Track.Milliseconds)", "score": -0.39219428258012856, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.3271164819465774, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.3275654168813554, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33034775213854817, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3348748519314803, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.34987190133786, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.35032083627263805, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3535263148914538, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3542897924148003, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Genre.GenreId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35864270804512366, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36779224894445456, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37198158886078786, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37716082211290497, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38191131784398674, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38544607611987447, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39527700309984365, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.3624613726712542, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.36248065660014056, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.37773324471848607, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.BillingCity),Track.Bytes))", "score": -0.3992669727404937, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.BillingState),Track.Bytes))", "score": -0.4125569637717489, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceDate),Track.Bytes))", "score": -0.4193662776742239, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Employee.State))", "score": -0.42023356970457826, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.Total),Track.Bytes))", "score": -0.4283337617005303, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Employee.BirthDate))", "score": -0.44676526602415834, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.47202608765839377, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Employee.State))", "score": -0.48983228918223176, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.49523182569263197, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Track.Bytes))", "score": -0.49759443815855775, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.UnitPrice),Track.Bytes))", "score": -0.5047035240846832, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Employee.City),Track.Bytes))", "score": -0.5154775623159812, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.05127934540331715, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.43162471243006, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.651437908582944, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.6898170419588792, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6957490887758, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.City))", "score": -0.7030087818966422, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.7734944523926787, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.8342384205285976, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.State))", "score": -0.9003047093596792, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.9418530626372379, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.9429815271220381, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.Company))", "score": -0.9476106183246884, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.City))", "score": -0.9603943848412663, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -1.022375186992333, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Fax))", "score": -1.0251302896279697, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14589705071094747, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.15561684732071046, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16804326537741507, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1705910828270773, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18254921056877618, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19276375852417008, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1947269636276346, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19479702845440436, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19710516025649596, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21088862082282783, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21563811816311654, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.23121855897677138, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2317764874065844, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23368968551498737, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2387923226724399, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.021029482420999557, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4443697004052217, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4702346398722044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.TrackId),Track.UnitPrice)", "score": -0.48259429700495926, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5122553404516976, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5321201112628383, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5327353693460759, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5381202799186803, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.539348957264844, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5521652509616503, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.568441026351272, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5697277435308217, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5719045914815295, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5725198495647671, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5883365231610207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.13943211771402275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.14286868311319267, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.3504487652317039, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.36783749647293007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.4361789006725303, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.46483123065984283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.4712226767078391, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.5222847624773498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.5419512227648081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.5488096158561921, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.Country),Employee.LastName))", "score": -0.5911640235208324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Country),Employee.LastName))", "score": -0.5946005889200023, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.Name),Employee.LastName))", "score": -0.6095514967223142, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.6259701368900046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Track.Name))", "score": -0.6315308652027349, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.14233313946760387, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17192445132478998, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.18927498610037122, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2021062715122171, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20213663483727703, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20241874368489754, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.20423318776737717, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.21299418690223562, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.23246833796951802, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26056506859047635, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name)", "score": -0.28647740630463897, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.2936998688603921, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.30225737676461945, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.31006790027647274, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name)", "score": -0.332133178201427, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1312738282729106, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.18095444776625016, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2436176171327698, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2692019292719681, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Track.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2707765326499405, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.27148277358243417, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2841779353895035, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.30394430151391383, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.32057285657996754, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3225006844392313, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3287227623804429, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.33806029171517926, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.35314597678047777, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3596469466790823, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3651176935387258, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.City),Customer.City))", "score": -0.3884866870824468, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.State),Customer.City))", "score": -0.40291413472303084, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),Customer.City),Customer.City))", "score": -0.45052309582125566, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.4534916022335932, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),Customer.State),Customer.City))", "score": -0.4649505434618397, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.City))", "score": -0.4715220263845461, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.47182501263763355, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),Customer.City),Customer.City))", "score": -0.47932982217141107, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.City))", "score": -0.4808908192294597, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.48119380548254714, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.48288087450046385, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes),Customer.City))", "score": -0.48615370275735953, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),Customer.State),Customer.City))", "score": -0.49375727424213683, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice),Customer.City))", "score": -0.49840990218964354, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId),Track.Bytes),Customer.City))", "score": -0.5035361512863566, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.031794690906483854, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.FirstName))", "score": -0.5718843448854057, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.7308317654355139, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.759930798071977, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Album.Title))", "score": -0.7741939407775229, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7851473071324544, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.PostalCode))", "score": -0.7967311296337426, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.8593205595910125, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Customer.FirstName),Customer.FirstName))", "score": -0.9427312215126915, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.9579475923274251, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.CustomerId),Customer.FirstName))", "score": -0.9834376858826681, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.FirstName))", "score": -0.9876883307973044, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -1.0030514955343222, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -1.0060297811062546, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Track.Name))", "score": -1.0072117482266219, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.028189349999593105, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.3767793452192748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Country),Employee.LastName))", "score": -0.425997437989281, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.48522967995225946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.5021299075563763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Country))", "score": -0.5303089111912414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.Name),Employee.LastName))", "score": -0.5344407862437338, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.5601578076239093, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.LastName))", "score": -0.5620596365415497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Track.Name))", "score": -0.5648364405166157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.5669101237234798, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Playlist.Name),Employee.LastName))", "score": -0.6007724123144447, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.61996403158264, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Track.Name))", "score": -0.6348297685253783, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Genre.Name),Employee.LastName))", "score": -0.6363687074253916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Album.Title,=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,Walking Into Clarksdale), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26298998023107806, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28209779518884914, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,!=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32887830759752446, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35011188693576384, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3522697490151211, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Album.Title,=,Walking Into Clarksdale),filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35728634196032283, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36227257936442975, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.370802863875794, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,Walking Into Clarksdale), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3847443334878969, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3862383972597892, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,!=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39073476194737816, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3962412276090978, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3972857068575839, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,>,Walking Into Clarksdale), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4016758129241284, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,!=,Walking Into Clarksdale),merge(filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),getData(Track),Album.AlbumId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5366402886663251, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.13756826802446173, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1409981770150086, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.14393136024171627, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.16448678032758723, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.UnitPrice),Album.Title))", "score": -0.20844895507840988, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.21690229377267511, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.2576294170866608, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.UnitPrice),Album.Title))", "score": -0.26593609034400717, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.297777850151141, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3044950693912885, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Album.Title),Album.Title))", "score": -0.33635260471139367, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33922492711936, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.34635147373464303, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Album.Title),Album.Title))", "score": -0.3670692086584595, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3708190792177167, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.007894453342225502, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9387863372446801, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -0.9947366033326492, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1022076835755106, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -1.211509947318266, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.FirstName))", "score": -1.2272173524792993, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.3318245157885003, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3524286464473951, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3710619299982012, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3800942050566742, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.3803733427738123, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.441927695516143, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.4550713505002115, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.UnitPrice))", "score": -1.4644940151409587, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Customer.FirstName),Album.Title))", "score": -1.5014214821977656, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.06064786875867867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.34007859683352476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.4332896789746883, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.49936379885548376, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Employee.Country),Customer.Country))", "score": -0.5325633308129909, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5637226936446545, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5697324543471041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.571786414847936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Employee.Country))", "score": -0.5747222194659116, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.LastName),Customer.Country))", "score": -0.5852818509774806, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5858134298796358, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.LastName))", "score": -0.6251361856448057, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.634825107591783, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6428887188560933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Invoice.BillingCountry))", "score": -0.6722614848280931, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.008859942999330973, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8059369957688121, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.8514390732920876, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.9883445359157829, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0078433619239144, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.0549254653957834, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0566104711543405, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0737860986306682, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -1.0748417699651327, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.0783660489920963, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1856061722614741, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.2083526085831673, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.3116828045396138, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.FirstName),Artist.Name))", "score": -1.3210251762350629, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.371760783337941, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.24103958280606116, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25406127968652953, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.25643962938257947, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.26155084991024247, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26904854226687197, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.2707158289751221, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2734328907482689, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.27503960727875637, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28009633179013066, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2860539655318037, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2980847319902421, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.3051126672937488, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.3080495400505109, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.31222446849291946, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3150901552551738, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.23292241692439353, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3021172317573724, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.34278466137323865, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.34938014682762414, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.3499960113887199, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.35524550119482795, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer),Artist.Name))", "score": -0.36236386444062935, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.36358883286694643, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.37487118233273137, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.Bytes),Artist.Name))", "score": -0.3831900732330813, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.39215004519265667, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.4037908624577162, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.4042562624828127, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.4065020803995645, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Customer.CustomerId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.4103789849110953, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2309859776553606, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.24258370628977047, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2493397297861013, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2505888231486666, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2557935736047345, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Callahan),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.25636103259536297, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2568203090058834, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2579073774127925, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.26457742056645595, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.State,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2654958994977162, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26989036721710735, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2707259971723329, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2765731975993846, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Callahan),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28124279173191236, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,Callahan),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.29176348136906954, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.22460882369157015, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24863589405913483, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.2504939781223907, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2728149963018121, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2824422165008897, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.29742849444388675, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,1),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30662131874356696, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3067002647427466, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3075156345429261, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.31401018584332807, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3198838519560792, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3238647804292953, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3320047044362289, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.34652937882625984, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3480505263110083, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.25783946298179217, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Album.Title))", "score": -0.34522963160436426, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.35842726747100784, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Milliseconds,>,322063), Album.Title),Album.Title))", "score": -0.369571523456382, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,>,322063), Album.Title),Album.Title))", "score": -0.37314204048378835, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Album.Title))", "score": -0.37892486429682815, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>,322063), Album.Title),Album.Title))", "score": -0.38494843021190933, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3921225001634718, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Milliseconds,>,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.3923078613936478, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Album.Title))", "score": -0.39267734987782354, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.39406579173663214, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,>,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.39587837842105417, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.3965400248482108, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.UnitPrice),Album.Title))", "score": -0.39872937209445575, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.40768482131087586, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.09246985248566629, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.14198025129518982, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.1464362381962348, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.16753899120918114, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.2102994871326945, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.28000972596738005, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.UnitPrice),Album.Title))", "score": -0.30240728111674964, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.32892266091168576, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.UnitPrice),Album.Title))", "score": -0.33066218495676114, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3314897449078647, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3763860652732829, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.3767067828944583, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.41905590797452846, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.4314753477517665, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.45270432110566705, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.08403575580177858, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1805831580022641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35489823247802205, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3712814944705157, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4254343727240937, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4684227227232352, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4862971963750375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4912115981611942, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5280441972608743, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5317107774815188, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.Total), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5358635568965698, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.560633207316303, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.Total),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5674386034506289, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.586233112031524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6367760782277401, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.0933916038642174, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.13361566574118539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.161903253160826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.16738862935588586, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17536969632175065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1808082413768807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.18752660229710855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2021709539604891, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2025453648725195, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21792610905141035, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24471277881473083, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25422924661966073, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2649572269227293, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29410943492533076, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3115220466508776, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.1513987698708661, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.17946903343545273, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.3081402664965702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.48521507653640583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5132853401009925, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5632095125620253, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Employee.Fax),Customer.Fax))", "score": -0.5684075349126942, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.5758671824005432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5832584289018996, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.591279776126612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Employee.Fax),Customer.Fax))", "score": -0.5964777984772809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.6039374459651299, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6113286924664862, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6710134235327132, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6990836870972998, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2151560929871088, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2570030318609572, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2635597805988991, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.26576475519020715, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2661800621262324, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.2836494551046934, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2869219495555676, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3092409178596833, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3192995407250743, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.32264705348793166, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3251122963482307, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3303700376434212, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.33291952448749634, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3342815162021157, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.33680387694815095, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3928565213356678, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4074192271307847, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4159915853152504, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.43092980284979376, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4385484746735743, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4460311096767482, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44954394116114155, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4534866922081177, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46166289358112833, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4625947263860261, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46366032973200144, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.46448214007668853, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4679862237483232, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4827694755138266, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.48637892401127814, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.1850605544706297, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.19527832055894595, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.1978375456683792, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2261511650104217, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.22901727706763533, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.24192790995514413, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.2443946106748261, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.24518937665797233, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.26396837888085495, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.28325977939757785, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.28426601441416105, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2848071119801149, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2920820202743875, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.29261948175525754, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2961704047755609, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))", "score": -0.20146627166832332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Email))", "score": -0.2555352021154249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Title))", "score": -0.2587681580480421, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Title))", "score": -0.3128370884951437, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Address),Employee.Email))", "score": -0.3603326250013197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Email))", "score": -0.38332791814173106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Address),Employee.Title))", "score": -0.41763451138103846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.44062980452144984, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.State),Employee.Email))", "score": -0.5029015708860243, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Genre.Name))", "score": -0.5124008040644966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.FirstName),Employee.Email))", "score": -0.5319871474202955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Email))", "score": -0.5420687898379248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Genre.Name))", "score": -0.5469304417686114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.State),Employee.Title))", "score": -0.560203457265743, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Email))", "score": -0.5765986047477089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Milliseconds))", "score": -0.14006865381054553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.3712499028624734, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.3830917948732593, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.38683026743387205, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.3987740712981239, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4025125438587367, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.45353324570482273, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4572717182654355, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4604308346113774, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4641692429349351, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4975714852888002, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4977055236569341, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5299117768715108, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5300458152396447, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5340717198257365, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2513041665685594, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2615685237264067, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.27699978760346805, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29130061061220114, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3067318744892625, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.30926775984729393, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3210951250777075, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.33652638895476883, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,2013-01-15 00:00:00),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3564479534563843, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,!=,2013-01-15 00:00:00),filter(getData(Track),InvoiceLine.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35808312928133335, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.39543389044597366, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4031115502448245, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4064628077513896, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.410865154323035, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.41142935505645556, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.022737406339729205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.42900085960960455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5325669408790163, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5465752306599696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.5607851950044278, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.5645053576752087, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Title))", "score": -0.5774106515164021, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.5787551609391812, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Invoice.BillingAddress))", "score": -0.5939600599522237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Title),Employee.Address))", "score": -0.6228083869500551, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.6266713779630294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.6315382607835617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.6501413160826393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.651162287365878, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.6680714389446205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2298704025028265, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.23621487711308253, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.23811413521555233, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.24670067367219842, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2470126037221888, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2508077100995189, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.26265386351466463, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2684950820699452, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2785276149465536, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2815255407226332, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.2818411117201829, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2857419910723866, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.28659662181140444, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.29674116906392817, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2976326090517905, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14206615037211476, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.14538822087652753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15617285132732958, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.1611289268940459, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.166711168535762, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1780239553863752, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.17973192615627606, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1812087933862585, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.19104484252882514, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.21073122089512758, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.23920604770957626, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.24429588510524017, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2566327203535099, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2664687619719124, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3175960019852386, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.08789493452422903, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.2712221325527935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Track.Name))", "score": -0.40291647194838526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.48967625470841214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.49619425049557275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId), Customer.Email),Track.Name))", "score": -0.5090767893357351, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.5126966884973473, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5216583693150778, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5256601071541341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5275331669706593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5305969366987876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5360937552742235, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5381217335120472, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5485553816321365, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5595152106950574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.14453872525954473, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.22493042561976054, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25878379665136075, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.2674265660276343, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.29674003413939065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.31936415677162633, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.3254000806200561, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3287386856701689, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),InvoiceLine.TrackId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3369860675600284, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Artist),InvoiceLine.TrackId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3420391270866959, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34324688561511246, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Artist),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.348299945072559, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.35098337336482327, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.36562943843995, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),Track.AlbumId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37409408672146427, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.20426774642306975, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2063203519801804, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.22538607375769862, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2389063553434627, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2892689315353346, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28974949544182643, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2919959959341856, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3098444949737047, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3261437686299488, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.32653008909193254, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3268132768982927, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3283350517895323, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Bytes))", "score": -0.33644967954631505, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.35117558598065657, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "done(extractValues(min(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),Track.Bytes),Track.Bytes))", "score": -0.3713087639214419, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.21062843566613593, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26998787538361557, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.27583928395830815, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2896680218016844, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29027088055578265, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.30214045812086593, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3117799257332803, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3133178396884835, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31409528725743724, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3207462296280827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.32403318739820225, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3318730288538059, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3385842605662465, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3450254534174994, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.3492926907598572, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.031265241812337335, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7160979736423062, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.7409430570383917, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7531991189603987, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.7862728616458377, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9382477311465743, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -0.9601127808054386, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "sum(distinct(getData(Album), Artist.Name),Artist.Name)", "score": -1.0052483197154274, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.0649610435961234, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.066475114862156, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.0710044544295696, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.0928050106625105, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.115480985131715, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1332008376519187, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.City))", "score": -1.1339522378023097, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23068171681967212, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26308028786627696, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26613843155673444, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2705868570204875, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27635646122814683, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2797314237120894, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2807241065439409, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28632194084899, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28781453765894666, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29274022706598807, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.295159373152683, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29705870899186926, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3015071345141761, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3150425802488012, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3380906639334429, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.10810124778802248, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1471068240247883, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14984486824426282, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.1806272199463511, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.22317487116091989, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.2669096644573916, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.30179277098712426, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.BillingAddress,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3312847893160304, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3385226330429626, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.345527564283596, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3500814778522107, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3797052895262589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3822574263394343, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.3867405901109342, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Invoice.BillingAddress,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3955877360451332, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.04740785334070097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.30380128968317877, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.39293765175898443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,2003-05-03 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.45103914863323424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.475623289414125, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.5126879815817944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.5529932670470034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Customer.FirstName))", "score": -0.5541139826345898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5698922787960328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.5859687728228294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.5900579592146727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.6020274147558666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.617271414881543, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Customer.FirstName),Employee.FirstName))", "score": -0.6391170783135749, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.City),Employee.FirstName))", "score": -0.6425196094605781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13684232739276628, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.13947015412266986, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.16236637750917665, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.21770349372559958, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.23858407578468122, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25273602177146065, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2552421087204177, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26299103618696507, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2819954050116754, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29101759021838086, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3019558621446761, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3085970132317665, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.30874195324421094, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3203663669058172, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,null,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3338513863086543, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22235983745304447, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28922957393282195, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2918065779151178, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3153422112800647, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3190027432879981, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3298580854445253, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.33403620520917304, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3358643307534735, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3389758429853536, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34630174801983515, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3546604543491447, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35929958168791315, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36382324139498606, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37433663110846277, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3757373073144361, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.14001699262291778, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Name))", "score": -0.18573952849093012, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Name))", "score": -0.23911557131443179, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Bytes))", "score": -0.2574764214310691, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.2753445674409219, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Bytes))", "score": -0.3031989572990814, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.32352424039461414, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.UnitPrice),Track.Name))", "score": -0.32782742280971416, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Name))", "score": -0.3340783941240569, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.344154550664562, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),Track.Name))", "score": -0.34833997136386774, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.3552430672482204, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.UnitPrice))", "score": -0.3758517931169176, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.Name))", "score": -0.38323454562709386, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3854202490874741, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.022379366822422656, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.6913994859201873, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.7810067664146202, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.8085086592693476, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.8144842484902587, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Track.Name))", "score": -0.8208792888308242, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8297825674776834, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.89896877445396, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.LastName),Customer.LastName))", "score": -0.8998289312366978, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Country))", "score": -0.9144251339669324, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.9514209655385238, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.9933241156778166, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -1.021335678565211, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -1.0959460581525395, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Playlist.PlaylistId))", "score": -1.1574671625650343, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.31737685466777604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.State))", "score": -0.3978160115657374, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.Country))", "score": -0.4383490028558299, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.4434653208580886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Country),Customer.State))", "score": -0.4606587904272601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.49287331486130026, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Country),Customer.Country))", "score": -0.5011917817173526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.5944581271611286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.City))", "score": -0.6000534835038707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.State),Customer.State))", "score": -0.6082008610246703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Company),Customer.State))", "score": -0.6104699986753985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.6189617810516128, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.6208837802175533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Fax),Customer.State))", "score": -0.6364594715414569, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.State),Customer.Country))", "score": -0.6487338523147628, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.13542805233574734, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.21473822042493554, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.22914110042972632, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.24515314340933725, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.2679958853892793, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2723311218166767, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.28140930747621185, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28450932127470224, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.2904981641490898, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29617959059069615, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.30228625828639216, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3167372435459557, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32842841874165946, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3284800774195474, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.33650850035585494, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.State))", "score": -0.13019793783314526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Spain), Customer.State),Customer.State))", "score": -0.2115482643712312, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Spain), Customer.State),Customer.State))", "score": -0.2322428033221513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,Spain), Customer.State),Customer.State))", "score": -0.4281637177336961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Spain), Customer.State),Customer.State))", "score": -0.5373687848914415, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,!=,Spain), Customer.State),Customer.State))", "score": -0.5520557865966111, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,Spain), Customer.State),Customer.State))", "score": -0.5628189549315721, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.State))", "score": -0.5781332259903138, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Spain), Customer.State),Customer.State))", "score": -0.5820128426421434, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,!=,Spain), Customer.State),Customer.State))", "score": -0.5885780558455735, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Spain), Customer.State),Customer.State))", "score": -0.5930703387130052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.Country))", "score": -0.60529381246306, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.Country),Customer.State))", "score": -0.6179168850649148, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Spain), Customer.State),Customer.State))", "score": -0.6364795766676252, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.Address))", "score": -0.6492503604386002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.10775297590860276, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.12413841689894901, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.14376299670611603, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1529656739569024, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1740972342777218, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.22020541411123348, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24340293339725566, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2622620505458075, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2667517126732384, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.27576989304864735, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2771411383217418, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2825124146285812, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.29969378641812755, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.30309284447198437, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3073799899279428, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.0465726632719452, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3103122816300535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3181709062262238, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3312488218811497, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.363197309558676, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3646478636052513, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.40539415694178155, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42492987709734636, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4306440297885512, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4610892254311012, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4680629418314665, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4796451863248507, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.49039071243329757, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5243944409266987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5349634605554456, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.FirstName),Employee.FirstName))", "score": -0.2635371927447401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.2796699723076017, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.LastName),Employee.FirstName))", "score": -0.30094488898995114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Country),Employee.FirstName))", "score": -0.38221973337208365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.Country),Employee.FirstName))", "score": -0.39234372059218003, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.3988734984774626, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.45940840255683785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.FirstName),Employee.FirstName))", "score": -0.4762388996763248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4877711063061836, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.PlaylistId), Employee.FirstName),Employee.FirstName))", "score": -0.48988352355293696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5354791757317067, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.5430606363188417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5491237904711515, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.Country),Employee.FirstName))", "score": -0.5519505815142475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.FirstName))", "score": -0.557560327400895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17858209704561917, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19368006633653886, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.194382020237818, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.19447946406767336, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20282434881863684, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2125815342175383, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21747738576103035, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2184018288345094, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21841700438088915, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.2206802961251434, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22144680298633496, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.22231663294557968, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.22978352470975988, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.23111059258016747, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.23338802308237247, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.14494481064767986, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.15372417822600254, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2005951216151794, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2013432071100118, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2225623053423782, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24445973369595903, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2587501400100532, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2765018464297415, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2803912724484195, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2827895120615816, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.29067060958673485, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.29686316367510046, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.3008515843770935, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.31608279079576523, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3180823621654664, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.14896777609014755, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16535391242653433, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18181291516822412, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18726087369160505, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28055793419044134, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.28164562851657887, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.28522408714250236, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.29581993808500356, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.3010944572512949, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3020822625476434, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31429428773322643, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32506912579675534, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Invoice.BillingCity,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3314957821368951, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3332597630461202, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33955275468501034, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.044106523641640166, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.5036272815377982, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7032148008177994, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -0.8395038835349711, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -0.8876282512400621, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.UnitPrice)", "score": -1.1440255361174987, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.2381850693550567, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2527049981367142, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.2677518695808778, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.2689797372472547, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.2977395705792356, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.342576137331479, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.34524345786954, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.3509005560336687, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.3512983946981487, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.019448015991656575, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.5124446453191922, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.5528728665449307, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.HireDate),Employee.Country))", "score": -0.5945063337348984, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Customer.Country))", "score": -0.5996682314798818, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.6226534867091686, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Customer.Country),Employee.Country))", "score": -0.6240276798271225, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.HireDate))", "score": -0.694967952244042, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Address),Employee.Country))", "score": -0.698200117018132, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.State),Employee.Country))", "score": -0.7237964972518967, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.7371450366117642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.LastName))", "score": -0.7441447048113332, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.State))", "score": -0.7462907700464712, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Invoice.BillingCountry),Employee.Country))", "score": -0.7614123329185531, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.7746162714101956, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.09074413846267114, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14843848799500847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25077687891433065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.25510254018019, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3006000813327076, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3044420408316653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,>=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3062544693007572, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3212689461614856, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3534841460299775, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.3611433410904638, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3899017650515869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4040260471870696, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40830397961474807, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40835170845292895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4189680364464719, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.1661260818680563, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1714692389390935, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18215159903874115, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18581706249106317, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18725717740482606, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18855219157352116, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1892880363346088, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19615066538659123, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21696224065457706, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22167013754964415, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22779745130837084, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2285957933078317, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.2298747236395777, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24446914337827097, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2556093345486255, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.0563382332908253, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.5051380467019491, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.5593946057033328, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.5686128655876445, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.5768966309427425, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingPostalCode),Artist.Name)", "score": -0.5787293415644102, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.5842947024229858, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.5943468032610436, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.5983396352007866, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6433890149854419, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6507870864656852, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.664832019243486, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.6773553246730408, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6953470100197797, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.7027450446377422, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11111017422249023, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.1339867206161528, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.1593448858057266, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.17880692166260997, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.19485214980713145, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2153869668753559, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.261854488500396, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.2656848761415333, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2662349218919213, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2743993735122998, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28661900691436726, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2867656203507651, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29884478654171404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.31971359919518716, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(MediaType),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3333144310199434, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.06676480232688795, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.5439946736717671, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.637085083570323, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.646057682784381, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Employee.City),Artist.Name)", "score": -0.7433984731541252, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.7493170603437238, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8325881299314383, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Album.ArtistId),Artist.Name)", "score": -0.837003810168361, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.8452950027092958, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.8840285041788889, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.8979783529679788, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -0.9148127461044319, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.9276333807259177, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -0.9324750092007377, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -0.9545533844426398, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.07245299483365832, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Genre.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.40374615337475434, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.4392550590491737, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.47880259087327354, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5407612001990418, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5446906337009954, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5652222137613678, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Employee.LastName,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5761001662155523, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.579497026527733, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Employee.LastName,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.5903749789819175, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.5998236472448047, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.614098464548066, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Genre.Name,=,None),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.6586450975574486, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.6807104948020424, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.6854552629447426, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.18629536626758636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.22026578185977996, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Riotur), Customer.State),Customer.State))", "score": -0.3153002768558508, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Riotur), Customer.State),Customer.State))", "score": -0.3607603221935278, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Riotur), Customer.State),Customer.State))", "score": -0.36341380176963867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Riotur), Customer.State),Customer.State))", "score": -0.4070756345790869, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.4175652175945288, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.4226879983943945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.45118533668937744, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Riotur), Customer.State),Customer.State))", "score": -0.5937099069160467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.Country),Customer.State))", "score": -0.60145852610367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.Country),Customer.State))", "score": -0.6354289416958636, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Riotur), Customer.State),Customer.State))", "score": -0.6404730534450209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.6534812221107131, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Riotur), Customer.State),Customer.State))", "score": -0.6574074084674066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.2009890069894027, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.21864277028362267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Employee.FirstName),Customer.FirstName))", "score": -0.32119160794536583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Employee.FirstName),Customer.FirstName))", "score": -0.3388453712395858, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.4851821558258962, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.5028359191201162, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.PostalCode),Customer.FirstName))", "score": -0.531557201378746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.PostalCode),Customer.FirstName))", "score": -0.5492109646729659, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Employee.FirstName),Employee.FirstName))", "score": -0.6053847567818593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Country),Customer.FirstName))", "score": -0.6136500229767989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.6136577236175071, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>,VV), Customer.FirstName),Customer.FirstName))", "score": -0.6154521321586799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Employee.FirstName),Employee.FirstName))", "score": -0.6230385200760793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.PostalCode))", "score": -0.6235502855561208, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.State),Customer.FirstName))", "score": -0.6295697679452132, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2509619936616127, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26921032522158156, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3006264798280285, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30760923439081866, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.3137867871749827, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Playlist),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3167107659348058, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31735025520893634, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3199995831510631, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32066031690123314, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32130377351245454, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32306291467758047, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33386677976802703, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.3339939191172521, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34630815742431303, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), None),None)", "score": -0.36712888292494833, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Customer.Company))", "score": -0.31095713133600206, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3213925959857084, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.33720296973584424, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Customer.Company),Customer.Company))", "score": -0.3428942002615735, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), Customer.Company),InvoiceLine.Quantity))", "score": -0.35332966491127993, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Invoice.BillingCountry))", "score": -0.37798758568351465, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), InvoiceLine.Quantity),Invoice.Total))", "score": -0.3787204374487904, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.38335731297608844, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Phone),InvoiceLine.Quantity))", "score": -0.38693856866704446, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Invoice.InvoiceDate),Customer.Company))", "score": -0.3876003198525598, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.39803578450226623, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.4009332165836494, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Invoice.InvoiceDate))", "score": -0.4016110152004716, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.43465949063959, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Customer.Company))", "score": -0.44759701518269707, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.05431340937502682, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.21992359985597432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.State),Customer.City))", "score": -0.4426465027499944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Employee.City))", "score": -0.5604445764329284, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,FL), Customer.City),Customer.City))", "score": -0.5852974005974829, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.BirthDate),Customer.City))", "score": -0.5913976423908025, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.6209524862933904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.6394268588866001, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Fax),Customer.City))", "score": -0.6442861550021917, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.State))", "score": -0.6762260624673218, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.6988644401632804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.7150285833049566, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Employee.City))", "score": -0.7260547669138759, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Company))", "score": -0.7325161525513977, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.HireDate),Customer.City))", "score": -0.7454639666248113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),MediaType.Name))", "score": -0.1984717299183103, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))", "score": -0.20609426991541113, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Customer.Company))", "score": -0.384065819247553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Customer.Company))", "score": -0.39168835924465384, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,3.96), MediaType.Name),MediaType.Name))", "score": -0.424099040492365, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), Track.Name),MediaType.Name))", "score": -0.49950939071823086, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), Track.Name),MediaType.Name))", "score": -0.5071319307153317, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Customer.LastName))", "score": -0.5157591675360891, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Customer.LastName))", "score": -0.5233817075331899, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,3.96), MediaType.Name),MediaType.Name))", "score": -0.5289170288433525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Invoice.BillingCountry))", "score": -0.5334632967551443, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,3.96), MediaType.Name),MediaType.Name))", "score": -0.5365395688404533, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Invoice.BillingCountry))", "score": -0.5410858367522451, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Track.Name))", "score": -0.5518854235251638, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Track.Name))", "score": -0.5595079635222646, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.15536887404421842, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22148314504341485, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24498875768728554, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24615022129941797, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24753182758788594, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2621542700982953, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.28369235768454065, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2865240257842803, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.2969603756490763, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30090970016888796, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3133273911300325, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.31351777089153565, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3235750177437927, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3287869710902767, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Album),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33407311867680917, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2894621885965087, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3212426079701843, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32713911915828464, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3282440915711429, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34160245871128747, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3492497651184254, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35198952589296684, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3595020605695345, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Track.TrackId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36373934627269855, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36491562763017693, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36713667298165725, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36948033041297734, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)", "score": -0.3704167811466814, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37643294884831957, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3795647235879394, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24969179117089846, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2616209441208046, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.270941304602057, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2746936778916466, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2809337397448207, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2937559664529045, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2984152243492136, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31393711578757855, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3177280199732297, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3251707644681297, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3293021212238661, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.333272542563059, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3344387223223947, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3401133719145542, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34160492165401124, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.3585582573043601, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36435346764264587, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.38101728692064885, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Album.ArtistId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.38648840596960643, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.39168124030439994, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.40146111872135853, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.40411832432522393, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40707331687591475, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.41261442664636305, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42111560594587394, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42994936101569897, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4308954843628325, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4335526807511277, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43862535589997376, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Employee.Email,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.5013495693786989, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.City))", "score": -0.38694147464957496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.BirthDate))", "score": -0.40309033987250587, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.City))", "score": -0.4033518403502967, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.City))", "score": -0.4083775698873069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.BirthDate))", "score": -0.4195007055732276, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.4245264351102378, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.Title))", "score": -0.42490051386084815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.Title))", "score": -0.4413108795615699, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.Title))", "score": -0.4463366090985801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.City))", "score": -0.47169992027011176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.BirthDate))", "score": -0.48784878549304267, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.Title))", "score": -0.509658959481385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.State),Employee.City))", "score": -0.5562273829909827, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.State),Employee.BirthDate))", "score": -0.5723762482139136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.Address))", "score": -0.5807214945289161, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3162234355563049, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.31659929387368957, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.32488312219560683, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3334251578508909, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.3352572825754416, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34172972432924575, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3585320867777223, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3655378609490799, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.36683665325607717, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3757673705249047, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.3840623690587406, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3932507062853591, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4039427761903087, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.40601289724728856, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4258931582534006, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.14879448983233207, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.182098884571132, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.21761822494041894, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Customer.Fax),Customer.Fax))", "score": -0.2362613253072622, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.24959607189508093, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.27822278703959386, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2814879991019595, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,1.99), Customer.Fax),Customer.Fax))", "score": -0.29160012639224536, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.3026722368846868, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.3084403230341445, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.FirstName),Customer.Fax))", "score": -0.3131990318609937, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.320363536856436, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.32522471138959863, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,null,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.33642042218947854, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.35404212300365584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01628375372022897, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.47546290333831875, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5171542893324328, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5371336703295757, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5435833807676744, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.5615067507092424, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5640272665551799, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5788250563236896, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5852747667617885, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5863897138209955, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.5913831819970659, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),MediaType.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.5973368494658379, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6265520475711257, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6316200193267916, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6345915493650425, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.21856888525324872, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.2194764262308793, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.22378612602489087, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.24112645368134916, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.24442134944112426, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.2669789178692247, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Composer),Track.Composer))", "score": -0.28498643592045525, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.28684328150426525, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.29257644845894715, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.29479956998305173, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId), Track.Composer),Track.Composer))", "score": -0.31418993060386413, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.31735713841115215, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.3206519886927536, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.3399234774274814, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.34009182724330167, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.15428429906751262, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.21559184854413616, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.32787371416559813, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.34001340117651213, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.378225774220482, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3823581456163083, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.396470149558207, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.44366569509293186, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.46339462762261974, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.46717167896713363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.49783979092446673, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5038444316039654, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Invoice.BillingCity),Track.Name))", "score": -0.5119056559124147, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.5247021770992433, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5284792284437572, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.12477612353666558, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.19241558292558014, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2059761660483216, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2324774244250424, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2499189345857658, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2538440025429209, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.25907972094721676, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.26799317013017415, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2795450578206862, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3102746927232818, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.32679809884888894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.35893455592569995, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3609996529921773, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3737514684262225, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3987069523997444, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.21683402643284888, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24710749770549034, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,No Prayer For The Dying),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2841272921398706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,No Prayer For The Dying),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28916553619069735, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.31351665969398335, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Genre.Name))", "score": -0.32993874718589467, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Genre.Name))", "score": -0.3384389825621018, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3417447911596049, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.34318589854328047, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Genre.Name),Genre.Name))", "score": -0.3490917217999111, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.3497134659316653, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Genre.Name))", "score": -0.357375588389583, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Track.Name))", "score": -0.3595284599221309, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,!=,No Prayer For The Dying),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3691042167879484, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Track.Name))", "score": -0.36960852445327846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09772563150922038, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.12191190699946691, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1506455760773945, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16164567348645345, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.16567533538345755, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.16845634027708137, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24235343780108384, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2432239040479479, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25526812054320913, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.27718484849069125, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2979606863841696, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29965309656907474, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32439629542047954, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33113083301121726, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.4125526453537388, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.15330513604860835, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.1841522648467765, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22047092299445442, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2260345023159241, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2403364927129074, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2420776445511371, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.24441971123720266, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2574768773953299, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.26012110650051373, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.26390735655395153, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2658194586372838, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2964858453242301, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30379444006076073, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30869964362189195, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.31001977040646433, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.010396471998602056, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.558486959678703, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7643245800058385, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8306286855683792, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.861625540388436, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8628293704687172, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Genre.GenreId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.876914533231357, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.880710159720218, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Genre.GenreId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8959991748086028, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Track),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9244969194807181, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.949140493452204, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9886929858833131, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0089260493550682, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0196576281105132, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.0453097000057965, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09858336720832496, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.1383106531923429, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.15392393731975051, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1677990530728032, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16781511010853853, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.19067577857249735, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1962904477251276, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.2165374163458656, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24315979285022526, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.24748094162930342, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2559855534034207, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2677162266299406, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.2713198203766662, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.28161731073357277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2864756495873951, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.10281740749517598, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.13641019966070628, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14428759266629634, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.16776374471138464, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1704359250428184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.17092786728469528, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.18196162516577713, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20522864781955877, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23003082300768096, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24326912621617833, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.25680425416328223, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2778749305665215, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.29433201126244835, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.33212142858140525, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3770797494957757, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Track.Name))", "score": -0.1457823524815467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Name),Track.Name))", "score": -0.27734403410977393, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.BillingAddress),Track.Name))", "score": -0.347080395613375, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Milliseconds),Track.Name))", "score": -0.3880972723109153, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Rogers Canada), Customer.Email),Track.Name))", "score": -0.44815729843503505, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.Quantity),Track.Name))", "score": -0.4558819095236686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Bytes),Track.Name))", "score": -0.4851162294489768, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Employee.Title),Track.Name))", "score": -0.5218982557398704, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.5270626722467568, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Track.Milliseconds))", "score": -0.5283017336023477, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.BillingCity),Track.Name))", "score": -0.5548035959345725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Composer),Track.Name))", "score": -0.5771932462794211, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Rogers Canada), Track.Name),Track.Name))", "score": -0.5797189800632623, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.LastName),Track.Name))", "score": -0.6151010254961875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.InvoiceLineId),Track.Name))", "score": -0.627203329522672, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.28296383603605885, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2877700081943454, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.30681954674411827, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.3176880267367818, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32249419889506836, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.UnitPrice))", "score": -0.3351017841849088, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.34154373744484123, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.InvoiceLineId))", "score": -0.35757589317298827, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.UnitPrice))", "score": -0.3698259748856318, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.InvoiceLineId))", "score": -0.39230008387371124, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.4402005549428762, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.44500672710116274, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.45145218017306055, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.UnitPrice),Invoice.BillingCity))", "score": -0.4562583523313471, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.Bytes))", "score": -0.4581939100483982, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.11442521011545405, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1178676714823908, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.1511267530873245, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.19027236272527617, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.23464521703843128, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2694132187856617, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2789204123133562, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3101100919635702, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Employee.Fax))", "score": -0.34375997265378516, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3474656906089349, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3494915081092705, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35052152942968834, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.35205142666756517, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3543852781013278, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3725543372904784, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01762659617433875, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.7814082556146504, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.7892189734539615, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.142547582343268, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2567106605602072, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.2617753330463224, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -1.2931581261651557, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3030051484584513, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.3097232121875737, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -1.3147645628904479, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3158227769379753, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.339029657691208, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.3580691806866294, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.3610566914915032, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3770340765947664, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.08357855468784692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.3803450518826139, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Fort Worth), Employee.City),Employee.City))", "score": -0.4094777905920637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Fort Worth), Employee.City),Employee.City))", "score": -0.41427812516485574, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.41566691338812234, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Fort Worth), Employee.City),Employee.City))", "score": -0.42697294592653634, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5317371094206464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5492807233313215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.State),Employee.City))", "score": -0.5574197338501108, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5737249010780943, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Employee.State))", "score": -0.5911258112246287, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Customer.City))", "score": -0.5996500502878916, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.6280358785370481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Artist.Name))", "score": -0.632737125044514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,=,Fort Worth), Employee.City),Employee.City))", "score": -0.6822404468039167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.0994063491114039, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13076112381398605, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.15222057728978186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.15884504433337532, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.18092676431956506, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20115652652238533, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.20996690101490373, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2187817581188161, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.25133496223736834, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2615063114445496, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.270818177970005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27513035642799694, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.27558019372837705, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Genre),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2946380736635431, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.33854050412653713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.03797690141982457, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Title),Employee.Title))", "score": -0.349194030246386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.3566631136257704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.37686728282523146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.City),Employee.Title))", "score": -0.44778304664033897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Title))", "score": -0.4480243653205674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.46442492734530993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.4760722251268339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.48132007187112563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.4863187602683607, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Title),Employee.Title))", "score": -0.49316838467530033, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.State,=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.5082830798763955, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Customer.State,=,AB), Employee.Title),Employee.Title))", "score": -0.512440943390666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Title),Employee.Title))", "score": -0.5218110538274363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.Title),Employee.Title))", "score": -0.5387988376428834, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17784354754433584, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.18726702380635926, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.23604455665165666, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.2443443234537865, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Rock),Track.Bytes),Album.Title))", "score": -0.2722257925532608, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,!=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2928626289326144, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3069718506325653, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3109552629329215, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.3132976117657239, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.33108806416501524, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3311836832024755, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3377664456472784, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.34065305508223603, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34188151154267954, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Rock),Track.Bytes),Album.Title))", "score": -0.3685345241817103, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.04217674324718246, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.3375614917662771, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Country),Customer.Address))", "score": -0.5040946241697384, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.526396172330351, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.5883404647952135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.6538150973111085, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.6809375414886745, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Phone),Customer.Address))", "score": -0.6832964655241085, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.7052477225130731, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.7283013632750226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.LastName),Customer.Address))", "score": -0.7286866542181087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Customer.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.729317466774681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.7418072393393231, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Country))", "score": -0.7509568547593517, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Invoice.BillingAddress))", "score": -0.7598868226396007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.17831403156742454, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3232336875009855, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34982616699331165, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35224454989656806, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35383023541082437, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38042271490315044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.38579509018531627, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.39108431613738204, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4080351232551038, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4123875696776424, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.41639163809515506, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.41767679562970816, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4216809365907917, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4293823281974731, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43236722478980466, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.1638737641987973, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.28660066007899543, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3281530237955311, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3310042273436523, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3342339692361594, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3411578266680926, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.35302327736929107, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3694099302848467, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Trampled Under Foot),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3754360798756728, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.375786342920514, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3827101956454216, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38330573044565847, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.40438685610570246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Trampled Under Foot),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Trampled Under Foot),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.41034956801947176, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Trampled Under Foot),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.4116367266546045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.09000467411912881, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.1305957880715221, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.14583991580077918, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.18579905517506012, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.19423996452275183, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19476218100366482, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2034780138685168, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2112521531988775, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27429205633347004, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.2747099502581632, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.27762866722274554, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.2809180532174098, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28306271159073937, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29319698128122146, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(merge(getData(Track),getData(Track),Track.TrackId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.29836566176528734, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.16451514765315947, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(filter(getData(Album),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.2366160544464181, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.24710195330906135, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25823737193849094, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.26687815790235275, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.2671069734027563, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),filter(getData(Album),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2841901897373658, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.29002588299735815, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.2922275458741367, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29377666092881277, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2961379619111739, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.321885100293396, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.33538951074829587, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3414384675498807, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.3596524616398691, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.14918073870428059, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18198175791861504, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28576355404746345, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Track.Bytes,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2938026889540423, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.2960584482218643, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Track.Bytes,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29970168822372456, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30168389345090774, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3182773662201363, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3190473133310445, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3269937066473983, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Album.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3522263100982635, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.35648594618499435, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.35797313145540965, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Album.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.375097073202301, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.38561595021528305, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.21180304632798652, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.28306850538865547, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))", "score": -0.33834908138783265, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.3590322521449707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4164273415626667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.43029771120563964, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4414461527885578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4765537653984211, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.5636565473796509, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.5755392352321863, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.588675358605542, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.Country))", "score": -0.6142754101128958, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.PostalCode))", "score": -0.6163519795594478, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.6237829712154053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.6345324685498781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.17813995579460173, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.20172909376489964, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.22006906666572473, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.237156319196606, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26126198703679093, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2648072077517111, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29218141417331933, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3082696394356048, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3109127133123198, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3159714755539652, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3207996519669531, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32634478815490653, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),PlaylistTrack.PlaylistId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3356438214988293, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.34334568665987797, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3458932288294665, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3659999526530625, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3890924671644021, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40293821327327933, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4064941945510437, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.42163244858783944, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42603072778461887, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4295867090623833, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4412221022747862, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4434324551712605, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.44558421867553144, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.4478052651722664, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4590936069207914, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.45985766244755716, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.47295752032274924, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.47895958219673535, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.21170375253246726, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.25702785210575124, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.27358076389581115, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))", "score": -0.2802226390433837, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.30837296011418025, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.31174761597163436, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.3215853499408056, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Album.Title))", "score": -0.32356546025422606, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Milliseconds),Track.Name))", "score": -0.3292266940675075, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.UnitPrice))", "score": -0.3351031087248199, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.3357433350868387, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.UnitPrice),Track.Name))", "score": -0.3373192271082442, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.34021847334172334, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.UnitPrice),Track.Name))", "score": -0.35130808871193286, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.35476988254003433, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.145346945093479, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Michael), Employee.Address),Employee.Address))", "score": -0.17818159417947754, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Michael), Employee.Address),Employee.Address))", "score": -0.2517564948066138, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Employee.Address))", "score": -0.32351941423257813, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Michael), Employee.Address),Employee.Address))", "score": -0.36419708089670166, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.47245605275900004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Michael), Employee.Address),Employee.Address))", "score": -0.4846819098456763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5089420752455246, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5211624856456183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,!=,Michael),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.5533011285391104, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5534174266772506, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingCity,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5794540726501037, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5899035543796411, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5964392180903815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.6005958322687129, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Phone))", "score": -0.353951274373685, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.Phone))", "score": -0.3702796091820346, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Address),Employee.Phone))", "score": -0.40982228420034517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.Phone))", "score": -0.4129367460991489, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.State))", "score": -0.42162966630712617, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.State))", "score": -0.4379580011154758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Address))", "score": -0.46146215400949586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Invoice.BillingState),Employee.Phone))", "score": -0.4721451540972339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Address),Employee.State))", "score": -0.47750067613378633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.Address))", "score": -0.47779048881784547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.State))", "score": -0.48061513803259004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.BirthDate),Employee.Phone))", "score": -0.4976679821993457, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Address),Employee.Address))", "score": -0.517333163836156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.Address))", "score": -0.5204476257349597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Country))", "score": -0.5290259560133563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,NY), Customer.Email),Customer.Email))", "score": -0.17299708328937413, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,NY), Customer.Email),Customer.Email))", "score": -0.1893996109793079, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,NY), Customer.Email),Customer.Email))", "score": -0.24610282085632207, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,NY), Customer.Email),Customer.Email))", "score": -0.29240454338287236, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,NY), Customer.Email),Customer.Email))", "score": -0.38017697237228276, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,NY), Customer.Email),Customer.Email))", "score": -0.4197082331011188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,NY), Customer.Email),Customer.Email))", "score": -0.49871019623969914, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,NY), Customer.Email),Employee.Email))", "score": -0.5414181451851618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,NY), Customer.Email),Employee.Email))", "score": -0.5578206728750956, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,NY), Customer.Email),Customer.Email))", "score": -0.5674485701674712, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,NY), Customer.Email),Customer.Email))", "score": -0.583851097857405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,NY), Customer.Email),Customer.Email))", "score": -0.610561411602248, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,NY), Customer.Email),Employee.Email))", "score": -0.6145238827521098, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,NY), Customer.Email),Customer.Email))", "score": -0.6264551093408954, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))", "score": -0.6405543077344191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11724570078466298, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18247318274089452, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.19125728387990173, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.1929968218371791, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2051415087347973, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21167725679501542, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.21923393035609018, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2229840757421511, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.22796460973677266, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24959319876224934, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2513010357238927, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.27883998934306575, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2876507288636763, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.290414202314597, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29934323547367453, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.1756532505713158, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.22832705537320566, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.24248988828781043, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99), Album.Title),Album.Title))", "score": -0.262306727384939, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28181501461575253, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28565194264613686, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total,<=,1.99), Album.Title),Album.Title))", "score": -0.28969573764521683, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30255952779731426, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30297238156526557, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,<=,1.99), Album.Title),Album.Title))", "score": -0.32236244633783884, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.3274193999590856, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34203913654617335, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total,>=,1.99), Album.Title),Album.Title))", "score": -0.34236954244710666, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3458760645765577, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.3512326621566391, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.11020191500207296, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13553950139255236, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.13868461521076134, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.1957549901621527, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.20477806948997843, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.20598712558404017, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.20677018681213472, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.20836517293562892, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.212906160438113, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23072435335083263, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24278274769107988, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24541247019502635, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2661479099407558, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.2720850871016829, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28236859901438344, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2781333805367844, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2827939212321139, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(filter(getData(Customer),Customer.PostalCode,!=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2994406679439249, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30861928036800534, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Joakim),Invoice.BillingPostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30893389908972235, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.PostalCode,=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.326878596092708, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33076489605264814, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Joakim),Invoice.BillingPostalCode,!=,Joakim), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.339558443999846, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,T2P 5G3),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3477312547455927, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Invoice.BillingPostalCode,=,Joakim),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35138462080441707, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35225692147965937, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3554912631612586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingPostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3563715438146633, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.PostalCode,=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35736448772942303, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3576963915370441, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.025969810427341145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.2953754582598481, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.43123253919410853, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5015040729758312, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.PostalCode),Employee.PostalCode))", "score": -0.5300631809842205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5394151719628615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5448688181950344, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5481445179452007, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5574020463248025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.5749989823598298, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5775884027752909, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Country))", "score": -0.622677750994626, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Country),Employee.PostalCode))", "score": -0.6312058676194283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.FirstName))", "score": -0.6360884384412202, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6415680065275439, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.026387376958155073, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.43278401906174724, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.Country),Employee.LastName))", "score": -0.4533146934263641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.49381443564701694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5209210429020459, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5369998094115475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5383286986179883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.Country))", "score": -0.5610571110300953, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Customer.LastName),Employee.LastName))", "score": -0.5615040131260908, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5980302259968171, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Track.Name))", "score": -0.6148989999346668, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.6154840142056018, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Customer.LastName),Employee.LastName))", "score": -0.6225344205741932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.Phone),Employee.LastName))", "score": -0.641628356432193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.6508936295124436, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.1733092212328282, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.1863228721578087, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.23590937815681168, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.25409875091295214, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.26711240183793267, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.2780584178070768, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.2897828915572462, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.33114011718428404, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.3319319703382402, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.3393656781377147, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3417930803286444, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<=,23.86),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34811594836016635, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35381033354840774, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3543191601033944, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.369476200089668, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.11839859589235857, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Name))", "score": -0.12943315162556246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,232202), Track.Name),Track.Name))", "score": -0.32687001331942156, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,232202), Track.Name),Track.Name))", "score": -0.36159085138933733, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.3781392175310344, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.39076179885062545, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.41730796121118136, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4296274012227244, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.44224998254231546, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4687961958495012, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4870008730071669, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.49577968186584515, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.5074726005465517, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5084022631854362, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,232202), Track.Name),Track.Name))", "score": -0.5189991484512575, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.20336324465824873, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.24326354009463103, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.3744300578291586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.37528782827212126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.3780359600241354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.39127034438206465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.41518812370850355, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.43117063981844694, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.BirthDate))", "score": -0.5152988929803541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.5463546414430311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.549960543638008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.BirthDate),Employee.Fax))", "score": -0.5520958427841833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.BirthDate))", "score": -0.5551991884167364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.5623371575529745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.5631949279959372, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.11207768525337393, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42028501108997635, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),MediaType.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42436555766394846, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),MediaType.Name,=,R.E.M.),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42785646329541616, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.45737997594690033, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.457867903406298, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.46313403653038177, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),MediaType.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4651408673029762, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Track.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.47105352922622445, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48516744830354835, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5072203928734713, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Invoice.Total)", "score": -0.5136675139500859, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5150045155478127, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5578535432566661, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),MediaType.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.5598604487462683, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.09978615171491806, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.13866888605660777, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15820227339093473, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.16298833955774145, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17538710544787625, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1976285269935846, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21662683610922456, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24005077504399167, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24865103275797637, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26166241810600527, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28398138011804314, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.29811875422279716, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31032675280167177, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31038603927016756, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.320955628701553, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1623779872579962, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17157837746824892, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.22575477101470787, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))", "score": -0.2305730000254316, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.23243188749466048, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,1.99), Playlist.Name),Playlist.Name))", "score": -0.23616972421772156, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))", "score": -0.2507399641864948, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25324376499818135, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.26088776201321046, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.27447762017141947, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2868953783183405, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32211977915642986, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Customer.Fax))", "score": -0.32489454728019834, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,1.99), Playlist.Name),Playlist.Name))", "score": -0.3249129700245758, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Customer.Fax))", "score": -0.3267534347494272, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,T1K 5N8), Employee.State),Employee.Title))", "score": -0.46638128760969266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Title))", "score": -0.47612069610567365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.Title))", "score": -0.47744148084000637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.4991206618869454, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.5028998325310657, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Title))", "score": -0.5040276473803695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Email))", "score": -0.5078968622836704, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.Email))", "score": -0.5092176470180031, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.City))", "score": -0.5095218737107745, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.5107203156409769, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.City))", "score": -0.5108426584451072, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Email))", "score": -0.5349359405259118, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.City))", "score": -0.5382509866361939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Email))", "score": -0.5465355942799432, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.Email),Employee.Title))", "score": -0.5498418757454506, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.12360249883568031, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.15253125766351458, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Country))", "score": -0.5596772288445209, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.5941161427746584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Country),Customer.Company))", "score": -0.605593070435134, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.6642488052722467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.6754539736858991, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,10012-2612),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.6847825695259506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Invoice.InvoiceDate),Customer.Company))", "score": -0.728166803764907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,10012-2612),getData(Customer),Customer.Company,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.7398835311274792, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,10012-2612),getData(Customer),Invoice.CustomerId,Customer.Company), Customer.Company),Customer.Company))", "score": -0.7571748717407815, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,10012-2612), Customer.Company),Customer.Company))", "score": -0.7810209321214643, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.7882655847824935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.8404731739319686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Fax),Customer.Company))", "score": -0.8556618541952048, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Bytes))", "score": -0.09813293096252806, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.2931770891599395, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Track.Bytes))", "score": -0.5622062895909624, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Track.Bytes)", "score": -0.7442562814290723, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.7572504477883739, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.7600211090362943, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Track.Bytes))", "score": -0.7830675667859878, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.7897140989998657, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Milliseconds))", "score": -0.7908992239271267, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),InvoiceLine.InvoiceLineId))", "score": -0.8041842754198893, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Name))", "score": -0.8092036094776605, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.TrackId))", "score": -0.8377594203832096, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Track.Bytes)", "score": -0.9413847394433738, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Track.Bytes))", "score": -0.9595641897812975, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Track.Bytes))", "score": -0.9597965979553531, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.4227545686317171, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.4501946993423189, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.4596913285804476, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.4629191659641947, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.48747769522196904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.4903592966747965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.49985592591292516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.5149178259325708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.5244144551706995, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Invoice.Total))", "score": -0.5657746769738878, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.5811014600349154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Customer.Phone),Customer.Phone))", "score": -0.5981453855776121, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Invoice.Total))", "score": -0.6059392743063654, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.6085415907455172, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Track.Composer))", "score": -0.6180382199836458, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.16349997511895528, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2191280518659941, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27128482719460406, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2788873801242544, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.288200190098798, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.290022138671529, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29485801049996263, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2966739662355146, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30056439188759804, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3054002587321222, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3133724468013773, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.32343592474488286, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.32485141802946754, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.33813487659035474, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40132531058585347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2454485532707622, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32506038715165064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3518357959455898, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38617999226516986, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3985589531130245, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4406269279188564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4618171746915323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.CustomerId,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5031951454348018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5083919685912249, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5376353052324703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5751234586423379, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5799411526022595, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5921782399600488, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.InvoiceDate))", "score": -0.6194952542101656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.InvoiceDate))", "score": -0.6393946480227819, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18293664587817238, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22663481781594447, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2267446346515595, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22773204018218274, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2625847832769689, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.2860755788355755, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.302069344407546, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3141629092025759, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.31843047987283857, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3187230468864332, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32846477137289953, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3452900186014091, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.34622489343241025, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.36529138657475374, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3676055665381808, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.020864606944087427, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Employee.Country))", "score": -0.4884739603076014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.5150964345011744, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5566439524512626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5701444682475922, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5793678904218307, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5928684062181603, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6251675816381845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6352422511153898, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6465734239704489, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6478915196087526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6487427486373848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6544162368809339, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6918114400396007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7086462000079337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.11548425274372914, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.14885835094114153, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.15201401446142082, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.15818733787286052, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.16630233595061714, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18728818475267325, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.20466552080972497, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.22759880975457347, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.25140503692446875, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28944459030886005, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3146403165179153, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.31674828232949387, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.31960362336817255, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.3470989856179091, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.36437497565502974, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.08593696347485473, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.1593184600443865, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.16606293072435457, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.22203659614888294, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.22662365969850873, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.27751799618193435, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.2955887584275971, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.UnitPrice),Album.Title))", "score": -0.3077206157897804, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3079176936216097, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.3172882511160306, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3264880489327283, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Album.Title))", "score": -0.3453423688570983, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.34692699130883903, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35580079188998676, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected AAC audio file),Track.UnitPrice),Album.Title))", "score": -0.3784028774863016, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.03277578082997934, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.3935091855855717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Employee.PostalCode))", "score": -0.3948894801469578, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Employee.PostalCode),Customer.PostalCode))", "score": -0.47835101810414926, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.5329208303628548, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Artist.ArtistId))", "score": -0.5897378387780918, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6251749274706526, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.6504165145488514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6654624817347212, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6901810047602339, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.Address))", "score": -0.7178342404695286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Address),Customer.PostalCode))", "score": -0.7256196948619618, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Country),Customer.PostalCode))", "score": -0.7306632014842762, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7435940978502913, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Artist.Name))", "score": -0.794883317026688, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.031053046102897497, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Track.Name))", "score": -0.41141817193783936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Employee.LastName))", "score": -0.4665451369837683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.FirstName))", "score": -0.46900555711545167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.599433983083145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.FirstName),Customer.LastName))", "score": -0.6112853953272861, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.Country),Customer.LastName))", "score": -0.6130353876978916, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.614792516884668, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.6231066240947931, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.Email))", "score": -0.6463392696932715, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.66437167615004, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.Email),Customer.LastName))", "score": -0.6854061552912754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.7122489513062465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Track.Name))", "score": -0.7171794777945141, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.7205630585163717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.2189895107258053, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.Title))", "score": -0.30590446729547693, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Title))", "score": -0.30747390229589655, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.3580997927892895, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.Title))", "score": -0.38486165244466974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.4461790515888424, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Email))", "score": -0.4813445403087826, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.FirstName))", "score": -0.506384511183569, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Title))", "score": -0.5091908319700451, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.LastName),Employee.Title))", "score": -0.5272669835794659, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.City))", "score": -0.533094008158514, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.Title))", "score": -0.5484571891413792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),filter(merge(getData(Track),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Email,=,laura@chinookcorp.com),Genre.GenreId,Track.GenreId), Genre.Name),Employee.Title))", "score": -0.5573307869234881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.Title))", "score": -0.5665680692617426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId), Genre.Name),Employee.Title))", "score": -0.5829733170612356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.030815714658274374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3081921280036113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.42211747045166703, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5257427823849559, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5576903463015697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5706534624705455, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Employee.Address))", "score": -0.6044382871268681, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6365484905133455, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6726187706599376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6758749483465583, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6994757639849922, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.699493883797004, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,null,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7119974136958263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.7232047141669682, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7938325988734505, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.UnitPrice),Artist.Name))", "score": -0.19892884329610186, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.23129644495906485, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.Milliseconds),Artist.Name))", "score": -0.2339415691275943, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.23643441701224027, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2500017008870986, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2703294777779282, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.2769471770899436, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),Track.UnitPrice),Artist.Name))", "score": -0.27874808696124725, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.28363294461243777, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.Bytes),Artist.Name))", "score": -0.2879057191600012, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.28817523094853154, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.31395090527475816, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,!=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.314878522263793, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Bytes,>,9010917),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.33166806842689656, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.3329558064043592, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.2092472098174767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.23580948331982654, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.4129133793030848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.41607061551731134, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.44410060787231487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.4638270034793095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.4706628813746647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.49038927698165935, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.527147880227858, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Customer.Phone))", "score": -0.573084201418169, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2009-05-06 00:00:00), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5827785136468197, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Customer.Phone))", "score": -0.5996464749205188, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.6160267595438285, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6177478269055428, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6394267871382908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1803240218181038, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1914960113877288, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2213520562445324, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23314437586485265, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23868519554655196, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.Total),Invoice.Total))", "score": -0.24025695401982755, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2524423685664746, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2553710612146294, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25819891158965713, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2671977891404518, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26723410824802446, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27120576331563434, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.Total),Invoice.Total))", "score": -0.2720380459608117, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2781492996775947, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28075439204451075, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.2140387176066266, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.2754838308988066, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.3069859206685974, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.32956504173620643, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3333283497366094, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3495007225780158, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.35191283310354105, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3519427099793572, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.35437870003753846, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.3595450146426105, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3630326903847271, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Invoice),Invoice.BillingCity,>=,0.99),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3650957198283964, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Invoice),Invoice.BillingCity,>=,0.99),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.3665152505958439, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.36839278312745116, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.3736471034107159, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.018524358294598642, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.4944507916535082, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Album.Title))", "score": -0.5086532265540882, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.FirstName))", "score": -0.5870265693065448, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Employee.FirstName),Customer.FirstName))", "score": -0.617558943818949, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Fax))", "score": -0.6423074931499286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.PostalCode),Customer.FirstName))", "score": -0.6720076080073341, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Fax),Customer.FirstName))", "score": -0.6869901891459449, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6924742451647035, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Album.Title),Customer.FirstName))", "score": -0.7084030385722144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Track.Name),Customer.FirstName))", "score": -0.7175207014788612, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.PostalCode))", "score": -0.7234117717143818, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Track.Name))", "score": -0.7415321797725483, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.LastName),Customer.FirstName))", "score": -0.7658251996745093, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Company))", "score": -0.76642743056982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.12854074682470573, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Customer.Email)", "score": -0.40603170130836846, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.Email))", "score": -0.46177590830484405, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.5362700317637064, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.5503161047236063, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,None), Customer.Email),Customer.Email))", "score": -0.5958702806965448, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Track.Name))", "score": -0.6461719338529385, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Track.Bytes))", "score": -0.6787155811943834, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,None), Customer.Email),Customer.Email))", "score": -0.6895438470528461, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Email),Customer.Email))", "score": -0.7640379863441922, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,None), Customer.Email),Customer.Email))", "score": -0.7780840355553664, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.7792381211766042, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Track.Bytes)", "score": -0.7840759833560732, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),InvoiceLine.Quantity)", "score": -0.8088439157442401, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Track.Name))", "score": -0.9048634218634106, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.029769636272249045, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3921607347060767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4542494988598316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.48765298830346027, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4944209025314836, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5127013610217546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5275861011359666, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5322692092350053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5346700380961351, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5414379467864812, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5853375779006456, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6323307666934852, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.638771890244243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "count(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6520814632458496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6799192362705071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.21990547215864353, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Title),Employee.City))", "score": -0.33693210667297535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.3893624272041052, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.Title))", "score": -0.41568898296281986, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.479823066651079, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Address),Employee.City))", "score": -0.4860004473321169, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.49182257315442257, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,7727B 41 Ave), Employee.Title),Employee.City))", "score": -0.506389061718437, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.BirthDate))", "score": -0.5198901209823816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Email),Employee.City))", "score": -0.5248139787308901, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.State),Employee.City))", "score": -0.5260461855523317, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.City))", "score": -0.5274491000764101, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Title),Employee.Title))", "score": -0.5327156174771517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.5332582916907995, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.HireDate),Employee.City))", "score": -0.5726929593674868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.23934988174650018, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.28099083212152937, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.28391668224041233, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.2897204795590059, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.2938026956766072, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3031046025564448, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3112395743491537, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3137244674254533, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.32419814616296966, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.32476627485400794, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32931180359823237, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Temple of the Dog),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.333449154519338, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.33507464028201983, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.UnitPrice,=,Temple of the Dog),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3370543445763578, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Temple of the Dog),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3370853444868831, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.0358272326993756, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.Country),Employee.State))", "score": -0.3631406362983398, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,11120 Jasper Ave NW),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.4717121358473324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.49224665149286695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Address))", "score": -0.5213198123383336, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Country))", "score": -0.5240682421135716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5278994769103449, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.5569650015819121, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Customer.State))", "score": -0.5573813674855046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.5625483911598133, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5725249468787014, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.5853490170987705, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.BirthDate))", "score": -0.5862197635578923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Customer.State),Employee.State))", "score": -0.5954400833579712, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Phone))", "score": -0.6224753616261296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.11716250939939638, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.13532372995541422, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.14460906017666073, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.148515267992622, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1561460469460662, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.17827895290007434, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.21086907156271845, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2366647106154549, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.282217255690815, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.28395635005177006, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),Track.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32781183387267204, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3364657271884258, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.3420613014299744, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.InvoiceDate))", "score": -0.36442880626813307, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.Total),Invoice.InvoiceDate))", "score": -0.3659440531290773, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14106131709771103, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18764164387805682, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2193305135966571, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.22022795486853, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22355741934474457, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2246441650516125, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.23462405748269569, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23515189646015405, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26070229281068985, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.26306082498903016, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.2631434264553255, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.28072466785232936, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2853835172229459, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30440911387445796, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.30924403682495916, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24851707530433487, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.289375932637995, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.City))", "score": -0.31000497353488754, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Track.UnitPrice))", "score": -0.3306110293906386, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Employee.City))", "score": -0.35086383086854767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Track.UnitPrice))", "score": -0.3714698867242987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Track.Milliseconds))", "score": -0.5072757990401442, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5278660354506428, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Track.Milliseconds))", "score": -0.5481346563738043, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5687248927843029, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.585979083303755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Employee.City))", "score": -0.5893539336811955, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.BirthDate))", "score": -0.6066881210845168, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.Title))", "score": -0.6068984658759291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.6099599895369465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Acelerou),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1288283704514742, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13390711285900914, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Acelerou),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.15360777418189825, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.15892910768997195, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.16717067575428574, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.2564372563063709, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.3203476681579859, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32877097915747294, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.35264283499087395, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.3658975525425597, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36769149313629523, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.37068045828761687, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Acelerou),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3851943107548721, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.4001819416143257, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Acelerou),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name)", "score": -0.48381967297134953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
