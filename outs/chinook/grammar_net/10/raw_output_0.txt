{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.14233089208146, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.145176472107885, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.17975382594704245, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.18271400058241372, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.183891656808537, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.1905809360290403, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23029749563127977, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.2303283518853218, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2312368127435049, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.23525923331270288, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25934731687469076, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2616566218089732, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.26836272078667334, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2730793537065115, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2795521968687152, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.17085665297046326, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23129951920376043, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23488722586554137, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.23712171285521574, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2517203232059034, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,AB),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2557132396553686, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.26022626881245425, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.26032706827406527, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2624820696014166, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.26494822823507025, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.FirstName,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26690650949679157, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2689368320704372, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.FirstName,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2830945572017919, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28330218739598406, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the sum of the lengths of all tracks sold by employees from Alberta?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.FirstName,=,AB),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.28529901034743776, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1671735193016765, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20975493158857028, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.21207115755033001, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2129027821945627, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22956475088565684, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2519529553084266, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25443544565603426, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2620265607085344, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2667832505796594, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2733800147057179, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27576401572168374, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.27609753440156737, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2796912413469155, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.2890148066319608, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),Invoice.Total)", "score": -0.292189972364048, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Album.ArtistId),Track.Name,=,Coma),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3811697825763037, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.41959837381317633, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.433727383785902, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma), Genre.Name),Genre.Name))", "score": -0.43638542170640265, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Coma),Album.AlbumId,Track.AlbumId),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))", "score": -0.44088535355000585, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.445827149400189, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.44862991406411173, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.AlbumId,Track.AlbumId),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))", "score": -0.4516715978106507, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,!=,Coma), Genre.Name),Genre.Name))", "score": -0.46035337448529234, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4697590450557487, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.47116073929205804, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.4721982435113585, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.4750584925618575, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),merge(filter(getData(Track),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.479647742610299, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres were used for tracks with the name Coma that are in an album with another title than C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Genre.GenreId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.4808187818542461, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Coma),Album.Title,!=,C\u00e1ssia Eller - Cole\u00e7\u00e3o Sem Limite [Disc 2]), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.16548076910894033, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.1715397379400915, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.20688619292704696, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.23991847993256593, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.24076522016349264, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2464845788651467, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2604168129993878, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2616958558803979, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(Album),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2783636691703287, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2799138789905028, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2931732780880738, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30078214108985724, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3019933876954778, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30415886526193536, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.31088952530412717, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.18664109118522462, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.21769333676366992, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.23074942517195002, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.2952439935066246, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.2975668098477913, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3115281310563142, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3425803766347595, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3440006116155079, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Track.GenreId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.34414262513646227, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.3463234279566746, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.35282935003826793, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.35339070118894267, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds),Track.Name))", "score": -0.35563648137918724, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Track.Name))", "score": -0.3590776110999779, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the shortest track that we have in the database that does not belong to the Rock and Roll genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Track),Track.GenreId,Genre.GenreId),Track.Milliseconds),Track.Name))", "score": -0.37331117874478115, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock And Roll),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1495492182705675, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16790799104716791, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.178651265310665, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.18745007034203282, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.18866975450346662, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18968454980357677, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19851618790376235, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21220961629368412, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21268394741562968, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21416898546276852, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2185540776621211, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.21998175188933583, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22202767202202353, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.22692381106652862, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices that include tracks from a playlist with the name Heavy Metal Classic?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Invoice.InvoiceId),Invoice.Total)", "score": -0.231661957849895, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.03534553865392809, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.33592150187541847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4706978538488329, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.4718730190252245, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5895584562276781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.5918895938848436, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.5920096015912852, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6031915383247584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.6220798233007372, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Employee.Address))", "score": -0.6531940592867613, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.State),Customer.Address))", "score": -0.6870161065780849, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Invoice.BillingAddress))", "score": -0.6906620158297301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Rio de Janeiro), Customer.Address),Customer.Address))", "score": -0.6990318634962023, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.7650620607891885, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}, {"orig_question": "What are the distinct addresses of our customers from Rio de Janeiro?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.City,=,Rio de Janeiro),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.7657340246865494, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Rio de Janeiro), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.4323914009779561, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.45800853603722, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.47246902145974345, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.492433845901846, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.4971207931952592, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.49789269158943505, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.4980861565190074, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5043089604185993, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.517505172678775, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5302872229196466, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(merge(filter(getData(Track),Track.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5334385517518753, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Invoice),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5345333221540179, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Track.Milliseconds),Track.Name))", "score": -0.5381430260000827, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5675331377636688, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}, {"orig_question": "Which Heavy Metal Classic track is the shortest?", "inferred_code": "isEmpty(extractValues(min(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Heavy Metal Classic),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Track.Name))", "score": -0.5753087874060013, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.2566912957108084, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2764433358295237, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2867774423361041, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.297673905365432, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.29928353118722106, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.30624693219266497, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31402685082018195, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31590065565582226, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))", "score": -0.3159451292085988, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3197261585522004, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32198194724423174, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.UnitPrice),Track.Name))", "score": -0.3222761865058344, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3284067810445148, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33448800236835596, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are on the Classical 101 - Deep Cuts playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.UnitPrice),Track.Name))", "score": -0.373663112658768, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.11251497525751884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.12531359872808762, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.13580012035832595, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.16800666286948562, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.19288921953087718, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2376733946342287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.29374886962657826, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.30993179858323816, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3377566578110091, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3599301286719972, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,=,2509409),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3854079351505391, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Bytes,!=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4107914486789392, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Track.Bytes,=,2509409),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.4466436543900375, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,2509409), Artist.Name),Artist.Name))", "score": -0.4498082686630011, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.4677899015962046, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.11659716532505401, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.1352376795955818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.15822208974241753, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.18694409750265759, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.19452696436206512, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.2988980275886075, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3293082540097205, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675),getData(Artist),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33985674200710214, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Employee),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.3573080903684125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Employee),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3587526806827908, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,=,196675),getData(Album),Track.AlbumId,Album.AlbumId),getData(Employee),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.37470952445149164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Genre.GenreId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.38446011946550956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Invoice.BillingCity))", "score": -0.3922260867648635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Employee.PostalCode))", "score": -0.39314174389841916, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "Is there an artist which made a track with exactly 196675 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Customer),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds,=,196675), Artist.Name),Artist.Name))", "score": -0.39748848930764674, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,196675),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.25432968513616466, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2768489137398102, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.28436154184661505, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.303294481115156, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.Country,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3068807704502606, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.31926217768212756, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3258137097188015, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3333263378256064, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.336839253068748, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.3409770520308408, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Customer.PostalCode,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3417814062857731, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Customer.PostalCode,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.34929403439257795, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), Track.TrackId),Track.Bytes)", "score": -0.35310346613644195, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Invoice.BillingCountry,=,Redmond),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.35584550716604657, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}, {"orig_question": "How much data were sold to customers in Redmond?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Redmond), Track.TrackId),Track.Bytes)", "score": -0.3572412650985347, "correct_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Redmond), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.04450879948853981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Country),Employee.LastName))", "score": -0.39343368406116497, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.4568795171222267, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.Country))", "score": -0.4574029180657817, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.465783691543038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Fax,=,+1 (780) 428-3457),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.47428390210800164, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.4777617875844641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.4974069457712554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.4985429887933102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.5033882791030584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5194252592555476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Customer.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5269811609497899, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))", "score": -0.5300988913950277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.5450517266852462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}, {"orig_question": "What is the last name of the employee that has the fax number +1 (780) 428-3457?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.Phone),Employee.LastName))", "score": -0.5611121296387864, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (780) 428-3457), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.20092124923426863, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.23714493450677362, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.25122563495427724, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2887279453821596, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.29012157152888124, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),Track.UnitPrice),Album.Title))", "score": -0.2911887705205397, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.30092061245800333, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.315001312905507, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3154437644503456, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31577897071214256, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3295244856641386, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3297698382047262, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3302361540145305, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.33073754548877443, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which album that is not Jazz has the track with the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.UnitPrice,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.34400437618639335, "correct_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.28580445819783057, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))", "score": -0.29677311180421384, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.3385157558133923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.35576481702008833, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.3579769349688172, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.36776889651910655, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.37522599617551317, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate)", "score": -0.38311623152385427, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.38569961388858093, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(getData(Employee),Employee.Address,!=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate)", "score": -0.4039387387345064, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.4352155440664081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(getData(Employee),Employee.Address,!=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.4469528531905534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.InvoiceId,Customer.CustomerId), Employee.BirthDate),Invoice.Total)", "score": -0.463152987815797, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate)", "score": -0.46508066984513025, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "Which is the birth date of all employees living in 590 Columbia Boulevard West", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,590 Columbia Boulevard West), Employee.BirthDate),Invoice.Total)", "score": -0.46766405398208194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,590 Columbia Boulevard West), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11702355477960062, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.16021380468099858, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1763140239568868, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.17883139984876548, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18215289078736827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18716919418785027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20000645004280573, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2008534833646767, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.2156132148758051, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21573572796099535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2205870178847933, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.23047398676851563, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.23248401534762972, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24696004530140975, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types in tracks of playlists except from the playlist named Classical?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))", "score": -0.2547999582518666, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Classical), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.0853797910585854, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.276332092083976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.3567127702608559, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.418362111397073, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.4731112239733193, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.516275108404443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.5424300549402687, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.5581016061678383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.HireDate),Invoice.InvoiceDate))", "score": -0.5667950814440701, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Invoice.InvoiceDate),Employee.HireDate))", "score": -0.596073813348994, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.6020546626150463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6058365410044644, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6093144124224636, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.6157643316164467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What are the dates at which all employees called Nancy were born?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,=,Nancy), Employee.HireDate),Employee.HireDate))", "score": -0.620717926261932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.02529539686458487, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.561711438377548, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6390000809301992, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.6437639942387724, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.7023833157771205, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingPostalCode),Artist.Name)", "score": -0.7275628607136758, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7705994708854454, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7854493170064384, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Album.ArtistId),Artist.Name)", "score": -0.8317642941374702, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Album.AlbumId),Artist.Name)", "score": -0.85248941625159, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.ArtistId),Artist.Name)", "score": -0.8529200402819551, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), InvoiceLine.InvoiceLineId),Artist.Name)", "score": -0.8535113611722336, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.8820583414109808, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Invoice.BillingCity),Artist.Name)", "score": -0.8868223726788527, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Album.Title),Artist.Name)", "score": -0.8919075779106462, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.03493136669677032, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4868643265322126, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.6647741090643637, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -0.7026282945339984, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -0.8448538820360607, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Genre.Name,=,None), Album.Title),Album.Title))", "score": -0.8454007354157511, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.FirstName))", "score": -0.9593220135828748, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.0121832738801704, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Customer.City))", "score": -1.0347725199848221, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Customer.FirstName),Album.Title))", "score": -1.0407138371327884, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.0496082125528086, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.0548418827534998, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Customer.City),Album.Title))", "score": -1.068540036755514, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0924166735487117, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What albums do we have in our database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1050923356629894, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19717291465901127, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.19783579516617575, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.210900621309766, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.2370349445959952, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,!=,Jazz),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.26256464629077036, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Bytes,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.30254535028491897, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3040612479007083, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.30770555558381346, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.33653486236635843, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3477313779305236, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3516000582327445, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,!=,Jazz),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35267930450325624, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Track.Name,!=,Jazz),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3534336313805604, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,!=,Jazz),getData(Track),Track.TrackId,PlaylistTrack.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35812559060871524, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Bytes,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.37473194361498713, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.13166762567518953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.1694993641474898, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.1810696686175626, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.1825554234858526, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1876030296920651, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19559024762464744, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2022437508359762, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20525251197527072, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20766185808940388, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Battlestar Galactica), MediaType.Name),MediaType.Name))", "score": -0.2594640909025345, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2603813470843246, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2669106074383849, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Battlestar Galactica),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2677507162885695, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2778565669317072, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks appearing on albums from Battlestar Galactica?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Battlestar Galactica),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28446745230123743, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Battlestar Galactica),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.2564087458886206, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.28112939570314166, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.294812296004287, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Genre.Name))", "score": -0.312005361512073, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Genre.Name))", "score": -0.3256882618132183, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.34188297463051426, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Genre.Name),Track.Name))", "score": -0.34272445600240226, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Genre.Name),Track.Name))", "score": -0.3564073563035476, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Genre.Name),Genre.Name))", "score": -0.37360042181133357, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.38025865459044556, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Genre.Name),Genre.Name))", "score": -0.3872833221124789, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.3939415548915909, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Track.Composer,!=,Jay Kay),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Genre.Name))", "score": -0.3943260783807057, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),MediaType.Name))", "score": -0.3968117418241495, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.40363053290731693, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1193951574501506, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.12852440454868655, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),Track.Milliseconds),Album.Title))", "score": -0.16670217587487515, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),Track.Milliseconds),Album.Title))", "score": -0.18844987337836125, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.22167215145893857, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33739425363179854, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.38446073196094216, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,InvoiceLine.InvoiceId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3969138033297828, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,TV Shows),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4014586746070673, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),InvoiceLine.Quantity),Album.Title))", "score": -0.41092767532401614, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.41102539598621, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,TV Shows),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4111123020764957, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),InvoiceLine.Quantity),Album.Title))", "score": -0.41520726916949, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,TV Shows),Track.UnitPrice),Album.Title))", "score": -0.41790767092030845, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which albums are the shortest tracks of the TV Shows genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity),Album.Title))", "score": -0.41905247337844576, "correct_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,TV Shows),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.018850881031539757, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,U2), Track.Bytes),Track.Bytes))", "score": -0.413824392373499, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,U2), Track.Bytes),Track.Bytes))", "score": -0.5142822077193199, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5294243772179353, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5521128076025503, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5534516938959853, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5594756747839235, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,U2), Track.Bytes),Track.Bytes))", "score": -0.5633534459702787, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),filter(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Composer,=,U2),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5644589708995432, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.5704131826052036, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5931016179737281, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,U2),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId), Track.Bytes),Track.Bytes))", "score": -0.5944405142349819, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Name),Track.Bytes))", "score": -0.6131090959606809, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,U2), Track.Bytes),Employee.Email))", "score": -0.6157036578588304, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}, {"orig_question": "What are the sizes of the tracks composed by the \"U2\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>,U2), Track.Bytes),Track.Bytes))", "score": -0.6502862243287382, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,U2),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.023828540362046624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.3374206073503956, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingState),Invoice.BillingState))", "score": -0.5714038108734242, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.5887427195295332, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6363212389088714, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Ireland), Invoice.BillingState),Invoice.BillingState))", "score": -0.6517433243725463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Employee.State))", "score": -0.6675545200139762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6783392819810897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingState),Invoice.BillingState))", "score": -0.6797744745477958, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.6983097908241689, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Employee.State))", "score": -0.704548939961569, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingState),Employee.State))", "score": -0.7151330393933144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.7273529939271342, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Employee.Address))", "score": -0.7387953810601426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the states to which invoices are sent in Ireland?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingState),Customer.State))", "score": -0.7453174357126658, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1260474821689146, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1311427488461722, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.16805539517683138, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.1950163072722172, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2130607677172723, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2181022800876049, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35989602742158017, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.36493753979191274, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3659870897451898, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39245377608358367, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39749528845391624, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4174395499821491, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.TrackId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4424332531290041, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.44294968917525473, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.4479295795790696, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.15106118408289174, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.1812817020869385, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18258010626953325, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.18730461679385396, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19266609900430895, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19430606788207253, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.19611765273685206, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19947548224287284, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20145750879698088, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.2090130008642649, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Raul Seixas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2133752724692534, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.21522313749610295, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21562871156585306, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.21716977544468838, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on purchases of tracks from the artists Raul Seixas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)", "score": -0.22647627775958454, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Raul Seixas), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.2074598841637782, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.21708262854738986, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.26131886280280137, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.2776965590800002, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2779578931568213, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))", "score": -0.286675343571393, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Track.Bytes,!=,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.2928501607435842, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2965588284245408, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3022612176907736, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.3067406271395511, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.3119335498471019, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796), Artist.Name),Artist.Name))", "score": -0.31279911433785884, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.31838811475964096, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,!=,6254796),filter(merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Sex Machine),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3250015279327144, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists are there where the title is not called Sex Machine ant the track bytes less than 6254796?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Bytes,!=,6254796),getData(Artist),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,6254796), Artist.Name),Artist.Name))", "score": -0.3314622959815038, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,6254796),Album.Title,!=,Sex Machine), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.State),Employee.State))", "score": -0.20372893837178044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Fort Worth), Employee.State),Employee.State))", "score": -0.2599146891734563, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.State),Employee.State))", "score": -0.27342265659200243, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Fort Worth), Employee.State),Employee.State))", "score": -0.31661221462539535, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth), Employee.Country),Employee.State))", "score": -0.33455215994224, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.State,=,Fort Worth), Employee.State),Employee.State))", "score": -0.33801228005284595, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,=,Fort Worth),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.33923986421070396, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3401484412325708, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCountry,=,Fort Worth), Employee.State),Employee.State))", "score": -0.35943019009117855, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Fort Worth), Employee.State),Employee.State))", "score": -0.36967161453318176, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3729013296177072, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingCity,=,Fort Worth), Employee.State),Employee.State))", "score": -0.3863059328456174, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,Fort Worth),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.3870404774971879, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Title,=,Fort Worth),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Customer.State),Employee.State))", "score": -0.40111930416779285, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}, {"orig_question": "In which state to my employees live which are supporting customers from Fort Worth?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Country,=,Fort Worth), Employee.State),Employee.State))", "score": -0.4021346531429908, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,Fort Worth),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.14666319781931417, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.17626793571712993, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.19154083739150224, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.20173713378818908, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.21615618361991917, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)", "score": -0.2253611779917423, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23504107272483266, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Country,!=,Canada),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23609640794598305, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2363886268646867, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.237868645183781, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada), Track.TrackId),Track.Milliseconds)", "score": -0.23994238621239886, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24466356765583475, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Canada),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2456578340925429, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.27002179430697043, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks sold by employees outside of Canada?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Canada),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.27653514370737214, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Canada),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<,Five Years Gone), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3757749957481653, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3762165653067927, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.38169319858913364, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4003133635200426, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.40698811267518603, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,>,Five Years Gone), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4124260101559149, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4183442129968833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.4220484550033832, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4223127951653588, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.42231993501690146, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.4223539318256512, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.42823099800632713, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.44442512222414693, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.44754242724795784, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any invoices on which the track Five Years Gone has been billed with the price equal to or lower than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId), Invoice.BillingCountry),InvoiceLine.Quantity))", "score": -0.4603423788908405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(filter(getData(Track),Track.Name,=,Five Years Gone),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.061839487652066996, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.35815405856556026, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.37595845680906587, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.4094461654144325, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4384570489439716, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.44961378275340486, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.4850408043639813, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Artist.Name,=,None), Album.Title),Album.Title))", "score": -0.4954218713034048, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.49785109669077265, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5060512432565625, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5121123748883106, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5242156606215, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.532668299530285, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5494814831714974, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What album titles do exist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.5636898858197997, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14830698036566192, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16010567506886728, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.1711352161744585, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17331346371715053, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17385918128676858, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.18828097100352312, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1973794860989182, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.19763154758876772, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21230018312705656, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2132460530976963, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21341704996021313, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21975052115079902, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22645879137326677, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23264747246537887, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of purchases made for tracks from the playlist TV Shows?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.InvoiceId),Invoice.Total)", "score": -0.24026642645195345, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.04506082984583786, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.6034420362070607, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6406844305033464, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -0.7037756739044536, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -0.8131761303661802, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8938666681642644, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.UnitPrice)", "score": -1.0168979193199246, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.0665493405548705, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0905810110956211, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1129097057516746, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Track.UnitPrice)", "score": -1.1172315570173175, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.1790823754814954, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.1963601505664785, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.UnitPrice))", "score": -1.1973699758882674, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "how many album titels exist?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Track.UnitPrice)", "score": -1.226632013479044, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.0824574063444743, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1891335117543349, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4169909729534993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4285171999508748, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4776688589627156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5236670783633599, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5351933053607354, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5651776864106068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5843449643725762, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.610250241952599, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6362202243326465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6718537918204674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7131244017655263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,>,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7169263473624596, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "From which countries have purchases after or on the date 2012-10-06 been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7261182449437911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2012-10-06 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.1562489249409516, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.20101971448108946, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.23527329841987973, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3016164522532557, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),getData(Track),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3244210697692667, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.32702240158350127, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Country,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3331693513734324, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33493494664836626, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)", "score": -0.35614126965341136, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.LastName,=,Canada),merge(getData(Customer),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.3594564926053637, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Country,=,Canada),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3650804208478852, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.392385377995847, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39276882572444727, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.39383809463860797, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price per track for employees in canada? ", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.394221550483181, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,Canada), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.014883653041889527, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.581094677307585, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.5861560160691436, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6104364983264029, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6419440141253463, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Employee.LastName,!=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6635274855362439, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Employee.LastName,!=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6700766570862865, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6712856579384952, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Employee.LastName,!=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.6921991457253843, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Employee.LastName,!=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.6987483172754271, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.6994813237041322, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Customer.LastName,!=,None), Artist.Name),Artist.Name))", "score": -0.7089905653322607, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7288231447229502, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7528282785738307, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Customer.CustomerId),MediaType.Name,!=,None), Artist.Name),Artist.Name))", "score": -0.7572240069612662, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.11950143044849461, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.2160775709460925, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction), Album.Title),Album.Title))", "score": -0.2303283224822636, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23071460434850669, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.24203397068689445, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.24349847609016373, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2458934537001481, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2621446479372458, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27528570737264746, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.297622241727207, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30589847685733507, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3091542650465022, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.33089891229805934, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.33351806998943034, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Album),Album.ArtistId,Album.AlbumId),Track.AlbumId,InvoiceLine.TrackId), Album.Title),Album.Title))", "score": -0.4134671112931345, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.04372411834265222, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.335841730779066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Employee.PostalCode))", "score": -0.36212642545069684, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Customer.PostalCode))", "score": -0.445002490265324, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5737244725060009, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.5764994155033492, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Artist.ArtistId))", "score": -0.5792440330442332, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.63979259257394, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.6778151956568763, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.Country),Customer.PostalCode))", "score": -0.6792986035179638, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))", "score": -0.7135685396679037, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.7371201027017378, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.FirstName))", "score": -0.7589145457204722, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Employee.PostalCode),Employee.PostalCode))", "score": -0.7634047973733686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal code of our Customer with the phone number +1 (608) 257-0597?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.FirstName),Customer.PostalCode))", "score": -0.7685191273521923, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (608) 257-0597), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.1307461035873784, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20172711457312462, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.23625185912296895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.23806772672192206, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23856913133951468, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24445588735846216, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25776661680111995, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.25816136129291317, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.29810974686177466, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.30048253501517896, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Genre.Name))", "score": -0.3023018802592953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3025421051608987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.30402329646326826, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.30581432996434593, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3248413113745838, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24317301451446838, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25732113062622375, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2849129551577789, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40921772285582847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42336583896758384, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.450957663499139, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5192066693234665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5210380220341904, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5432480556446535, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5462066495347244, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5467673727798683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Title,=,+46 08-651 52 52), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5539068543839676, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.5573961717564089, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,+46 08-651 52 52), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.5609154888916237, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "To what postal code does the number +46 08-651 52 52 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,+46 08-651 52 52), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.5635446218329889, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+46 08-651 52 52), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Milliseconds))", "score": -0.1978314753378072, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.21020181586391118, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Milliseconds))", "score": -0.3411384459341207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.35350878646022466, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))", "score": -0.35379871090299275, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Name))", "score": -0.3661690514290967, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Milliseconds),Track.Bytes))", "score": -0.4010592411959806, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.40853224058992055, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Name),Track.Name))", "score": -0.4209025811160245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Bytes),Track.Milliseconds))", "score": -0.49710568149930623, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Bytes),Track.Name))", "score": -0.5094760220254102, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,When It's Love), Track.Bytes),Track.Bytes))", "score": -0.544366211792294, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Bytes))", "score": -0.5570264767611661, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Milliseconds))", "score": -0.5644994761551061, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Which is the duration of the track \"When It's Love\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Name),Track.Name))", "score": -0.5768698166812101, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,When It's Love), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2380277474533324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.24329431990698225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2466908308124181, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.24809414727658494, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.2678621004666461, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Bossa Nova), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2763932726822583, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.28351457817393805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.29666840891169244, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),InvoiceLine.Quantity))", "score": -0.2987221766642522, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.29927756826330987, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.30068088472747667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), MediaType.Name),InvoiceLine.Quantity))", "score": -0.3106483914761991, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.318986685998943, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3203900024631098, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any invoices on which tracks belonging the a genre other than Bossa Nova were ordered?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3207570239354794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Bossa Nova),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.08412394606694083, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.49552606708545727, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.644909247201946, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "sum(distinct(getData(Customer), Customer.LastName),Customer.LastName)", "score": -0.6469942690439433, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.7436953526103587, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Country))", "score": -0.7941652399770764, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8318507442837737, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Track.Name))", "score": -0.8789439868886225, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -0.8993123939701476, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),MediaType.Name))", "score": -0.914418710588937, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.9214604602215954, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.9336327024152435, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "sum(distinct(getData(Customer), Customer.LastName),Customer.Country)", "score": -0.9521440834269685, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "sum(distinct(getData(Customer), Customer.LastName),InvoiceLine.Quantity)", "score": -0.9633290063472381, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.976411711465219, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.37196450445996954, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3746473487603084, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38026114039564396, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3828238586316162, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38294389675276563, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3850493504224465, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38773209013061993, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.38786622077687616, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39249716963958675, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),Playlist.Name,=,Hermeto Pascoal),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.3925229000965725, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3933458817659555, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39602869041915983, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.39753953178484663, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Artist.Name,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.3989972850899262, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}, {"orig_question": "How many different totals exist of orders which included tracks by Hermeto Pascoal?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Hermeto Pascoal), Invoice.Total),Invoice.Total))", "score": -0.4221449372309263, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Hermeto Pascoal),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.02861253635455796, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.3754480415718717, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Employee.Phone))", "score": -0.48949304174129793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.LastName),Customer.Phone))", "score": -0.583461577514754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Track.Composer))", "score": -0.6236553485268814, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6261779898541135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6290583843128843, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Playlist.PlaylistId))", "score": -0.6373040969247086, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Country),Customer.Phone))", "score": -0.6671835728684528, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6698756450550718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6726358169453306, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Fax),Customer.Phone))", "score": -0.6785445757905109, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6789318555729551, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,MB), Customer.Phone),Customer.LastName))", "score": -0.6869844491357071, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of the customers that don't live in MB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))", "score": -0.6976775163548155, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,MB), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))", "score": -0.022701347072143108, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.State),Customer.Address))", "score": -0.47725900245131925, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))", "score": -0.5368757771752859, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Mark),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5621994192874387, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Country),Customer.Address))", "score": -0.5678181572002359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Employee.Address))", "score": -0.5700852617737837, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.State))", "score": -0.5932192549225874, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Invoice.BillingAddress))", "score": -0.5969353065011092, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.FirstName,=,Mark),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.6220578469457647, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Invoice.BillingAddress),Customer.Address))", "score": -0.6234608216327615, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Employee.Address),Customer.Address))", "score": -0.652641586784739, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Mark), Customer.Address),Customer.Address))", "score": -0.6844034239766188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Country))", "score": -0.7071954950806685, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Mark), Customer.Address),Customer.Address))", "score": -0.7449370228569023, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}, {"orig_question": "What are the addresses of the customers with the first name Mark?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.PostalCode),Customer.Address))", "score": -0.7552474064868875, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Mark), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.20843250297184568, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.2354756145941792, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.3674571662413655, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.37786157049413305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.394500277863699, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4049046821164666, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Employee.Country),Employee.Country))", "score": -0.463356021718937, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Employee.Country),Employee.Country))", "score": -0.4891403465735493, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.4903991333412705, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.5161834581958828, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Employee.Country),Customer.Country))", "score": -0.5244691035914002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.5368862337636529, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Employee.Country),Employee.Country))", "score": -0.5410153306293068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.5515122152137337, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5639293453859864, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.021121351388501353, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3743668611768953, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5737284425322287, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6071462972557404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.62730060179274, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingState),Invoice.BillingCity))", "score": -0.6482590305295162, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.649802045361572, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6525395849904995, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6787195983522755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6790893491033785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.692551713776993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6951953330963311, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.702550151254553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7028547938589327, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.7189482318844966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1296390927154615, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.16087509160296729, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16220895468767393, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.18792411971587125, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.19002938174137035, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.20804837131144666, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.21294958275563772, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.21511994736777473, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24346542891872028, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.26484455822792446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.2783190975102891, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.28949253751501164, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,2013-08-02 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.30113400328484663, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name)", "score": -0.31714955293707936, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks ordered prior to 2013-08-02?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,=,2013-08-02 00:00:00), Genre.Name),Genre.Name))", "score": -0.31975007108459286, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceDate,<,2013-08-02 00:00:00), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.20760209494723403, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22619081212211287, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.2309782778006132, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.24077015974557678, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2512594785757991, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26668309743155477, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.269848195750678, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2746771552424067, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.27708596422944126, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.2820028972, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2877081764567709, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.TrackId),Track.UnitPrice)", "score": -0.29271774814622215, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.2935670112006878, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.29710164797367733, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the sum of the unit price in the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3029989019154193, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3404210398558396, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.355687830888054, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35754095286847803, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),getData(Track),Genre.GenreId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36209089636177966, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36512237928996905, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36831580406964465, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37713742729236427, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.381269193846916, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38312231582733997, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3850555651451998, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Iron Maiden),getData(Track),Genre.GenreId,Album.ArtistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38745765008396427, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39029564609052975, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)", "score": -0.3935281584856898, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39387718860662446, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount of money spent on Iron Maiden tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3991172693132493, "correct_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03115367116366817, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.7542374099073629, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8776384874208873, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.Total),Invoice.Total))", "score": -0.9599453982082196, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,None), Invoice.InvoiceId),Invoice.Total)", "score": -1.0297897244478365, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.Total))", "score": -1.03488543098028, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Customer), Invoice.InvoiceId),Invoice.Total)", "score": -1.1867285581151448, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -1.1874280110382789, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.Total),Invoice.Total)", "score": -1.201635828185325, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.Total))", "score": -1.245183081569779, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Customer.Phone),Invoice.Total)", "score": -1.2956278302629316, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Track.TrackId),Invoice.Total)", "score": -1.299085853936027, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.BillingCountry)", "score": -1.329408030509156, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.BillingAddress),Invoice.Total)", "score": -1.3626718212727094, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What's the total sum of all invoices issued?", "inferred_code": "sum(distinct(getData(Invoice), Customer.CustomerId),Invoice.Total)", "score": -1.3815313249436394, "correct_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.01819475577394769, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.44976635413815746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.586005204886409, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Phone),Employee.Phone))", "score": -0.5908409247756273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.5987637613452534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Track.Composer))", "score": -0.6124653325802032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6137413463022289, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6516807649768452, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6529049251712422, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,T2P 2T3), Employee.Phone),Employee.Phone))", "score": -0.6537358735240559, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Phone),Employee.Phone))", "score": -0.6587307159145592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Country),Employee.Phone))", "score": -0.6742594745028327, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.Phone),Employee.Phone))", "score": -0.6810419274340942, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Phone),Customer.Phone))", "score": -0.6916221835134446, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the distinct phone numbers of the employees that have the postal code T2P 2T3?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Track.Composer))", "score": -0.7187654848694365, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T2P 2T3), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.14977614450543666, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2070478728533609, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.20910528621522065, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes),Track.Milliseconds))", "score": -0.22603049718481807, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Milliseconds),Track.Milliseconds))", "score": -0.2447574683376695, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.25578786685540844, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.2791032790808512, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Bytes))", "score": -0.2791184937400667, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.2793477615430677, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.28090851889712876, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.28839385066630213, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.2921415378953867, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.29649122577811254, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.30118760968669434, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Milliseconds),Track.Milliseconds))", "score": -0.3040696403895629, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.10214256453787827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14465545468485289, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.1642141734112368, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.19780843062957423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22652524482196576, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,<=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.2904264997869437, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),Playlist.Name,!=,Robert Johnson), Playlist.Name),Playlist.Name))", "score": -0.29934607911045524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,<=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3087621596787281, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,<=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.31522410255959715, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,!=,Robert Johnson),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3245474748846501, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.3603563428177854, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingCountry))", "score": -0.3676073507108635, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Name,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.40286272260379974, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Robert Johnson),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4131826733888938, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists where the track composer is not Robert Johnson?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Robert Johnson),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Customer.LastName))", "score": -0.423202670067377, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,!=,Robert Johnson), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.1029629635886522, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.18600629300635774, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3051681908567784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.32340417817955125, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.3461992667301292, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(Track),Track.TrackId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3621150755723534, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3711494669616665, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,We Will Rock You),getData(Track),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.38744076383021525, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.39524576008765483, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4083824834318228, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.41514163734335946, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.42661847989176305, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,We Will Rock You),getData(Track),Genre.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.43353992809776076, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,We Will Rock You),getData(Genre),Track.GenreId,Genre.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.451916049763191, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "How long is the track We Will Rock You in milliseconds?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))", "score": -0.4692084792332025, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,We Will Rock You), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.18696881306139826, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.22792266937651812, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.235686549081691, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.23812370342345326, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.23870886192635934, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.24588758312862616, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.25858756943340827, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2607001638404837, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2620440819986693, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.26206586514926145, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.2722451160456045, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.28769437950184473, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2925301424090207, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))", "score": -0.29501714891371705, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "What are the billing states of invoices issued to customers supported by employees born before 1973-07-01 00:00:00 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingState),Invoice.BillingState))", "score": -0.2977986331908846, "correct_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.02555535680403409, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.City))", "score": -0.41027424151798186, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.UnitPrice))", "score": -0.44058141524692473, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.45178960629527865, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5044650523816067, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5710366193584684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.5917673450221628, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6150426868633057, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6367531457235083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.6579160433520883, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.678298402510336, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.Bytes))", "score": -0.6933901649226755, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Customer.City))", "score": -0.6991042606553471, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.Milliseconds))", "score": -0.7027231198062509, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.7304474247808118, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.18856140393535786, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21746112832434192, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.22313120822050744, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23025155309203058, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.23885060370954814, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2395117359966308, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24657279594178952, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24720763991170078, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.25312380957903413, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.28146777920042604, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2874938712005714, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.28874132869322655, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Dark Side Of The Moon),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2915786201765294, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2920909046568648, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of what file type are tracks on the album Arquivo Os Paralamas Do Sucesso?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))", "score": -0.29782514965918816, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Album.Title,=,Arquivo Os Paralamas Do Sucesso),Album.Title,!=,Dark Side Of The Moon), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.11789482278910488, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1508448454664336, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1614808676348997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.16939599190903545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1805707773262975, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.18213414741458797, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.19567907911570867, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.22428092365170071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2271187607276321, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2539843049542452, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26150642410047314, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,K2P 1L7), Genre.Name),Genre.Name))", "score": -0.2859828953108019, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29249666622726705, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,!=,K2P 1L7),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3047900397156188, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that were used for tracks that were sold to an area with a postal code other than K2P 1L7?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,K2P 1L7),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30958205789207405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,K2P 1L7), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.18377839198018833, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.20637780769521605, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.210812433383502, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.2183175977241311, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2350377898130536, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24323252923770847, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25299901244858886, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.25497407735573663, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.255294517446536, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.26119375187324373, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.263450360245259, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2660506188058177, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2687550591731046, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2700523125473805, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2709978975910625, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.03238542345532665, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6118225962792289, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.7169915719131404, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8631914992832067, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.9583680583339124, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0173199528631776, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0794985308653666, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.09939176695454, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Album), Artist.Name),Artist.Name)", "score": -1.150844875794053, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.2183965617754007, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "sum(distinct(getData(Artist), Album.ArtistId),Artist.Name)", "score": -1.2428248416238694, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.2445943368935268, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.2907149184645126, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.31849894317081, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists names are there ?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.3256752961725964, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.008851549649215962, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8270039547297643, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.8390967416912417, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.9833457482353429, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0009974940460906, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -1.0091235522850184, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.0467035981203747, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.066049981000706, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0728076877535404, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.082898257385827, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1778291610322364, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.3053479007033568, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.FirstName),Artist.Name))", "score": -1.3060135355104379, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.3217352297476657, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.3521234441412726, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.State),Employee.State))", "score": -0.13226686136476928, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,Canada), Employee.State),Employee.State))", "score": -0.35110411883943016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.36772007760532915, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Canada), Employee.State),Employee.State))", "score": -0.40033433677308494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Canada), Employee.State),Employee.State))", "score": -0.40399662496201927, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.4113239424931603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.4288590376901168, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Country),Employee.State))", "score": -0.43141158761136467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,Canada),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.4371560724689445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.4426113167233251, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.4435929093737695, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.State),Employee.Address))", "score": -0.46496688292972976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.4806743900610443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,Canada),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.48864401960664094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.Total,=,Canada), Employee.State),Employee.State))", "score": -0.49826646067912816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.04362053852128156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3425489138771809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40260065438130155, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.49461945404033275, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.Country))", "score": -0.5210814579349972, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5321784082603542, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.555781719673071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5933406738930925, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6219689168228797, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6605045698543108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6769813972517843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.6872562669177569, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Country))", "score": -0.688793907962463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.7510383232456661, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7517163228203572, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.1746459832210567, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.21080737241110936, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.21838105465709803, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.25283885312616255, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.26326434977928187, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2951116372674613, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.30574570563536946, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31250703891227544, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3132273875195395, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3276215883768781, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3516126663820987, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.35233301311564097, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.35297533526190644, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3534051132334081, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(MediaType),PlaylistTrack.PlaylistId,MediaType.MediaTypeId), Track.Name),Track.Name))", "score": -0.41467991818521033, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.5681177072401624, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.575608699786244, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.5818864099856, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.5848453931685071, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.5893774025316816, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.5986140959139448, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.607866241800366, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.6216349445458036, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Track.Bytes),Track.Name))", "score": -0.6700282089586835, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Customer.Email),Track.Name))", "score": -0.6775192015047651, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), Invoice.Total),Track.Name))", "score": -0.6867558948870283, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Track.Composer,=,None), InvoiceLine.UnitPrice),Track.Name))", "score": -0.7097767435188871, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Track.Bytes),InvoiceLine.UnitPrice))", "score": -0.7132029153581243, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Track.Name))", "score": -0.7138261862273794, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "what is the population of France", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Customer.Email),InvoiceLine.UnitPrice))", "score": -0.7206939079042058, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.16401672378392365, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds))", "score": -0.23343138463509544, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.23480878756889065, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.24922009813196896, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2557409642154221, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.2600421386933373, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2883113124615162, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2918463724879633, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2961090311422208, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.29633340502761707, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.TrackId),Track.Milliseconds)", "score": -0.3024649742816539, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds)", "score": -0.31136346981609614, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Milliseconds),Track.Milliseconds)", "score": -0.31501827302361735, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.34057669846439753, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "Whats the total length of tracks which are not from the playlists TV Shows or Audiobooks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35034047544767555, "correct_code": "sum(distinct(merge(filter(filter(getData(Playlist),Playlist.Name,!=,TV Shows),Playlist.Name,!=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.12043433693568899, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.13113579159872854, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.13828899712645676, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.1614325827016662, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.1782880725748787, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18082105752135358, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22449150941781934, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22887061786776564, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22969936004311253, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23722417052531447, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.24136957530050224, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24533159187484227, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25950220137110125, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.26218505267676084, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total generated by tracks that appear in the playlist Classical?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27576510225346723, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.07717321121890564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.25284556140886977, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.40781567672092933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.4746964504738571, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Employee.Phone))", "score": -0.498306120352936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.49880694651801605, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Country,=,Belgium),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Phone),Customer.Phone))", "score": -0.5634034705105241, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.5815633466263535, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.6273274352570297, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Track.Composer))", "score": -0.6288842806388857, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Belgium), Customer.Phone),Customer.Phone))", "score": -0.6686822702904465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Playlist.PlaylistId))", "score": -0.671452249007416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.LastName),Customer.Phone))", "score": -0.698872105058399, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Invoice.Total),Customer.Phone))", "score": -0.7138860382401617, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}, {"orig_question": "What are the phone numbers of customers from Belgium?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Employee.Phone),Customer.Phone))", "score": -0.7193473138177069, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Belgium), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.12124120978156866, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.1483417388277189, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.15970355689723978, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.1613455885622096, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.16655447391620357, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.17741194057653037, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.30755493777826787, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId), Album.Title),Album.Title))", "score": -0.32005156766250575, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Genre.GenreId), Album.Title),Album.Title))", "score": -0.34019341131517833, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3592717859002754, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.36994277684207266, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.37456508760894214, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.38274233541351343, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,MediaType.MediaTypeId), Album.Title),Album.Title))", "score": -0.38645497974978327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Artist.ArtistId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.38751889415151547, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.4661895289166129, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Album),Album.AlbumId,Album.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.49640729464305405, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Album),Album.AlbumId,Album.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,SCRIABIN: Vers la flamme), Album.Title),Album.Title))", "score": -0.5001857138601008, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5096926965277516, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5098490662098646, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.513585958240354, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5189189451324128, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5228122068450152, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5259854844508527, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5290345955052179, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Track.Name,=,SCRIABIN: Vers la flamme),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5337799917862351, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Album.AlbumId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5395753403175608, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.TrackId),Track.Name,=,SCRIABIN: Vers la flamme),Track.Name,=,SCRIABIN: Vers la flamme),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5408429446228097, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,SCRIABIN: Vers la flamme),filter(getData(Album),Album.Title,=,SCRIABIN: Vers la flamme),InvoiceLine.TrackId,Track.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Album.Title))", "score": -0.5482533080794283, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many units off the album \"SCRIABIN: Vers la flamme\" were ordered?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,SCRIABIN: Vers la flamme),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5506687431068421, "correct_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,SCRIABIN: Vers la flamme), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.14435998652517, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.14909252071021645, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16899378738080598, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.19269936481522015, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20003306980258984, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2029146784548265, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2254677491985258, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.227751067676447, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22789791207135146, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23763556604687372, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24062128585488474, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2529802357738522, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28458172547143773, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3018860192497115, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3035975599680679, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.17069512733467204, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.17271066866893894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.17849049753665097, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.18093056513226063, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.18334792140261005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.19496610132699463, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2117251496781127, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.22984244934397696, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.24459410361061887, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.24833312035987024, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker), MediaType.Name),MediaType.Name))", "score": -0.24908607816547948, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.257630806129695, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.259613705973897, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.27171380523832617, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media types are the tracks which do not feature the artists Anne-Sophie Mutter, Herbert Von Karajan and Wiener Philharmoniker?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2862162749296005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Anne-Sophie Mutter, Herbert Von Karajan & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.214464545665455, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.21574005424554343, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.26977656188858024, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.2708516775435073, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,H\u00c3\u00a1 Tempos),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.32421086339260163, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3284020428105351, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Genre.Name,=,H\u00c3\u00a1 Tempos),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Bytes),Track.Bytes))", "score": -0.3366680365104801, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3383453475101395, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.35116901185524635, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.TrackId),Track.Bytes)", "score": -0.37150824907795577, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.3750532561498403, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Bytes))", "score": -0.40301854450013247, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Composer,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))", "score": -0.40421411335046287, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.40648100925026925, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes does the track H\u00c3\u00a1 Tempos consist of?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H\u00c3\u00a1 Tempos), Track.UnitPrice),Track.Bytes))", "score": -0.4075561249051963, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,H\u00c3\u00a1 Tempos), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.036402575291504036, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Employee.Country))", "score": -0.2904153965337173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5078402497729257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5116730417252098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5266591479583097, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5401869617326156, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6015128693265224, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6076472964450659, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.6491170130593673, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6612220772931323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Employee.Country),Invoice.BillingCountry))", "score": -0.6653406390378223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6666969858033553, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.7021925219723926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7089682557543711, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.InvoiceDate))", "score": -0.710160752378215, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.43490312194181013, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,=,Drama),InvoiceLine.UnitPrice),Track.Name))", "score": -0.451347829087225, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4585043608788496, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4751537638238703, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4987550027609097, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5102153629789102, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.5223953465589857, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5227942675312012, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5310831380174124, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5338166019159497, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))", "score": -0.545996585496025, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Drama),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.UnitPrice),Track.Name))", "score": -0.5489464237080673, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.InvoiceLineId))", "score": -0.5491734268390223, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,Drama),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5504660048609704, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}, {"orig_question": "Which Drama track has the lowest unit price?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(InvoiceLine),getData(Track),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,Drama),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.5521283995853278, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Drama),Track.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.034647766611669795, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.45357101607987715, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.4743653136483772, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Fax),Employee.Fax))", "score": -0.47775731963943646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.4933998185388191, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.5173799294225319, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Fax),Employee.Fax))", "score": -0.5718123429226112, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.BirthDate))", "score": -0.5759315435952885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Fax),Employee.Fax))", "score": -0.5766922304241872, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Album.Title))", "score": -0.6087688152856572, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.BirthDate),Employee.Fax))", "score": -0.6090781494222028, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.6196206017575605, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.City),Employee.Fax))", "score": -0.6440188094220503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Phone))", "score": -0.6573450510568364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6627720195047004, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.15354747521162063, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1930600723931037, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19849079718662413, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.20679621129176234, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20700989532692646, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2085099964482108, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.20868530915455488, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.209694785247551, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2108712927564671, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21133300527485346, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22239169562527178, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22762257897323437, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2449068071443302, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25078767884710734, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2686122354952544, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30256018721620725, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Customer),Employee.EmployeeId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.304537780235939, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),getData(Customer),Artist.ArtistId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31841655398861457, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3537792034441386, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Customer),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3549880138844231, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3643754492431606, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36555278941092767, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),Employee.EmployeeId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3655843091800159, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.3747742953698928, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.37799647937691666, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),Employee.EmployeeId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.4038621703022901, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Artist.Name,!=,Joe Satriani), Invoice.InvoiceId),Invoice.Total)", "score": -0.40403143112599316, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40773672848379966, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.EmployeeId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.409316693889097, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average of total invoices of tracks not produced by Joe Satriani?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Joe Satriani),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.42083489264265156, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Joe Satriani),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.18741655791685108, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.20376068504027917, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.22590329142651627, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.22880821852690678, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.23334225183949137, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.HireDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2337539704108324, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.23975472818001364, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24898697000849804, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.HireDate,<,1962-02-18 00:00:00),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.25448553385054246, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.2563701330833802, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.InvoiceDate,<,1962-02-18 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2567238465613084, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.HireDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.26467147975860533, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,1962-02-18 00:00:00), Track.TrackId),Track.Bytes)", "score": -0.26776447159039324, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,<,1962-02-18 00:00:00),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Bytes)", "score": -0.2702253285200134, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27935188632254837, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.20304330082842537, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.24361831863019326, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25159948107118696, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2623616929577801, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,S\u00f8nder Boulevard 51),merge(filter(getData(InvoiceLine),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3199908779239062, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3223196422567639, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3227691216273266, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33363382294222277, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.Quantity)", "score": -0.33651559242664564, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,S\u00f8nder Boulevard 51),filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,S\u00f8nder Boulevard 51),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3401539671117367, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34349053420029735, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.34505537154237054, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,S\u00f8nder Boulevard 51),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3496419482959923, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,!=,S\u00f8nder Boulevard 51), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.35477813043741185, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What's the average lenght of all tracks, except for the ones that were billed only to S\u00f8nder Boulevard 51?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,S\u00f8nder Boulevard 51), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.37013333223114675, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,S\u00f8nder Boulevard 51), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.22061446792878828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.28033727945136716, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.28731462797145974, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.2956297603378368, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.CustomerId),Genre.Name,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.30255526799756377, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.304152159758187, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3049245682589555, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.3108704003639408, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3503789919495661, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Genre.Name,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.363875058776065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingAddress,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3646473750745088, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.Title,=,Sales Manager), Employee.Address),Employee.Address))", "score": -0.3700749974584852, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.3854394401238254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.414474814948866, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}, {"orig_question": "Which are the addresses of all employees but the sales manager", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.Title,=,Sales Manager),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.Address),Invoice.BillingAddress))", "score": -0.4166644966708114, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Sales Manager), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.18436484454286534, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.23117983909776055, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.2544434090233942, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.27264404789220026, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.28954171460379363, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.30210069877798557, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3226654841549659, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,>,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.325578312657449, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-11-19 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3258638966563469, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3371241699423284, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.33852429521550265, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,2010-11-19 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3414890680968911, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,2010-11-19 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.346780763065842, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,2010-11-19 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3501486671736457, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks bought after November 19th 2010?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingState,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.3605342912518354, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2010-11-19 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.017520343508386743, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Country))", "score": -0.7492903851535351, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.Total))", "score": -0.7939952994593944, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.8850732395627882, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Playlist.Name))", "score": -0.8857536680032401, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Playlist.PlaylistId))", "score": -0.8860807378522704, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.Phone))", "score": -0.9267008243310865, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.9432813308726027, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.9562497332790847, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.998128600530961, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Invoice.Total),Customer.Phone))", "score": -1.0101452399396371, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -1.0180524673470046, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Invoice.BillingCountry))", "score": -1.0474468016475489, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -1.1068291955152936, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "Are there no customer phone numbers?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Customer.Phone),Customer.Phone))", "score": -1.1339154529272721, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.18663117348847108, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.19037797978262047, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.20881678157650024, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.2090978513779033, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.23334862150250385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24956237606937387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25457662914632057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), MediaType.Name),Invoice.BillingCountry))", "score": -0.2558796902506461, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.Quantity),Invoice.BillingCountry))", "score": -0.2611234206894555, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.26139220755035714, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.26748343104922623, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2719119673480969, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2802577165180567, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.28070928195079303, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there any invoices from countries that order tracks of the media type protected AAC audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.InvoiceDate),Invoice.BillingCountry))", "score": -0.28144151300721587, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.25971741146722405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingCity))", "score": -0.26027467132704696, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),MediaType.Name))", "score": -0.264032126039383, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),Track.Name))", "score": -0.2773924411404345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingPostalCode))", "score": -0.309694369204467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),MediaType.Name))", "score": -0.31257402481967195, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),InvoiceLine.Quantity))", "score": -0.3148283791849423, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3183615430583996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),Genre.Name))", "score": -0.3185733729141792, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3189188029182225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Genre.Name),MediaType.Name))", "score": -0.3291821447082999, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Track.Name),Invoice.BillingCity))", "score": -0.3308726867918503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.GenreId),Genre.Name,=,2009-04-22 00:00:00), Genre.Name),Track.Name))", "score": -0.3425424598093514, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.35433010675646953, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks ordered before 2009-04-22 at 00:00:00 and what genre do they belong to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,2009-04-22 00:00:00),getData(InvoiceLine),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.Quantity),Invoice.BillingCity))", "score": -0.35488736661629244, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<=,2009-04-22 00:00:00),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.20354607748754985, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,=,NV), MediaType.Name),MediaType.Name))", "score": -0.20363586341618586, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.209179018209714, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2114911415157591, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21935095406445734, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,NV),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2337851908235819, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23886146103433595, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,NV), MediaType.Name),MediaType.Name))", "score": -0.24043455990421153, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2554936446980882, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,NV),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.25627177210258323, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,NV), MediaType.Name),MediaType.Name))", "score": -0.26309448314643774, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,NV), MediaType.Name),MediaType.Name))", "score": -0.2703105222289506, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,NV),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28064744382397894, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,NV),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2806801635584168, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which distinct media types belong to tracks sold in NV?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,NV), MediaType.Name),MediaType.Name))", "score": -0.2836304442028654, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NV), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.10161363292389618, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.23490707547482992, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7170312210971234, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Track.TrackId),InvoiceLine.Quantity)", "score": -0.8188920831134211, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.8532604172142534, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.9354626266894246, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), Track.TrackId),InvoiceLine.Quantity)", "score": -0.9521855256643549, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.9865538597651871, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.0139377428149754, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.015890655769907, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -1.0687560692403584, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -1.1472311853659092, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -1.1491840983208408, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Customer.Company)", "score": -1.170234799411879, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.InvoiceLineId)", "score": -1.1756525196375092, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.03796804408921162, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.346856015654339, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Employee.Address))", "score": -0.446310391103907, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Employee.Address),Invoice.BillingAddress))", "score": -0.48886346576182405, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4961645062212483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.49992837283207336, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.BirthDate,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5972356376369135, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6384500429630862, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,!=,AB),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6792159647717011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6802383837421075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Employee.State,!=,AB),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.697020190481626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.Fax,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7052034315784113, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,<,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.712531959557964, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.7332873543855385, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses from states outside AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,!=,AB), Invoice.BillingAddress),Genre.Name))", "score": -0.7370932301637367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,AB), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.15945942409582023, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Milliseconds),Track.Milliseconds))", "score": -0.20684410486959376, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Milliseconds),Track.Milliseconds))", "score": -0.20907196962996102, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.21074013889608795, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Bytes),Track.Milliseconds))", "score": -0.22610406150790452, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Milliseconds),Track.Milliseconds))", "score": -0.2358306452740125, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),Track.Bytes),Track.Milliseconds))", "score": -0.24459253971312994, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Milliseconds))", "score": -0.25455516965930347, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))", "score": -0.2777158564440806, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.30547451394788716, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3172984518848161, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))", "score": -0.31867270629492156, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.33328765835766233, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.33444964816552847, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "How long is the biggest track of Royal Philharmonic Orchestra & Sir Thomas Beecham?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3542367438826411, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Royal Philharmonic Orchestra & Sir Thomas Beecham),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.02680667560897228, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7228065563568999, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8325829581167845, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.8414622492039525, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.842770165428841, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9555647652503013, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0810423623316272, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0848795713786865, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.1373314457574222, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -1.1393532316212083, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "sum(distinct(getData(Album), Artist.Name),Artist.Name)", "score": -1.1520755571973713, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.1614709584295724, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.1771768629962982, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.1842795081903263, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists' name exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.189759144564835, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.031926964410067475, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.645454543459643, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6544154576875368, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6604435863170721, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6612936710358358, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6703486623412892, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6735910029382067, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Genre.GenreId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6771700489580774, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.6825519171661005, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name)", "score": -0.6862250289212906, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.7010298091583382, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.709990723386232, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.7135502183800734, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId),Genre.Name,=,None), Artist.Name),Artist.Name)", "score": -0.7225111326079673, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8044684349009236, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09264811189174321, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.11428062847100298, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.1475186157009884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1477933358431652, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.15967999308795236, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.21041449825522765, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2144695680520745, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22662758276389502, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23357375536515287, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2362960099822971, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29911800286448825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30571017720356586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3217291674667212, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.32729838316609955, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks that are in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.37654522416885106, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.07632490262624313, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.15018339848487797, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.179163573162635, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.23516834755018076, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.26742911633671124, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.2702994228830965, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.27630812687647477, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.32217104316767325, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.330426360990568, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.35460711522789773, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Track.Name))", "score": -0.35490178084416774, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(merge(filter(getData(Genre),Genre.Name,=,Jazz),filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Jazz),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.36059151507931914, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,=,Jazz),Track.Bytes),Album.Title))", "score": -0.3958504103100895, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds,=,Jazz),Track.Bytes),Album.Title))", "score": -0.41622264741542175, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}, {"orig_question": "Which album contains the track with the smallest size of the tracks in the genre Jazz?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Jazz),Track.Bytes),Album.Title))", "score": -0.4212358441547546, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Jazz),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.20693053587456567, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.26489386787815883, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.2890355265142184, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29072631610814315, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.29776339452690603, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.33417656527777495, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.33630939169210844, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3371371448459542, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.33872267595751043, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3394808559789742, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.34337024131756433, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3456921040423326, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.34699885851781154, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Invoice.BillingCity,!=,Warsaw),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.359746015273547, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were ordered to cities except for Warsaw?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,<,Warsaw), MediaType.Name),MediaType.Name))", "score": -0.3704726644280341, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,!=,Warsaw), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1208043695947401, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.12264887865611107, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.13968605409356685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.1780961282813462, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20916524923764682, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2971694935419144, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30482980724779757, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Invoice.BillingCountry),Playlist.Name))", "score": -0.31056066140026606, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.3561715704615016, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Invoice.BillingCountry),Playlist.Name))", "score": -0.3584013410929596, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Invoice.BillingCountry))", "score": -0.36199671065844974, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,7068737),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36936120978604675, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37025370112012657, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3925760524234622, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Employee.LastName))", "score": -0.3950632032107401, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.14737538116320242, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId), Album.Title),Album.Title))", "score": -0.270106405066876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.27645621358527633, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.27851598583117865, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.2813826729517719, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Adrian Leaper & Doreen de Feis), Album.Title),Album.Title))", "score": -0.2834424451976742, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.2985389815822901, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Artist.ArtistId,Track.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29953478753993945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30824976234801155, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.31039920714431324, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3262295928841545, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.32963075728076724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Adrian Leaper & Doreen de Feis),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3334083875937228, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3612149968001838, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3841221229835729, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.30259002009916003, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.32705508927392657, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.BirthDate),Employee.BirthDate))", "score": -0.4329894856600731, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.45376311997461016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.Title),Employee.BirthDate))", "score": -0.4769362435727089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.4782281891493767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.Title),Employee.BirthDate))", "score": -0.5014013127474755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.Address))", "score": -0.5139495805888146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.Address))", "score": -0.5384146497635811, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.State))", "score": -0.5536614731936425, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.Address),Employee.BirthDate))", "score": -0.5608201251416176, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Nancy), Employee.BirthDate),Employee.HireDate))", "score": -0.5741262511401146, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.BirthDate),Employee.State))", "score": -0.578126542368409, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,Nancy), Employee.HireDate),Employee.BirthDate))", "score": -0.5841625855355232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.Address),Employee.BirthDate))", "score": -0.5852851943163841, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.10884416306410755, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.15524151451026677, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.15901620102460265, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2085173950753519, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.2763431133091909, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.29712821894067787, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3172573857918145, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3253304028661545, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3257884665835123, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.34571510502055935, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3519899809832742, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3543982758323185, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3613781293040423, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), Track.TrackId),Track.Milliseconds)", "score": -0.3678681927977464, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the \"Music Videos\" playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Track.Milliseconds),Track.Milliseconds)", "score": -0.39080695157050416, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31956637474195965, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33014329817392357, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.33241671464390393, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.3353817372976821, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34454753277126726, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34908182429331736, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Genre.GenreId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35066318763949894, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.35290754237647215, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.3555496610870326, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aerosmith), Invoice.InvoiceId),Invoice.Total)", "score": -0.35851468374081086, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36285629720461665, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37745803836094993, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),getData(Album),Genre.GenreId,Album.ArtistId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Customer.CustomerId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3790394415534275, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3817435552307961, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum total of all the purchases if we exclude purchases of Aerosmith tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Aerosmith),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.38358903387447757, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Aerosmith),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.37994449262345437, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.39992031621678936, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.BillingCity),Track.Bytes))", "score": -0.41639641848090336, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Employee.State))", "score": -0.4169731112924637, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.BillingState),Track.Bytes))", "score": -0.4308280836164128, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Employee.BirthDate))", "score": -0.45006042446766514, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.InvoiceDate),Track.Bytes))", "score": -0.45674012435025163, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Invoice.Total),Track.Bytes))", "score": -0.4569425641066717, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.State),Track.Bytes))", "score": -0.47365271773014683, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Employee.State))", "score": -0.4837713214365067, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Track.Bytes))", "score": -0.48962255007952593, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Bytes),Track.Bytes))", "score": -0.4993137686394311, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,On-The-Go 1), Employee.State),Employee.State))", "score": -0.5090051228908123, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1), Employee.BirthDate),Employee.BirthDate))", "score": -0.5168586346117081, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "How large is the On-The-Go 1 playlist in terms of bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.UnitPrice),Track.Bytes))", "score": -0.5250041029304731, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.05733131684184337, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.4369947431346766, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5933312685364871, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.6352283862098581, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.City))", "score": -0.6886449505545897, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6926075273061529, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.7817050093434839, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.8374203278912948, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.State))", "score": -0.8791072731074161, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.9091369594053854, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.City),Customer.Company))", "score": -0.9168760248430772, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.939324808930246, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9706129115785257, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.City))", "score": -0.972821719227771, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "Which cities do our customers come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -1.0148918125026913, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.14458573224994742, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.156862207011084, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1655465834555322, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16690813695669146, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17962330743033736, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19194773658710834, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19250786842378073, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19255939795134888, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19371430630379388, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2099960295757676, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.21711141462264127, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22177870295296798, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23209065969739975, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2355731140067072, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices of the tracks that appear in the playlist Music Videos?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.23824799344977313, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.02461094818863785, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.434662123888763, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.4636596298623094, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Invoice),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4643339811379578, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.TrackId),Track.UnitPrice)", "score": -0.4771776630313707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.5079896835822568, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5153671320638785, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5181646998837944, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))", "score": -0.5207743149696041, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5242962650413233, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5284827807301757, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5323186904535838, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5369871895558033, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5411808211410057, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of tracks not composed by Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.5565273972264603, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Claudio Martins/David Lima/Kleber Rodrigues/Livre, Cesare Som), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.13814056903356686, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.1394604542874731, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.35183894872898236, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.3675358319305815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.43776124954456463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.4664142155670561, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.47260525184437485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))", "score": -0.5529333660854148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.Country),Employee.LastName))", "score": -0.5876563662313856, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,!=,Margaret), Employee.Country),Employee.LastName))", "score": -0.5889762514852919, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.Name),Employee.LastName))", "score": -0.6165898264207226, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Track.Name))", "score": -0.6337969842093465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.638887745349658, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.6441746089286472, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees that are not called Margaret?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Margaret),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.LastName))", "score": -0.6572035206324945, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Margaret), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.11749326202388985, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.15184085493954244, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.1740434308313715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.1765478494862569, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17919693840785242, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18008150559643318, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.18199440797844715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.19349506323468396, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.20758065256015984, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Nash Ensemble),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23830501874736731, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.24832370553723446, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2658787365764521, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.26611445390707505, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Nash Ensemble), MediaType.Name),MediaType.Name))", "score": -0.2801110606456258, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums created by artists other than Nash Ensemble?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.288867327995347, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Nash Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.13788007704108005, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.1820505224465705, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.24394591555006379, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Track.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2721934116133799, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2772564423015517, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.27960393146533236, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.2806803982437248, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3102976556415186, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.31146826496067875, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.3311915394645039, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33149298926797244, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.33488577705995876, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Genre),Genre.Name,=,Sci Fi & Fantasy),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.360189919263497, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Name,=,Sci Fi & Fantasy),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.36065988837193974, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the shortest Sci Fi & Fantasy track?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))", "score": -0.36540338545109596, "correct_code": "done(extractValues(min(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Sci Fi & Fantasy),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.City),Customer.City))", "score": -0.4273192808898021, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.State),Customer.City))", "score": -0.43515755280053614, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),Customer.City),Customer.City))", "score": -0.4825220010863464, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,!=,0.99),Customer.State),Customer.City))", "score": -0.49036027299708046, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.City))", "score": -0.4926786368040776, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.49739349962053164, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.City),Customer.City))", "score": -0.507725099288085, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes),Customer.City))", "score": -0.5140382806168576, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),Customer.City),Customer.City))", "score": -0.5192335223554292, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),Customer.State),Customer.City))", "score": -0.5270717942661632, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.City),Customer.City))", "score": -0.5295091325398472, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.5298446111812725, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,Invoice.InvoiceId),Track.Bytes),Customer.City))", "score": -0.5321762023223311, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice),Customer.City))", "score": -0.5338613051933798, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which cities are customers that made a purchase of a track more expensive than 0.99 from?", "inferred_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,<,0.99),Customer.State),Customer.City))", "score": -0.5373475107739828, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.031140623759537776, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.FirstName))", "score": -0.5774666281060832, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -0.7334207635015129, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Country),Customer.FirstName))", "score": -0.755158316707038, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Album.Title))", "score": -0.7580263800161555, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7784926939136096, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.PostalCode))", "score": -0.80074992838647, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.Fax),Customer.FirstName))", "score": -0.8439764512520219, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Employee.FirstName))", "score": -0.9696676505328686, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Customer.FirstName),Customer.FirstName))", "score": -0.969810920524603, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.CustomerId),Customer.FirstName))", "score": -0.9809369307971633, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Customer.FirstName))", "score": -0.9825568067885349, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Fax))", "score": -0.9920506594674963, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.Company))", "score": -0.9942271778690809, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "Are there any customer with first names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Track.Name))", "score": -1.0105484606902781, "correct_code": "isEmpty(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.028575694526807638, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.3747771333722183, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Country),Employee.LastName))", "score": -0.4263432467014354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.4840461660742322, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.49850393742770066, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.Country))", "score": -0.5300242359408003, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Track.Name),Employee.LastName))", "score": -0.5323665624428825, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Track.Name))", "score": -0.557563007921013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.LastName))", "score": -0.5613356136161075, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.FirstName),Employee.LastName))", "score": -0.561814203265385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.5685754707986429, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Playlist.Name),Employee.LastName))", "score": -0.5960697322644438, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Track.Name))", "score": -0.6218045408495527, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Nancy), Employee.LastName),Employee.LastName))", "score": -0.6220257579007011, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees with the first name Nancy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,=,Nancy),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.6363753308852961, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Album.Title,=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,Walking Into Clarksdale), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26435478082801417, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28553724505240763, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3554319206949774, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Album.Title,=,Walking Into Clarksdale),filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.36714190789505974, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.383267854866721, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.38474783573908267, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3850663434328922, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41182234385810373, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,>,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4143825911784431, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41908676704734804, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4202179834069421, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42520599590782593, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4437363083437407, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,Walking Into Clarksdale),InvoiceLine.UnitPrice,>,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4487874011052703, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of tracks of the album Walking Into Clarksdale with a unit price higher than 1.99 that we sold?", "inferred_code": "avg(distinct(merge(filter(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),Track.UnitPrice,!=,Walking Into Clarksdale),merge(filter(getData(Album),Album.Title,!=,Walking Into Clarksdale),getData(Track),Album.AlbumId,Track.TrackId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5512453663454524, "correct_code": "avg(distinct(merge(filter(getData(Album),Album.Title,=,Walking Into Clarksdale),filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1.99),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.13993446831635134, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1416717009820202, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.1445394593527404, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.16318311162103766, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.UnitPrice),Album.Title))", "score": -0.20999680911731725, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))", "score": -0.21546546394176427, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.2579142527116349, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Track.UnitPrice),Album.Title))", "score": -0.269124616436739, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.30789508447712116, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3084674518798513, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Album.Title),Album.Title))", "score": -0.32586720146426973, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3502966443410034, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3514150178514731, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Soundtrack),Album.Title),Album.Title))", "score": -0.36020662033755585, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}, {"orig_question": "Whats the name of the album with the largest track from the genre Soundtrack?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Soundtrack),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.37114105648685286, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Soundtrack),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.008334298297324707, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -0.9255278228169652, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -0.9744488836909995, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1260508344516804, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Artist.Name))", "score": -1.20171769179453, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Customer.FirstName))", "score": -1.2097471263286892, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.3137961280342263, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.Name))", "score": -1.3528451193527133, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3635709262483569, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.3641314902831347, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.383273326221917, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.4289804751247637, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Track.UnitPrice))", "score": -1.4460544212191098, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.4613818383254422, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "are there any albums?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Customer.FirstName),Album.Title))", "score": -1.5005078551919406, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.06709885797863535, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.33654902696584627, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.4209177523425751, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Invoice.BillingCountry))", "score": -0.49381112601076893, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Employee.Country),Customer.Country))", "score": -0.5309268265536957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5627314459280047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Employee.Country))", "score": -0.5716256752184563, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.5763349424160966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5790584992191725, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.LastName),Customer.Country))", "score": -0.5864921837619477, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5952571939251357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.LastName))", "score": -0.6113111033610039, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6350099952556246, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),getData(Customer),Customer.LastName,Customer.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.6481820829754154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Customer.LastName,=,Peeters),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))", "score": -0.6486134917437164, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.008933274145524939, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8005281712335228, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.8461600773307073, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.9878913125534793, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0091405109228708, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0403014136030944, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -1.0554172036425653, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.068141586521325, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.0715499478145638, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1844224571155526, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.2498255571341013, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.310854644866783, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.3141626311654886, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.FirstName),Artist.Name))", "score": -1.319284357111793, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.3753579878293054, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.24146586148245108, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25476292419350477, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.2578962931601648, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2621266449045593, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.26936376746164725, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.26981303881252955, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.27434593035612387, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Address,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.275815762261199, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.28053032937064243, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.28462229359328295, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.29801824550727307, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.3026523914348676, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.30716267002367287, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.3105609376192166, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.31282750028802647, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.2301044520428586, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.30131294181033574, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.3441872863994708, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.34997030890696296, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.3515217061328818, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.3606578489530585, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer),Artist.Name))", "score": -0.36393779854651304, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.36447044023293795, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(filter(getData(Track),Track.Composer,=,Jesse Fuller),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.3780270048661351, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.Bytes),Artist.Name))", "score": -0.38747978122407356, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes),Artist.Name))", "score": -0.38991423911878637, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(Invoice),Track.Composer,=,Jesse Fuller),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.4035321935421936, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Customer.CustomerId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.4036461370205276, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))", "score": -0.4075467405855093, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}, {"orig_question": "Which artist has the cheapest track composed by Jesse Fuller?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Customer.CustomerId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.Milliseconds),Artist.Name))", "score": -0.41084138658468794, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,=,Jesse Fuller),Track.UnitPrice),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Callahan),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.23622824319805216, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.24415260200945865, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.25015959888397277, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2526288439355749, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Country,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.25774181350582903, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.257768320425724, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,!=,Callahan),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.25862002578667637, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.25944150132779087, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2642517428327804, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.State,!=,Callahan),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2676654729637757, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.State,!=,Callahan), Track.TrackId),Track.Milliseconds)", "score": -0.2708557342346413, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2738020483893219, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,!=,Callahan),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2745742098360907, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,!=,Callahan),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2863261426550505, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by employees other than Callahan?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,Callahan),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2950344020136892, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,!=,Callahan), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.2379748358564608, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2605425580670352, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.26392932940548425, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2860884841676618, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,J. Kay/Jay Kay),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2944361996931679, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3102917195036102, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Playlist.Name,=,1),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3199821257937946, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3206027936517946, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3210027845032376, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3267189067371274, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.33211783708607423, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))", "score": -0.3366504472746638, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,J. Kay/Jay Kay),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.3432894382475895, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name)", "score": -0.3762634001414072, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}, {"orig_question": "Of how many different genre are tracks composed by J. Kay/Jay Kay?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name)", "score": -0.37669058484745876, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1),Track.Composer,=,J. Kay/Jay Kay), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))", "score": -0.25220095396070974, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.3583686246336559, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),Album.Title))", "score": -0.36093894856304554, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Milliseconds,>,322063), Album.Title),Album.Title))", "score": -0.3860535330289543, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,>,322063), Album.Title),Album.Title))", "score": -0.3911180356117062, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Milliseconds,>,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.39319003061863717, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.UnitPrice),InvoiceLine.UnitPrice))", "score": -0.395528361061966, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Track.UnitPrice))", "score": -0.39635301422413727, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Invoice.BillingAddress,>,322063), InvoiceLine.UnitPrice),Album.Title))", "score": -0.3982545332013891, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.UnitPrice),Album.Title))", "score": -0.39892333815352693, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Album.Title))", "score": -0.39975425321395514, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,>,322063), Album.Title),Album.Title))", "score": -0.40394095680053815, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4042576118946816, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,322063),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.UnitPrice),Track.UnitPrice))", "score": -0.4085855880166703, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "how many different prices per unit does it have when the track is bigger than 322063 milliseconds?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,322063),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.UnitPrice),Album.Title))", "score": -0.4090575552736981, "correct_code": "count(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,322063), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.09301809039303033, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.14244318585988827, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.1447119580471234, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Milliseconds),Album.Title))", "score": -0.16801443449320203, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Milliseconds),Album.Title))", "score": -0.20739431103378078, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.29072702139784656, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.UnitPrice),Album.Title))", "score": -0.3139484722719622, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.33239147656039375, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3398466137373476, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.UnitPrice),Album.Title))", "score": -0.34236676679837325, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3772593378391986, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.3780171110655481, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Bossa Nova),Track.Bytes),Album.Title))", "score": -0.4198634132586203, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.UnitPrice),Album.Title))", "score": -0.4444978049359627, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album is the longest track of the genre Bossa Nova ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,=,Bossa Nova),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))", "score": -0.4547393002602336, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Bossa Nova),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.026509089972023503, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.402090706562376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4054089447202604, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4766404749924006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.489425106848071, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5116272187445999, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5187098847682082, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5697455737837613, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.Total), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5766629177998184, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5780590133454098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5901171519055115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Customer.LastName),Invoice.BillingCountry))", "score": -0.6549534478728622, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,10.91), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.695263441064526, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.Total))", "score": -0.7026335637729062, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "which countries have invoices with a total of at least 10.91?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.7034668262294872, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,10.91), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09450076265301367, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.13291555719186965, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.160709471785794, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.16925262078646613, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.17293065708195018, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.17956230817263066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.18475454185202242, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20199361662124696, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20296484528516504, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.21912087571135203, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.24714493183168465, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2545344152398487, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2664202369979467, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2971830370506943, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there no media types that are used by tracks in the playlist with the name Grunge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3097150542891889, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.16326027649847674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.1657025172135036, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.26977628223615713, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.4855531911125581, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.487995431827585, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5721041421165864, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5745463828316133, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.59309834528176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.5955405859967868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6046615103950899, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6071037511101167, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Employee.Fax),Customer.Fax))", "score": -0.6143606114892464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Employee.Fax),Customer.Fax))", "score": -0.6168028522042732, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Lisbon), Customer.Fax),Album.Title))", "score": -0.6812476246377628, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Album.Title))", "score": -0.6836898653527896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.225465313851961, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.25866658473942156, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.26548114685635715, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2659061088679585, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2672515981309544, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.28101990905967567, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)", "score": -0.2900370278830406, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3167461607664053, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3169288892063681, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.32387034559354977, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.3253300905927496, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3305228419331158, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.3325048902522741, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),Track.UnitPrice)", "score": -0.33915684040175514, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks in an album that was not composed by \"Barry Wordsworth & BBC Concert Orchestra\" ?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.35173880986824363, "correct_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Barry Wordsworth & BBC Concert Orchestra),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39760780336777723, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.39973437920700305, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.42087761673103163, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4387880906518999, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.44956006430703643, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4524216340488154, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.Country,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.45719137851013897, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4586308726676294, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4632111894778102, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4641889085441816, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,AZ),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4651571481523236, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4686035516788893, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Customer),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.47033214079163255, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),InvoiceLine.UnitPrice,!=,AZ), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4706577139442794, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}, {"orig_question": "How many times per invoice has the cheapest track been ordered by customers not from Arizona?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Customer),Artist.Name,!=,AZ),merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4765830219984426, "correct_code": "done(extractValues(min(merge(filter(getData(Customer),Customer.State,!=,AZ),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),InvoiceLine.UnitPrice),InvoiceLine.Quantity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.18983170763400373, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.20044726154815778, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.20432810063166912, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.22747069743650736, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.23271315171339216, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.24052159510857257, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.24529972502157554, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.24663368603740995, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2627669495862138, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2829524005262533, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.28814272239823063, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.29174471424086973, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.29248141206497885, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2925734577174231, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2959511657934111, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))", "score": -0.19985637117133592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Email))", "score": -0.2527163257072971, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Title))", "score": -0.25438568044410204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Title))", "score": -0.3072456349800632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Address),Employee.Email))", "score": -0.3625112404297397, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Email))", "score": -0.388202988095145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Address),Employee.Title))", "score": -0.4170405497025058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.4427322973679111, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Genre.Name))", "score": -0.5116253300354413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.State),Employee.Email))", "score": -0.5124008287857578, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.FirstName),Employee.Email))", "score": -0.5303474296997592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Email))", "score": -0.5394141560110917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Genre.Name))", "score": -0.544908637074646, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.State),Employee.Title))", "score": -0.5669301380585239, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}, {"orig_question": "What's the e-mail address of the employee, whose last name is Callahan?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Callahan),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Email))", "score": -0.5726975339325641, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Milliseconds))", "score": -0.07671559838956754, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.41511788803109084, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.4396491857386565, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.45339495861121104, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.45383889868367044, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.46758467155622496, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.509494450247123, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5203903506020143, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,InvoiceLine.InvoiceId),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))", "score": -0.5232402076141814, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5355304665563396, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5380060297541592, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5687909738711392, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5712666345320768, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,InvoiceLine.InvoiceId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5794956981049548, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "For how many milliseconds does the track Respectable run?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Respectable),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Milliseconds))", "score": -0.5804935875292728, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Respectable), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,2013-01-15 00:00:00),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24349363765581203, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2669828126491664, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.2860950528810085, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.29578562366428557, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3033310626427852, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.31489786389612767, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,1.99),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3241968115875246, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3285851624566539, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99),filter(getData(Track),Track.UnitPrice,!=,2013-01-15 00:00:00),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33984390105619744, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.34769740268849597, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3806567914631702, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.38946125399471926, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.39707152697226494, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4058759978684527, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,!=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.410651400036235, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.022504119395307498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.4293577847504642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5296249942078997, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5458758316995785, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.5610159898242273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.5616367110215944, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Title))", "score": -0.5684345739027776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingPostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.5772058034381189, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Invoice.BillingAddress))", "score": -0.5897789375922002, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Title),Employee.Address))", "score": -0.6198070332939096, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.6280134215371395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.Address),Employee.Address))", "score": -0.630750079567863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.6461430404301939, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.650120761438302, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Invoice.BillingAddress))", "score": -0.6619039204790299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.23261788344730888, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.23442534898168557, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2361670177035182, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.24091876632515993, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2499073260240017, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2599408778051584, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2691412871287463, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.27824735509300597, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2794196196424469, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.28105616909237924, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.28165562616611756, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,Track.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2840056442848946, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.TrackId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner), Track.TrackId),Track.Milliseconds)", "score": -0.2890301394510546, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Album),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Milliseconds)", "score": -0.29082089395871874, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average tack length of all tracks that are on albums of Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)", "score": -0.2935787340361546, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Academy of St. Martin in the Fields Chamber Ensemble & Sir Neville Marriner),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14109283847810805, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.14753662091840344, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15407485123851813, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.16329792210601235, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1660354711211736, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17602840291193753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.18118185272066634, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.18257978088694066, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.1904635107964048, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.21135424086470184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.23935816500422682, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Genre.Name),Genre.Name))", "score": -0.24566433152852118, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2568635475990561, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2661452056747946, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are not represented in the Playlist named 90\u00e2\u0080\u0099s Music?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3149003443031692, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.0871250625277753, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.2709711897696252, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Track.Name))", "score": -0.4126330773748886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.49505127978957886, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5120387364505944, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),getData(Invoice),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.5279871200565072, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,1016),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Customer.CustomerId),Invoice.InvoiceId,Customer.CustomerId), Customer.Email),Track.Name))", "score": -0.5285969446739656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5394565812503747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5434824062902378, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(InvoiceLine),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5497266963977463, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5544485987866834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.5575217008600547, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Album.Title))", "score": -0.5671047377909417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Track.Name))", "score": -0.5684878933565003, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Track.Bytes))", "score": -0.5701508331621881, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.13767595874062452, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23176940100187857, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.25615442947378675, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.2607573810123394, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.2869338569059453, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.30748577594523, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.31856139704378106, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.32835623361895766, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.3319113002101841, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),InvoiceLine.TrackId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3344173166067546, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34074951310536633, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Artist),InvoiceLine.TrackId,Invoice.InvoiceId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34173813453474655, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,1.99),getData(Artist),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.34807031320896, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.3494659738614967, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks that cost less than 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice,<,1.99), Artist.Name),Artist.Name))", "score": -0.3639603687888195, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,<,1.99),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.17106291418764974, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.17179785195571598, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.17671450784482481, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.20457513517731496, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2510381676824708, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2721115546448372, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.27922160986697203, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28374681190310824, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.29290956309363736, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.29757627953084903, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Bytes)", "score": -0.30392628930635673, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.30623417016336096, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.33816065762423725, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,PlaylistTrack.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3390658357475158, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u2019s Music),merge(getData(Track),getData(Playlist),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34570513912752715, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2082985661321108, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2678932214847637, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2730226139998781, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28737088993534415, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2882692271259829, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.29595457831854594, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.30857431555400433, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.30908125265953107, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3115616542226454, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31817891831725104, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),MediaType.Name))", "score": -0.32386523121917327, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.32783108402224725, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.33451999317903097, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3384148881489569, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),Track.Name))", "score": -0.3459051183730137, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.01968311649733847, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7206655915766975, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.74281415308575, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.905245887431814, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.9280166687312248, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -0.9352689669888081, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -1.0311054901972043, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Employee), Artist.Name),Artist.Name))", "score": -1.0467436721430965, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.0603486094742058, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.0635296854576028, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.0733363367954154, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -1.1008323087622167, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.City))", "score": -1.1076835624604857, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1328753616820186, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artist names exist?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.1513613211289486, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.22375377312052094, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24869983760472822, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25994424353563006, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26039573276985, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26277326103347726, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Quiet Songs), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2645811738809105, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26984318903183874, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27507526624454764, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27587494101405147, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2794846299623127, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Quiet Songs),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2810249031607619, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2866751905611391, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2935580609445029, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29787935839718627, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To how many countries were tracks from the Quiet Songs album sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,Quiet Songs),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.29867859082927467, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,Quiet Songs),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.10716353655017027, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.14275446395387198, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.15230690666391405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.18041058688217687, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.22138287124344133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.26582123306836425, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.29919323819018373, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.BillingAddress,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.33089675447397665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.33508610470899547, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.3436316000151066, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.349599470438223, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,382981), Playlist.Name),Playlist.Name))", "score": -0.37952446653391836, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,>=,382981),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.38197580959638594, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Invoice.BillingAddress,>=,382981),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.39342736549716106, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks that are at least 382981 milliseconds?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,382981),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.LastName))", "score": -0.3965786230117871, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,382981), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.04905006993431016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.3097355063619034, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.39510509330648347, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,2003-05-03 00:00:00),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.4327371051630631, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.46292646043770125, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.4943030677030735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5146141071031274, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.540268597117445, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.541441470222264, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Customer.FirstName))", "score": -0.5480782995546178, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5705797370137589, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.5725903748480099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.FirstName),Employee.FirstName))", "score": -0.5728180680735849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.61546680290121, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.6162398467386083, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.13958764064416548, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.14080145934147997, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.1622934191274183, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.22181705000261737, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.24101386611786926, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2552575426192766, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2552698881945199, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2673561684743763, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2869613353997228, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.29437509850803306, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3049289650594329, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3116639589042725, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3130291583057134, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,<,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32451485007411673, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks cheaper than or costing as much as 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,null,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3371905507268918, "correct_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22088091149274564, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28449719376847693, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2917680494974945, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3143086967311756, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3195795630298805, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3228502318008714, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.33324196019721297, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.33460274594621503, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3351292028329311, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34824267032804007, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3517439465159558, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36670161232443316, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3723038733058461, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37357059097938594, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(filter(getData(Track),Track.Composer,>=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3795020921272977, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.13781024676099438, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Name))", "score": -0.17274960944546486, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Name))", "score": -0.23496023429296764, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Bytes))", "score": -0.23693746999817406, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.2657603198491499, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Bytes),Track.Bytes))", "score": -0.2718768326826445, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))", "score": -0.31839820413398007, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Name))", "score": -0.323855993476595, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.UnitPrice),Track.Name))", "score": -0.32926824081954154, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Name))", "score": -0.34021016641876867, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.34942311745111254, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Album.Title),Track.Name))", "score": -0.35140569447739783, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.UnitPrice))", "score": -0.36422352243308764, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Bytes))", "score": -0.3648875430863296, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),getData(Track),Album.AlbumId,Track.AlbumId), Track.UnitPrice),Track.Name))", "score": -0.3720062715571494, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.02229024600331735, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.6710155582239224, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.7942618991831863, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7980760562399205, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.LastName))", "score": -0.8188555736986137, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Track.Name))", "score": -0.8232591714924954, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -0.8386233230441674, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Country))", "score": -0.9083378311137846, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Email))", "score": -0.924843845638272, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.9389193390613263, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.9928079452662186, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -1.0150341690885667, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Fax))", "score": -1.0945897026425824, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Playlist.PlaylistId))", "score": -1.1759374923639627, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the different last names of the customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Invoice.BillingCountry))", "score": -1.1937131031501216, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.State))", "score": -0.31388702940597035, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.State))", "score": -0.3992512840850395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.State))", "score": -0.43545083198843304, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.Country))", "score": -0.44779616781306686, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Country),Customer.State))", "score": -0.46601105668378295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.49646533536183585, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Country),Customer.Country))", "score": -0.5145559404118103, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.City))", "score": -0.577338763278881, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.State),Customer.City))", "score": -0.5852136630637688, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.State))", "score": -0.6099810230087328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Joakim), Customer.State),Customer.State))", "score": -0.6100094374342007, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Country))", "score": -0.6180291379442985, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Company),Customer.State))", "score": -0.6197165940029663, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Fax),Customer.State))", "score": -0.6365929935200256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}, {"orig_question": "Where does our customer Joakim come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Joakim), Customer.Country),Customer.City))", "score": -0.6519734356625122, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Joakim), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.13759762972262835, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.22176750768157186, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23072731968517868, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2350107210022274, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.2600783934391416, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2784993203101381, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2810209308379303, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.28349594230439756, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2925466246256533, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.29691945260965086, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.29697199472565056, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3171377947249647, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3201099275991257, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Customer),Invoice.BillingCountry,=,Norway),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32050780504250526, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.3366265979517697, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.State))", "score": -0.1375983968609944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Spain), Customer.State),Customer.State))", "score": -0.21695435198489577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Spain), Customer.State),Customer.State))", "score": -0.24299794586841017, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,Spain), Customer.State),Customer.State))", "score": -0.4377084985608235, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.State))", "score": -0.5262913448823383, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,Spain), Customer.State),Customer.State))", "score": -0.5417741552228108, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.Total,!=,Spain), Customer.State),Customer.State))", "score": -0.5561525240773335, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,Spain), Customer.State),Customer.State))", "score": -0.5674277559155598, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Spain), Customer.State),Customer.State))", "score": -0.5768468646419933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.BirthDate,!=,Spain), Customer.State),Customer.State))", "score": -0.59142381104175, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Spain), Customer.State),Customer.State))", "score": -0.5919576898450032, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,Spain), Customer.State),Customer.State))", "score": -0.5994375959271565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.State),Customer.Country))", "score": -0.6224082816625014, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Spain), Customer.Country),Customer.State))", "score": -0.6298874496715143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Which states do customers that are not in Spain come from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Spain), Customer.State),Customer.State))", "score": -0.6377377012831857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Spain), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.10363247312425321, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.12444989457824686, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.14158392402039593, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.1592906175592571, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.17613657331274724, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.21767049515161924, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2396362208010381, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.25919126670325127, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26252820784807407, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2644816307268899, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2748874861632277, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Rock And Roll), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2817781464208007, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.28671933024525015, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.30099586530972466, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the summed quantity of invoices of tracks in the genre \"Rock And Roll\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Rock And Roll), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.3016259291839944, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.07152567354933126, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27187504701450227, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3374656496336565, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.34247779792089517, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.34444664953853593, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35748642033635064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.37835026251761494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3949969486901181, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3973914058660739, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4087869734188274, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.41785663726561917, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4533948911656561, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4621670265025305, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4804969022883577, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "Find the invoice dates having the BillingPostalCode of H2G 1A7.", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate)", "score": -0.5481063769530096, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,H2G 1A7), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.FirstName),Employee.FirstName))", "score": -0.22151488606582417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.LastName),Employee.FirstName))", "score": -0.2848500814618089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.3170853152041673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Country),Employee.FirstName))", "score": -0.3696997014018288, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.Country),Employee.FirstName))", "score": -0.4429288401370286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))", "score": -0.44835696195959557, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.4841761872828759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Employee.FirstName),Employee.FirstName))", "score": -0.5163618658428666, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.PlaylistId), Employee.FirstName),Employee.FirstName))", "score": -0.5366544002683635, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Employee.FirstName),Employee.FirstName))", "score": -0.54959735742069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5750097120584533, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Customer),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.FirstName))", "score": -0.586771938789823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.LastName),Employee.FirstName))", "score": -0.5873578234677552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,PlaylistTrack.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.5953022464839502, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct employees first names with last name mitchell?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.LastName,=,Mitchell),getData(Employee),Employee.EmployeeId,Customer.SupportRepId), Employee.FirstName),Employee.FirstName))", "score": -0.6018728151021169, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Mitchell), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18960010846511527, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19485599002997325, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1973185792406689, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.20311088717219364, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21091197626972957, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2129809881626938, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21608307579436561, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22266743235343606, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2229658556949019, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22453377194169197, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.22621309344762444, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22660481109359998, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.22742713206574952, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical), Invoice.InvoiceId),Invoice.Total)", "score": -0.23387501863695448, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on a purchase of tracks from the playlist Classical?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23419094754855052, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.15429223843127743, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.16999409007645622, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.19177668220821514, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.19716107984531656, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.20251646690778496, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.23628944729875692, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.25787293552334467, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Track),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.27720126422416735, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.28130455268938803, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.2831659176337219, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2905428082870093, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3012825458423253, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3130923538129624, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)", "score": -0.3134235851257392, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks that are in a playlist other than Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Deep Cuts),merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.32118497569369436, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Deep Cuts), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.15509977505264622, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1687640294678234, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18204995188172032, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1980736098519475, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2715126061962664, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.28454431354601173, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.2872108017319776, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.29251827731733554, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.2942674470535999, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)), Invoice.InvoiceId),Invoice.Total)", "score": -0.29562528558720846, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2994400406005311, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Artist.ArtistId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3049889430667554, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31852634345628617, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Invoice.BillingCity,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3274658468873207, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total of all invoices that were issued for the tracks of the album Hot Rocks, 1964-1971 (Disc 1)?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3284850755776209, "correct_code": "sum(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Hot Rocks, 1964-1971 (Disc 1)),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.054857767737650644, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.4862716731255167, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.4981127107166347, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -0.8592183839976232, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -0.9689856423009892, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.1681345818106939, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.UnitPrice)", "score": -1.2435695542762988, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2873123253727605, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.304667640522513, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.Bytes)", "score": -1.3115602811265443, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.327240765294425, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.332759719024536, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3451257940894559, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.3653551628602045, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.391605237979313, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.020495284778007772, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.5138439917573123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.5570442759999423, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.HireDate),Employee.Country))", "score": -0.597379891165474, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Customer.Country))", "score": -0.606219398752728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.6241786499376758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Customer.Country),Employee.Country))", "score": -0.6259954850756912, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.6686307950767514, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.HireDate))", "score": -0.7006298182168393, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Address),Employee.Country))", "score": -0.7025955598437577, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.State),Employee.Country))", "score": -0.7280059735858231, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 467-8772), Employee.Country),Employee.Country))", "score": -0.736720451117435, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.LastName))", "score": -0.7418097136178403, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.State))", "score": -0.7511933920541196, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}, {"orig_question": "What country is the employee with fax number +1 (403) 467-8772 from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Invoice.BillingCountry),Employee.Country))", "score": -0.7620631735408097, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 467-8772), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.09067268446878701, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.147799339141784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24919396858852735, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.258351461393564, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2956695033696581, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3044169891697429, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,>=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3097776203992759, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3194410938121878, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35370939967081627, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.36451718478361406, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38739696932562556, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40571584536373023, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40692966400912894, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,696 Osborne Street),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4148733381687669, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What are the cities associated to billing addresses different from 696 Osborne Street?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.41887741648271437, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,696 Osborne Street), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)", "score": -0.16625490391950257, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1671578382999328, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18406533942708583, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1874490414700475, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Skank),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18779088058254342, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1893985722417246, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19503467605700078, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20449323500711944, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20988404696181764, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22083579816343007, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2218736541970564, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22683949226462843, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22877211269251516, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2527530054478459, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of orders for tracks by artists other than Skank?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Skank),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26210728664217936, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Skank), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.021309020490355594, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.5888690903628129, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.7303948244188302, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7688943813382, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8696138398843025, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8858981028891991, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.8994983488347055, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCity),Artist.Name))", "score": -0.9070838315976247, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.9289959161930103, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Artist.Name),Album.Title))", "score": -0.9411648858869811, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.9563011361213739, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9608592507083922, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Customer.PostalCode,Album.ArtistId), Artist.Name),Artist.Name))", "score": -0.9615435735469012, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.9692884711405754, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists do we have in the database?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Genre.Name,=,None),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId), Album.Title),Artist.Name))", "score": -0.9713946750997847, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.11260276524797118, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.13952102942028455, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.16742005748714375, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.17726278309783722, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.20375342773991076, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.21794508006707405, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2621352843578132, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2624206942822082, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.2708581240852462, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2729818914293638, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2841382654281858, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30073768242060317, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30623801381727256, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,!=,Music Videos), MediaType.Name),MediaType.Name))", "score": -0.32598719122478836, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What type are the media files in playlists other than Music Videos?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(getData(PlaylistTrack),getData(MediaType),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3370415359455797, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Music Videos),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.11349817515605291, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.4709355430640469, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Employee.City),Artist.Name)", "score": -0.5837284342895452, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -0.6034674227948462, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Album.ArtistId),Artist.Name)", "score": -0.6786038303650013, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.City),Artist.Name))", "score": -0.6905554757381407, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7168802486020048, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -0.7999045654745105, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.867925707615171, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Album.AlbumId),Artist.Name)", "score": -0.8879803547348444, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9057644346332456, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.ArtistId),Artist.Name)", "score": -0.916927746401185, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -0.9451084980657641, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.City),Artist.Name))", "score": -0.9451308525014805, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Employee.City)", "score": -0.9549767996150165, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.10082383534769558, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.28233224938594503, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(getData(Track),Genre.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.4229272604538825, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.5141919222005527, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5258491109222826, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),MediaType.Name,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.5308353569635074, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5857208688362431, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(getData(Track), Track.Milliseconds),Track.Milliseconds))", "score": -0.6126602870300858, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.LastName,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.6255417730935733, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.BillingCountry,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.633233484280936, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.675119144691066, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Invoice.BillingCountry,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.6796850588513048, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,None), Track.Milliseconds),Track.Milliseconds))", "score": -0.7266024019845645, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,None), Track.Milliseconds),Track.Milliseconds)", "score": -0.7342637481796948, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all the tracks in our database?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Genre.Name,=,None), Track.Bytes),Track.Milliseconds))", "score": -0.7528579802528839, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.State),Customer.State))", "score": -0.18295581599886646, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.2159456755798601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,Riotur), Customer.State),Customer.State))", "score": -0.31230705937559833, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,Riotur), Customer.State),Customer.State))", "score": -0.35747563800032367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Riotur), Customer.State),Customer.State))", "score": -0.3608150180261873, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Riotur), Customer.State),Customer.State))", "score": -0.40259233078177203, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,Riotur), Customer.State),Customer.State))", "score": -0.4145712550562166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Riotur), Customer.State),Customer.State))", "score": -0.4183726008814119, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.44750669559653034, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Riotur), Customer.State),Customer.State))", "score": -0.5891717370432161, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Riotur), Customer.Country),Customer.State))", "score": -0.5973668937404, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.Country),Customer.State))", "score": -0.6303567533213936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Riotur), Customer.State),Customer.State))", "score": -0.6351643994748883, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Riotur), Customer.State),Customer.State))", "score": -0.6493119891565584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,Riotur), Customer.State),Customer.State))", "score": -0.65335819412212, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.20345571852158173, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.2235937438053952, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Employee.FirstName),Customer.FirstName))", "score": -0.30029352224300965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Employee.FirstName),Customer.FirstName))", "score": -0.3204315475268231, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.4545673544598685, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.474705379743682, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.PostalCode),Customer.FirstName))", "score": -0.528689714436041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.PostalCode),Customer.FirstName))", "score": -0.5488277397198544, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Employee.FirstName),Employee.FirstName))", "score": -0.5514051581812964, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Employee.FirstName),Employee.FirstName))", "score": -0.5715431834651099, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.PostalCode))", "score": -0.6051204617215262, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.6139946419825719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Country),Customer.FirstName))", "score": -0.6209274849934445, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,VV), Customer.FirstName),Customer.PostalCode))", "score": -0.6252584870053397, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,>,VV), Customer.FirstName),Customer.FirstName))", "score": -0.6264081320805417, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26846801306138884, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28151009708372116, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.31436363708685283, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3180006177145685, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.322634503866037, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Invoice),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32789574869110005, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33178290693015494, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Playlist),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3329903391451704, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.33681622628890256, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34233464471286207, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34265570642233545, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Grunge), Invoice.InvoiceId),Invoice.Total)", "score": -0.357557984059147, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.3793550460719535, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.39300177095240413, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent by our customers on tracks from the Grunge playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.40299030967283, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3105831852564145, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Customer.Company))", "score": -0.31654023735346687, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.32947723949941693, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Customer.Company),InvoiceLine.Quantity))", "score": -0.34840033699664946, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Customer.Company),Customer.Company))", "score": -0.3543573890937019, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Invoice.BillingCountry))", "score": -0.36554306280397586, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.Quantity))", "score": -0.3764393766773381, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Customer.LastName))", "score": -0.387021098725846, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Denmark),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Phone),InvoiceLine.Quantity))", "score": -0.3870983685580917, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3928347205543003, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,ON),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),InvoiceLine.Quantity))", "score": -0.3947933707625812, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), Invoice.InvoiceDate),Customer.Company))", "score": -0.39879177265135274, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Denmark), InvoiceLine.Quantity),Invoice.Total))", "score": -0.39910602918499716, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.43543203595207575, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}, {"orig_question": "Is there a customer from Denmark that has a billing address in Ontario?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,ON), InvoiceLine.Quantity),Customer.Company))", "score": -0.4637117971407834, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,ON),Customer.Country,=,Denmark), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.051393820242083166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.22717685093084583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.State),Customer.City))", "score": -0.4395538031021715, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Employee.City))", "score": -0.5613445125418366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,FL), Customer.City),Customer.City))", "score": -0.5810028941268683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.BirthDate),Customer.City))", "score": -0.5960066079060198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.6142958163181902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Fax),Customer.City))", "score": -0.6420570968548418, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.6434889661980672, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.State))", "score": -0.6758610688048066, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.6957778758132719, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.7127550004879595, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.Company))", "score": -0.727508374293393, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Employee.City))", "score": -0.7371275432305993, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.HireDate),Customer.City))", "score": -0.7476239561001421, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),MediaType.Name))", "score": -0.20057833378814394, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))", "score": -0.20956964229844743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Customer.Company))", "score": -0.37792808746598894, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Customer.Company))", "score": -0.38691939597629244, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,3.96), MediaType.Name),MediaType.Name))", "score": -0.42893088793061906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), Track.Name),MediaType.Name))", "score": -0.5139606082593673, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Customer.LastName))", "score": -0.5152120534112328, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), Track.Name),MediaType.Name))", "score": -0.5229519167696708, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Customer.LastName))", "score": -0.5242033619215363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,3.96), MediaType.Name),MediaType.Name))", "score": -0.5295566273634904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),Invoice.BillingCountry))", "score": -0.5335809532334679, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,3.96), MediaType.Name),InvoiceLine.Quantity))", "score": -0.5353095773389214, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,3.96), MediaType.Name),MediaType.Name))", "score": -0.5385479358737939, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),Invoice.BillingCountry))", "score": -0.5425722617437714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media type name is cheaper than the invoice total of 3.96?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,3.96), MediaType.Name),InvoiceLine.Quantity))", "score": -0.5443008858492249, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,3.96), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14871483315683914, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.22391350470877028, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24578791764735064, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24770268923380578, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25295523048535457, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2647626754317265, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2845949229232115, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.285806530702898, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.2911479800642635, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Album),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29717876506888447, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.30701165628880245, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3116320435325603, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3187714998462175, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,=,LOST, Season 4),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.32194122510623796, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To how many different addresses were tracks from the album LOST, Season 4 sold to?", "inferred_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4),Track.Name,=,LOST, Season 4),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3234498198588813, "correct_code": "count(extractValues(distinct(filter(merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Album.Title,=,LOST, Season 4), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28610783942198387, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3204468411836039, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32300540065586036, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3440081069460466, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34667857894454085, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3482068384542276, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3524837338353841, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35468102285005004, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35483213347868753, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Playlist.PlaylistId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3599423594446956, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Track.TrackId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.36352393932932503, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Artist.Name,!=,Spyro Gyra),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36791874569823174, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.InvoiceId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)", "score": -0.3694280566292293, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Spyro Gyra),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.37167740220072004, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total of tracks not from Spyro Gyra?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Artist.Name,!=,Spyro Gyra), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3810040859152446, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Spyro Gyra), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.2682636541587442, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2721561988219358, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.3021534966231243, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.30393533810324636, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Easy Listening), Invoice.Total),Invoice.Total))", "score": -0.31028067230582834, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3186561539432185, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.31892246501445054, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.32134916211514747, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3272964684664135, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3335596312948711, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.33398914263416196, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Invoice),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.3378816872973536, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),Invoice.Total))", "score": -0.34040696906477885, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.Total),InvoiceLine.UnitPrice))", "score": -0.34150528617111664, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "How many times on average have tracks from the genre Easy Listening been ordered per invoice?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3449214299901718, "correct_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3488279441051426, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.35940074370027775, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.3834356129916077, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Employee.EmployeeId,Album.ArtistId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.38739709929033256, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39770505322473315, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.400780941451577, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4069670537286559, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4073333445723024, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4160771527394533, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(filter(getData(Artist),Artist.Name,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42033855354479976, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Employee.EmployeeId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4298937072412994, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Employee.Title,=,Baden Powell/Vinicius de Moraes),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43057461368199706, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),Customer.Email,=,Baden Powell/Vinicius de Moraes),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.43254504494381546, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Album.ArtistId),Track.Composer,!=,Baden Powell/Vinicius de Moraes), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.43644436109173, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average invoice total not by the composers Baden Powell/Vinicius de Moraes?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Customer),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.AlbumId),Employee.Email,!=,Baden Powell/Vinicius de Moraes), Invoice.InvoiceId),Invoice.Total)", "score": -0.4859060982687675, "correct_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Baden Powell/Vinicius de Moraes),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.City))", "score": -0.3712588288963161, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.City))", "score": -0.3878063895881496, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.BirthDate))", "score": -0.3990831711471401, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.City))", "score": -0.39997676398161275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.Title))", "score": -0.41352484013441426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.BirthDate))", "score": -0.4156307318389736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))", "score": -0.4278011062324367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.City),Employee.Title))", "score": -0.43007240082624776, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.Title))", "score": -0.4422427752197109, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.City))", "score": -0.45990333344343526, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.BirthDate))", "score": -0.48772767569425923, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.Title))", "score": -0.5021693446815334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.State),Employee.City))", "score": -0.5475054719627224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.State),Employee.BirthDate))", "score": -0.5753298142135463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What is the birthdate of the employee whose adress is 683 10 Street SW?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Title),Employee.Address))", "score": -0.577467251676353, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3168807810210319, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.31697011046698237, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3178298281327944, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Album),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.33386144666515694, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33890007602615346, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34850519035142585, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3629871464558359, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3683181867732544, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.37259226078110824, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Artist.Name,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.374061768060983, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.38380029877482064, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,None),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Track.AlbumId,Artist.ArtistId), Album.Title),Album.Title))", "score": -0.39314543927258827, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Track.AlbumId),Artist.Name,!=,None), Album.Title),Album.Title))", "score": -0.4019729572215863, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.40657293286326707, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.AlbumId,Track.AlbumId),Album.Title,!=,None), Album.Title),Album.Title))", "score": -0.4247457087087885, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.14331423290041104, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.19410519281507496, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.21900628420089618, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99), Customer.Fax),Customer.Fax))", "score": -0.22621743318625834, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2494333686345089, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.2740526659840048, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2769081214071577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,<=,1.99), Customer.Fax),Customer.Fax))", "score": -0.2995016192580951, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.2996772335329301, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.FirstName),Customer.Fax))", "score": -0.3014288918216441, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),merge(getData(Customer),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Fax),Customer.Fax))", "score": -0.3060970196518125, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.32337321821628234, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>=,1.99), Customer.Fax),Customer.Fax))", "score": -0.325866395322325, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,null,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.3380643312795082, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the fax numbers of the customers that have purchased at least one track with another unit price than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,>=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))", "score": -0.35581772741112605, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.01795008289357706, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.464934853171773, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5105597797270839, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5236737878083209, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5323410854311121, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,None), Album.Title),Album.Title))", "score": -0.552169939072608, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5563761304914073, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5692987143636318, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId),MediaType.Name,=,None), Album.Title),Album.Title))", "score": -0.5715629819517162, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,None), Album.Title),Album.Title))", "score": -0.5779660119864231, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.5812477094357299, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),MediaType.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.5852042202817884, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6192378832194161, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6211068799212957, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Are there any albums for which we have a title?", "inferred_code": "isEmpty(extractValues(distinct(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId), Album.Title),Album.Title))", "score": -0.6265823588548518, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.20272467283461418, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Composer),Track.Composer))", "score": -0.21950777565076288, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.22881003660881283, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.22885364431846664, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.23111394249956244, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.2572429139834149, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.2793297665624496, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Track.Composer),Track.Composer))", "score": -0.2862265627981082, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.28629370830719064, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Composer))", "score": -0.3054587380463021, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.30672484823732815, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.3077190362273979, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId), Track.Composer),Track.Composer))", "score": -0.3122878661481068, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.331403916844871, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}, {"orig_question": "How many differnt composer are in the playlist with the name TV Shows?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))", "score": -0.33384801324892754, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.15870630554127274, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2176353689210373, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.3177136498442648, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.32972238186568786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.37905227764713345, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.37946318648027955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.38698699602236036, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.437981341026898, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2013-07-03 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.44947715682828493, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.46727124694007216, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.4714575838224846, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.48628093328013755, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Invoice.BillingCity),Track.Name))", "score": -0.5128398071901756, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.5262003103198367, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-07-03 00:00:00), Track.TrackId),Track.Name))", "score": -0.5303866472022492, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.11908353821091831, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.17994558744069683, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.1896706599147821, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.22393699275362156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.23869800516344547, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(InvoiceLine),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.24191562301034, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2499320853025266, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2550747601282961, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Track),Track.TrackId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2681277696129419, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.3015165838614411, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.31638936506699494, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33421298842696334, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.36026900720535515, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3657059012489823, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.38754571013123496, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2264534134038137, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24075719021129824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,No Prayer For The Dying),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.30115204145661867, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,=,No Prayer For The Dying),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3044054177273327, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Album.Title,!=,No Prayer For The Dying),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3110267889744283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Genre.Name))", "score": -0.31560513745164037, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.3312096067082552, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Track.Name))", "score": -0.33556169139628184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.33975583545756505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina), Track.Milliseconds),Track.Name))", "score": -0.3431953673141665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3527769487660553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),InvoiceLine.Quantity))", "score": -0.3624439199208618, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Elis Regina),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.36416636493841426, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3696073228200569, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Do we have any tracks from the artist Elis Regina that are not on the album No Prayer for The Dying?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Elis Regina), Genre.Name),Genre.Name))", "score": -0.37227428005056656, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09447698930830942, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.12348398725473676, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14951047155831504, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16175180215726404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.16856785366622556, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.1693494464567894, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23331657143995074, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.23579238180721535, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24700039753576072, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.2761801923609335, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2883964908624898, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.292664691213881, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music), Genre.Name),Genre.Name))", "score": -0.31304284328876275, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.319374567491937, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}, {"orig_question": "Which genres have a playlist named Music?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.34582614814174606, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.15212662674239885, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.18148185388850285, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.22206707421300323, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22270512542680332, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.23603391483291036, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.2399827967748006, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.25063440801937986, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.25301768228324684, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.25345422769905157, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.26396348293646354, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.27144417129471426, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),Track.UnitPrice)", "score": -0.30323342563365213, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3087702580426493, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.311003551058195, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of different tracks from the playlist Music?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3115583728953827, "correct_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.010291430425990414, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.5692353125414229, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7383487419889573, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8089356356094155, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),getData(Album),Genre.GenreId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8441609614846323, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.847354886047136, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Genre.GenreId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8659444227069887, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Genre.GenreId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8735159581302311, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.885548552462976, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Album),Genre.GenreId,Track.GenreId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.891926927790395, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),getData(Track),Genre.GenreId,Album.ArtistId),Album.Title,=,None), Album.Title),Album.Title))", "score": -0.8921054741765266, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(merge(getData(Album),getData(Album),Artist.ArtistId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9648446741521625, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Album.Title,!=,None), Album.Title),Album.Title))", "score": -1.0170248805297888, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.0220181470763157, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "what are the distinct album titles ?", "inferred_code": "done(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.029884428536974, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.09945534621978139, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.137193713506069, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.15356386707172284, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16749024930579398, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.16883346266129334, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.19017458896539877, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1955818778574801, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))", "score": -0.2165350642081047, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.24268601156928346, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.24650615840712922, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2565501413285589, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2684224123109957, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Genre.Name),Genre.Name))", "score": -0.27130964168821375, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2823411025141988, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres used by songs that are in playlists that don't have the name TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2860131829609471, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,TV Shows), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1035791179764561, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.1348192990591024, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.14585162368845953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.16856045265898567, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17047176499457994, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.17545166157245898, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.1809019611675576, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20980054551946573, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23420313391288755, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24890008546424894, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.2575881494496437, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2804163652908819, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Genre),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3274912259269646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.34412645061005676, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3631242889991863, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Track.Name))", "score": -0.14225512180382793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Name),Track.Name))", "score": -0.2901777494316775, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.BillingAddress),Track.Name))", "score": -0.35126321200186794, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Milliseconds),Track.Name))", "score": -0.39050637368018215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Rogers Canada), Customer.Email),Track.Name))", "score": -0.44297611709589546, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), InvoiceLine.Quantity),Track.Name))", "score": -0.45685352567488735, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Bytes),Track.Name))", "score": -0.4741643536453921, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))", "score": -0.5204632766162831, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Employee.Title),Track.Name))", "score": -0.5266729462509829, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Track.Milliseconds))", "score": -0.5350344664966542, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Invoice.BillingCity),Track.Name))", "score": -0.5523694324856478, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Track.Composer),Track.Name))", "score": -0.5768470335369784, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Rogers Canada), Track.Name),Track.Name))", "score": -0.590898744723745, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.LastName),Track.Name))", "score": -0.6237866449719149, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}, {"orig_question": "Which e-mail addresses belong to the company Rogers Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(MediaType),Customer.Company,=,Rogers Canada), Customer.Email),Track.Name))", "score": -0.6254666410004575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Rogers Canada), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.29082298989085664, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.2927458840477772, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.3101722541094049, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32307675635816496, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.3249996505150855, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.UnitPrice))", "score": -0.33917554141790685, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.InvoiceLineId))", "score": -0.33996970634470347, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.Quantity))", "score": -0.34242602057671323, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.UnitPrice))", "score": -0.37142930788521517, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),InvoiceLine.InvoiceLineId))", "score": -0.37222347281201174, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37724100943406375, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.37725158352109617, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4559300593646633, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Invoice.BillingCity),Track.Bytes))", "score": -0.4562692908223015, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "how many dicks fit into an anaconda", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,None), Invoice.BillingCity),InvoiceLine.UnitPrice))", "score": -0.45785295352158384, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.10566178682317776, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.12098960713435324, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.15608776218115697, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.19357429006851773, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24646688053244395, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.270418644259071, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,!=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2930681815287689, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Employee.Fax))", "score": -0.32850713488570493, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3290415835940609, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.34046989194648264, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.34514674500243503, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.35054032689905323, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Playlist.Name,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.37009881494522096, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.37564287988336026, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Track.Name))", "score": -0.3760201213935261, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.027226754830371958, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -0.6091069142277591, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.6790424399286809, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Track.TrackId),Album.Title)", "score": -1.0191394256620017, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.AlbumId),Album.Title)", "score": -1.0610708775253805, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -1.260204848670298, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.2607264161798784, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.Bytes),Album.Title))", "score": -1.2718348531144488, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.2826100087221304, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Album.Title))", "score": -1.3262024196799653, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.3264359567112007, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Track.UnitPrice)", "score": -1.3358868368983439, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Track.Bytes))", "score": -1.3408042846267842, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Track.UnitPrice),Album.Title))", "score": -1.3487827915454584, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different album titles are there?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.3653997240370923, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.08849254278538865, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.3802528346895997, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Fort Worth), Employee.City),Employee.City))", "score": -0.40825025579033536, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Fort Worth), Employee.City),Employee.City))", "score": -0.4176397559240286, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.41911202324627084, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,Fort Worth), Employee.City),Employee.City))", "score": -0.42527784248886746, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Artist.Name,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5299426748424594, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingCity,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5488683416515414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.State),Employee.City))", "score": -0.5561329967349593, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Employee.State))", "score": -0.5718175482943479, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.5720597471117799, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Customer.City))", "score": -0.6219284248545591, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,Fort Worth), Employee.City),Artist.Name))", "score": -0.6270879817202513, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.City,=,Fort Worth), Employee.City),Employee.City))", "score": -0.6299633349299256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}, {"orig_question": "What state is the city Forth Worth in?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,=,Fort Worth), Employee.City),Employee.City))", "score": -0.6833423807293002, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Fort Worth), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.09587506901732555, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.1302920025377709, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.15420455913489683, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.15762275369435913, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.1833226177123051, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19790514811213922, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.21319128999109827, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21678595794896638, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24689587861360784, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.26043333881010067, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2684100220537173, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Scholars Baroque Ensemble),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.27172653576365263, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.276006936429359, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble), Genre.Name),Genre.Name))", "score": -0.27809132643998385, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "What are the genres from artists not named Scholars Baroque Ensemble?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Scholars Baroque Ensemble),getData(Genre),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.31442373886352254, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Scholars Baroque Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.03684349637296691, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Title),Employee.Title))", "score": -0.34857656157866795, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.35155324706337954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.37155600841145936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.City),Employee.Title))", "score": -0.44397449372396697, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Email),Employee.Title))", "score": -0.4462444629044558, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,!=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.45883611119746737, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.4742371740454491, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.47602880872552444, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.4823110420857235, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.Title),Employee.Title))", "score": -0.49169809254635766, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.State,=,AB),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Title),Employee.Title))", "score": -0.5030877624841767, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Customer.State,=,AB), Employee.Title),Employee.Title))", "score": -0.5084621725847336, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Title),Employee.Title))", "score": -0.5180976791834924, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "Find the title of the employees having the state of AB.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.Title),Employee.Title))", "score": -0.5387767567652157, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.17960568925997572, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.18576791679194177, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.23875425252129664, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.24506456207775174, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,Rock),Track.Bytes),Album.Title))", "score": -0.2757205004676012, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Genre.Name,!=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29398237444532294, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Rock),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29815376045563313, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3156146818977891, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.31568085399246604, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Artist.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3272874807680669, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.333970321986184, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Track.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34053990870007284, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Rock),Track.Bytes),Album.Title))", "score": -0.34200642990326763, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34681973628240576, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}, {"orig_question": "Which album that is not Rock has the biggest track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Rock),getData(Track),Genre.GenreId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.34737735386408114, "correct_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Rock),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.030596086486184504, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.444922324796488, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Country),Customer.Address))", "score": -0.49514788967644563, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.5210358493131935, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.6091586275645384, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Invoice.CustomerId), Customer.Address),Customer.Address))", "score": -0.6775891177379987, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Phone),Customer.Address))", "score": -0.6784855185178458, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.6821049835743906, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.69938743490402, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.7215327911180793, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.LastName,=,Zimmermann), Customer.Address),Customer.Address))", "score": -0.7226704053682624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Zimmermann),getData(Customer),Customer.LastName,Customer.CustomerId), Invoice.BillingAddress),Customer.Address))", "score": -0.7296558860422907, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.LastName),Customer.Address))", "score": -0.7323177514699637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Country))", "score": -0.7336136789162992, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}, {"orig_question": "What are the different address of the customer with the last name Zimmermann?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Invoice.BillingAddress))", "score": -0.7549276442368864, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Zimmermann), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.15545485717666452, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3217819760502607, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3485815970360994, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3718050334865425, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),MediaType.Name,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.375021798437956, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3805083880328611, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40373182448330414, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4108045324622401, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.41848377557535044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.43402796891268314, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4417072120257935, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4427312985394545, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.Quantity,>=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4556211978989319, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),InvoiceLine.Quantity,<=,1), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4629365717009932, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}, {"orig_question": "From which countries have purchases that had a quantity of 1 or higher been made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,1), Customer.Country),Invoice.BillingCountry))", "score": -0.4850752222300798, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.20475034693663474, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.28100418187665216, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3129476752788946, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.32526186037118304, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.32874335813069927, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3383472940382719, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.3408729759010325, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.36217267378098794, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Trampled Under Foot),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.37216907077541866, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.37300103662523015, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Milliseconds),Track.Milliseconds))", "score": -0.37407564730024223, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,PlaylistTrack.PlaylistId),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3826049625649839, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.3860864852440474, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Trampled Under Foot),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Trampled Under Foot),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Milliseconds))", "score": -0.4127346559240798, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}, {"orig_question": "Find the track length in Milliseconds of the track by named Trampled Under Foot.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds,=,Trampled Under Foot),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))", "score": -0.41690997916815986, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Trampled Under Foot), Track.Milliseconds),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.09497073525720916, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.13548196048960384, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.1507276194521474, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.1904738057704306, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.19979468583311263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20011383604225783, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.20862200080748214, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21530518846410504, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27956012800611246, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.27994919791357675, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.2823063258270655, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,James Brown), Genre.Name),Genre.Name))", "score": -0.2840026997968367, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,James Brown),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28791588219580383, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2917174516814566, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "For which genres are there tracks from the artist named James Brown?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),merge(merge(getData(Track),getData(Track),Track.TrackId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3009818061339056, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Brown),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.153417040128615, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(filter(getData(Album),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.22758797113287205, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.23743646210985808, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.24784352780190777, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.25886329653184337, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.26443387582481215, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),filter(getData(Album),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2742149912024351, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2847543354068859, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.2848586711078213, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28535321082601195, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(Genre),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.2875208242421091, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),Track.AlbumId,Album.AlbumId),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.31606466202652733, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))", "score": -0.32265943886225695, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.347939419778538, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists perform the song Scheherazade, Op. 35: I. The Sea and Sindbad's Ship?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship), Artist.Name),Artist.Name))", "score": -0.37319226824205104, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Scheherazade, Op. 35: I. The Sea and Sindbad's Ship),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.14628765661107518, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18765925682203669, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28460381850608124, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Track.Bytes,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29068447973671735, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2933444473739098, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.29341807547858806, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Track.Bytes,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29496938186575905, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3104846625249229, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.31382158707337815, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(filter(merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.31476955664569756, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3239396221390939, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3564507093329654, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.3661088570104152, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.Title,!=,Armada: Music from the Courts of England and Spain),Album.AlbumId,Track.AlbumId),Album.Title,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.37560931860002866, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}, {"orig_question": "What genre are tracks from albums other than Armada: Music from the Courts of England and Spain?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Armada: Music from the Courts of England and Spain), Genre.Name),Genre.Name))", "score": -0.3847447244620185, "correct_code": "done(extractValues(min(merge(merge(filter(getData(Album),Album.Title,!=,Armada: Music from the Courts of England and Spain),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.21762594342726516, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.2787464460780029, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.34794840723770903, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.4090689098884468, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4255752167155151, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4267765483309631, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.PostalCode))", "score": -0.43522410632006997, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.4676779708315735, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.555897680525959, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.557099012141407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,leonekohler@surfeu.de), Invoice.BillingPostalCode),Customer.PostalCode)", "score": -0.5625675383260855, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.Country))", "score": -0.594216069621325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,leonekohler@surfeu.de), Customer.Country),Customer.PostalCode))", "score": -0.5980004346420174, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))", "score": -0.635317093176127, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "Give me all customers' postal codes with an email distinct from leonekohler@surfeu.de", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.Email,=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode)", "score": -0.6537903774210754, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,leonekohler@surfeu.de), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.1749279467535662, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.20042782957077043, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.21798673649073574, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.2415353048454515, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2607009937190989, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26106939856252115, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2882184948908141, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),PlaylistTrack.PlaylistId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3041559904748004, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3071599300209889, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.31202297643460686, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.GenreId,Playlist.PlaylistId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3166541047658403, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.32516105288444, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),PlaylistTrack.PlaylistId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.33167348602535013, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3395405141438976, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the playlist Heavy Metal Classic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3422783440069045, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3557222034333236, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3625320129341339, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3943167456510368, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39621062759836795, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40112655515184714, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40302043709917823, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.43480516981608114, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99), Invoice.InvoiceId),Invoice.Total)", "score": -0.4386769768752586, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4416149793168915, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4439314226503487, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.44572044131356875, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.44602087885693675, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4481903391484354, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.45253022381940883, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,1),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.4528307486845351, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.20764734020961628, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.2479653275533563, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.Name))", "score": -0.26971647351685674, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.Name))", "score": -0.27429248045157456, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.3072417124320356, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.31325668546397545, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Milliseconds),Track.Name))", "score": -0.3262593900022327, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Album.Title))", "score": -0.3267271996783246, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Album.Title))", "score": -0.32837977234367594, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.Name))", "score": -0.33009136579636056, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))", "score": -0.3326974890388614, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.UnitPrice))", "score": -0.33389958141600734, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.UnitPrice),Track.Name))", "score": -0.3404776593271702, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Philip Glass Ensemble),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3454338997465764, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}, {"orig_question": "What is the largest track by the Philip Glass Ensemble?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,=,Philip Glass Ensemble),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.35202120861486424, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Philip Glass Ensemble),Track.Bytes),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.1439519730192842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Michael), Employee.Address),Employee.Address))", "score": -0.1786359307152452, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Michael), Employee.Address),Employee.Address))", "score": -0.25483508974139113, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Employee.Address))", "score": -0.32171282738272566, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Michael), Employee.Address),Employee.Address))", "score": -0.36516577571455855, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.47717948011666633, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Michael), Employee.Address),Employee.Address))", "score": -0.48613209098402876, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5127774174257752, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5207466837746324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Company,!=,Michael),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.5594784127135156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5599426879238968, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.Address),Employee.Address))", "score": -0.5955405703753913, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5984989163262071, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.FirstName,!=,Michael),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.Address),Employee.Address))", "score": -0.6059022466190802, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(getData(Employee), Employee.Address),Employee.Address))", "score": -0.6600041061220128, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Phone))", "score": -0.36643817719232175, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.Phone))", "score": -0.3894753723980102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.State))", "score": -0.39904768463384244, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.Phone))", "score": -0.41655435856591794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.State))", "score": -0.4220848798395309, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Address),Employee.Phone))", "score": -0.42816897925149533, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.State))", "score": -0.44916386600743863, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Address),Employee.State))", "score": -0.460778486693016, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Address))", "score": -0.46541317995797726, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Country),Employee.Address))", "score": -0.48845037516366574, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Invoice.BillingState),Employee.Phone))", "score": -0.49447247084390256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.BirthDate),Employee.Phone))", "score": -0.5115223198772583, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.Phone),Employee.Address))", "score": -0.5155293613315735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.State),Employee.Country))", "score": -0.5176281004787597, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "Which employee has teh phone number 1 (780) 836-9987?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Invoice.BillingState),Employee.State))", "score": -0.5270819782854232, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,1 (780) 836-9987), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,NY), Customer.Email),Customer.Email))", "score": -0.17479212079342688, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,NY), Customer.Email),Customer.Email))", "score": -0.1962793568163761, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,NY), Customer.Email),Customer.Email))", "score": -0.242363045552338, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,NY), Customer.Email),Customer.Email))", "score": -0.2940576920300373, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,!=,NY), Customer.Email),Customer.Email))", "score": -0.3752128133564838, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,NY), Customer.Email),Customer.Email))", "score": -0.4170572409420856, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,NY), Customer.Email),Customer.Email))", "score": -0.49837439749535406, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,NY), Customer.Email),Employee.Email))", "score": -0.5330757662668475, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,NY), Customer.Email),Employee.Email))", "score": -0.5545630022897967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,NY), Customer.Email),Customer.Email))", "score": -0.5662490256145247, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,NY), Customer.Email),Customer.Email))", "score": -0.587736261637474, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,NY), Customer.Email),Employee.Email))", "score": -0.6006466910257586, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,NY), Customer.Email),Customer.Email))", "score": -0.6147283265381702, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Artist.Name,!=,NY), Customer.Email),Customer.Email))", "score": -0.6264309236794361, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))", "score": -0.6338199503734359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12094111074489182, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.18171582587879823, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.19574383632294498, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.19667442976284666, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.208166312587017, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.21093777637717365, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.22451351663944516, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.22599438331722171, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.23030854430053097, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2541188539663925, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2575752276871084, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), MediaType.Name),MediaType.Name))", "score": -0.2820824622942904, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.29145115469703564, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2921471176056742, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types were used for tracks appearing in playlists that don't have the name Classical 101 - Next Steps?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30104915607742244, "correct_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.1755752124036693, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.22893056349947855, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.24237426821660701, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,<=,1.99), Album.Title),Album.Title))", "score": -0.26264461206218653, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28159108111713044, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28382043475825347, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total,<=,1.99), Album.Title),Album.Title))", "score": -0.29040866141189725, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,1.99),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.301315092272623, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,1.99),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30198597521540216, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Composer,<=,1.99), Album.Title),Album.Title))", "score": -0.3220796149972394, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<=,1.99), Album.Title),Album.Title))", "score": -0.32642498153350663, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3426360928043243, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.Total,>=,1.99), Album.Title),Album.Title))", "score": -0.3437640125077065, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.AlbumId),InvoiceLine.UnitPrice,<=,1.99),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.34486544644544737, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}, {"orig_question": "Which albums contain tracks that costs at least 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>=,1.99), Album.Title),Album.Title))", "score": -0.3505675926846482, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.11038844621765581, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.13549368833498332, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.13892318221058675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.1946959452377808, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.20382920476925329, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.20621835674518302, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2074453042119244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2109160428315148, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.21285603563693536, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2300680804891649, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24647050146743388, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Funk Como Le Gusta),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.24764986699186226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Genre),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.2688906562921169, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))", "score": -0.2704690210267206, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}, {"orig_question": "Is there any genre where the artists name is Funk Como Le Gusta?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Funk Como Le Gusta),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2840004254562712, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Funk Como Le Gusta), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2753014249311656, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.27572727995694635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(filter(getData(Customer),Customer.PostalCode,!=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2964235837963818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.30906436124549447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,T2P 5G3),Invoice.BillingPostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.31248452681501554, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32557415891621794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.32635367018824424, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,T2P 5G3),Invoice.BillingPostalCode,!=,Joakim), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34146306468218296, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34545382564546534, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(Employee),Invoice.BillingPostalCode,=,T2P 5G3),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.34709313132088604, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Employee),merge(filter(getData(Customer),Customer.PostalCode,!=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35239614851397466, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Joakim),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3537280248389876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingPostalCode,=,Joakim),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.35396001847196973, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,!=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,!=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3564630695102341, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Are there countries in which a customer with another first name than Joakim lives to which a track was sold by an employee living in an area with the postal code T2P 5G3?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.PostalCode,=,T2P 5G3),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5G3), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.358911244302019, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5G3),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.FirstName,!=,Joakim),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.026171731115027796, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.294920797787358, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.43801525062547764, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.49737197843546194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.State), Employee.PostalCode),Employee.PostalCode))", "score": -0.5331626986226747, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.536628473809197, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5434121903527653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.PostalCode),Employee.PostalCode))", "score": -0.5591710506376886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.5751056864901329, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.5790816580920364, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.Country),Employee.PostalCode))", "score": -0.6283312605737592, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.Country))", "score": -0.6301658785014297, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.FirstName))", "score": -0.6428239977030898, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6443331221036326, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of our employee with the email margaret@chinookcorp.com?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))", "score": -0.6515671208544518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,margaret@chinookcorp.com), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.026382627514976775, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.43375223423299103, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.Country),Employee.LastName))", "score": -0.4484523065293615, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.49625487108729477, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5224848357865994, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.5398718491946419, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))", "score": -0.5407634345719998, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.Country))", "score": -0.556873628487665, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Customer.LastName),Employee.LastName))", "score": -0.563082741698781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.LastName),Employee.LastName))", "score": -0.6023744860489456, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId), Employee.LastName),Employee.LastName))", "score": -0.6157983205220987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Track.Name))", "score": -0.6214905470515077, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Customer.LastName),Employee.LastName))", "score": -0.6255853785530848, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.Phone),Employee.LastName))", "score": -0.6347980029786413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the distinct last names of the employees which do not have the fax number +1 (403) 246-9899)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId), Employee.LastName),Employee.LastName))", "score": -0.6516663428060977, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,+1 (403) 246-9899), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.1769983099068899, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.1955493740936758, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.2361376956736924, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.2530856802397255, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.26968458976597404, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.2716367444265114, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.28011084884429827, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.3136577429365799, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3210353857007736, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.32535793682046277, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<=,23.86),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3329575456247715, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,!=,23.86), Track.TrackId),Track.Milliseconds)", "score": -0.33618829422286806, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<=,23.86),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3444668397460764, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,<=,23.86),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3451877321205642, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks in invoices with a total of 23.86?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.Total,<=,23.86),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3642966258306076, "correct_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.Total,=,23.86),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.11822112313529942, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,232202), Track.Name),Track.Name))", "score": -0.1276913102628896, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,232202), Track.Name),Track.Name))", "score": -0.323781807339401, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,232202), Track.Name),Track.Name))", "score": -0.35956959835311864, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.3869658713914878, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.39880672762225555, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4249855514909775, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.43443367931396293, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4462745355447307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,232202),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.47245337948753235, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Name),Track.Name))", "score": -0.4950306803206587, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5051645357991454, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,232202), Track.Name),Track.Name))", "score": -0.5148246478202054, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,232202),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.5170053920299132, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks names that are shorter than 232202 milliseconds? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Track.Milliseconds,<,232202), Track.Name),Track.Name))", "score": -0.518026363294085, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<,232202), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.20110109132474463, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.2410530192846636, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.37209300008362334, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.3763372195953707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.37736796271747153, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.3991493215853552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.4120449280435423, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.4391012495452742, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.Fax),Employee.BirthDate))", "score": -0.5098019024426321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.BirthDate),Employee.Fax))", "score": -0.5469046408379654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.5473291283542494, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))", "score": -0.5483598714763502, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2002-05-01 00:00:00), Employee.Fax),Employee.BirthDate))", "score": -0.5497538304025511, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,2002-05-01 00:00:00), Employee.Fax),Customer.Fax))", "score": -0.5701412303442339, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}, {"orig_question": "What is the fax number of the employee hired on 2002-05-01 at 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Customer.Fax),Employee.Fax))", "score": -0.5714011067593674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.09979253841816553, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),MediaType.Name,=,R.E.M.),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.45006864603949776, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),MediaType.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.46697722226757216, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.469352124048421, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,R.E.M.),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48626072182675195, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Invoice.Total)", "score": -0.48737884084166494, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5011592307341005, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5208987468875151, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,R.E.M.), Track.UnitPrice),Invoice.Total))", "score": -0.5595839890556817, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5616115586358609, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,R.E.M.), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5656978953019189, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.5815270352540802, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,R.E.M.), Invoice.Total),Invoice.Total))", "score": -0.597016778858233, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Track.Name,=,R.E.M.),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6101697989074704, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of all the purchases of REM tracks?", "inferred_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)", "score": -0.6213791448622018, "correct_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,=,R.E.M.), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1005867884553614, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.1375911938897634, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.15962342703153798, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16062558336066854, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17599614146507145, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1915736386913145, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21058321124893714, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24290117669496103, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24327629757323063, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2543798542871682, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.286826882259311, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2933599157393316, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29614429521241886, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2983361460045265, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What ist the sum of the invoice total of the tracks which do have a media type name of MPEG audio file?", "inferred_code": "sum(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3240314449642879, "correct_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1661315664320951, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.17386262320227275, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2310046369659147, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))", "score": -0.23487737485722507, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.23826540105641422, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>,1.99), Playlist.Name),Playlist.Name))", "score": -0.24183529465980505, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,!=,1.99), Playlist.Name),Playlist.Name))", "score": -0.255148074340111, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.25708073470823894, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,<,1.99), Playlist.Name),Playlist.Name))", "score": -0.26675044718135654, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2792175260999252, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,1.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.289923193953929, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>,1.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3237616773211986, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,!=,1.99), Playlist.Name),Customer.Fax))", "score": -0.3283380591864036, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>,1.99), Playlist.Name),Playlist.Name))", "score": -0.33078553971580693, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "How many playlists containing tracks with a unit price different than 1.99 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<,1.99), Playlist.Name),Customer.Fax))", "score": -0.3317260853855927, "correct_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,!=,1.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,T1K 5N8), Employee.State),Employee.Title))", "score": -0.4466575035912683, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.Title))", "score": -0.49235053238069976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.4948619851929834, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Title))", "score": -0.498760912020534, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Address),Employee.Title))", "score": -0.5165859948377161, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.Email))", "score": -0.5218234147124102, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.City),Employee.City))", "score": -0.5233023112050289, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.Email),Employee.Email))", "score": -0.5282337943522444, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.5291941052961985, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.5301455008794249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Title))", "score": -0.5373275193889865, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Email))", "score": -0.5618802215462194, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.City))", "score": -0.5657615924371868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.Email))", "score": -0.569062240055781, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}, {"orig_question": "What are the diffent employee adresses of employees not living in a city with a postal code of  T1K 5N8?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.City,!=,T1K 5N8),Employee.PostalCode,!=,T1K 5N8), Employee.City),Employee.City))", "score": -0.5729436109467485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,T1K 5N8), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.13620931693375818, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.13724722861661576, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Country))", "score": -0.5727833812998142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.5783540812071812, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Country),Customer.Company))", "score": -0.6182307317794766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.6587335331451181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Invoice.InvoiceDate),Customer.Company))", "score": -0.7450929596961942, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,10012-2612),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Company),Customer.Company))", "score": -0.7477220108965363, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,10012-2612), Customer.Company),Customer.Company))", "score": -0.7802820161741693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.7962041223363485, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,10012-2612), Customer.Company),Customer.Company))", "score": -0.855173500807723, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Fax),Customer.Company))", "score": -0.8716234877647366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Album.Title))", "score": -0.8969157939718571, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Fax))", "score": -0.9009190803335514, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}, {"orig_question": "What are the customer companies in the postal area 10012-2612?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Invoice.InvoiceDate))", "score": -0.9052149658964481, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,10012-2612), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Bytes))", "score": -0.08750416951600848, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.3173255560138359, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Track.Bytes))", "score": -0.5377468150215332, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Track.Bytes))", "score": -0.7637553174535305, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Email))", "score": -0.7675682015193607, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Milliseconds))", "score": -0.7796893125284539, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "sum(distinct(getData(Customer), Track.TrackId),Track.Bytes)", "score": -0.7841191824392449, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),InvoiceLine.InvoiceLineId))", "score": -0.7990894570711529, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Album.Title))", "score": -0.8089915500385363, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.TrackId))", "score": -0.8258220292213665, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Track.Name))", "score": -0.8287910782081346, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.8616030401746221, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Track.Bytes))", "score": -0.9511874193089038, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Track.Bytes)", "score": -0.9922492896454512, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "How many different customer emails exist?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.993576703951358, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.36757791905074555, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.39135624586015183, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.4173393931832834, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.42675580947070557, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Customer.Phone))", "score": -0.43879842875867325, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.44111771999268967, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.45053413628011185, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Employee.Phone))", "score": -0.4885599028912111, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Track.Composer,=,Michelle), Invoice.Total),Track.Composer))", "score": -0.4979763191786333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.4986556929197832, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Customer.Phone),Customer.Phone))", "score": -0.5224340197291895, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Invoice.Total),Invoice.Total))", "score": -0.5261701580730005, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Employee.Phone))", "score": -0.548417167052321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Michelle), Invoice.Total),Invoice.Total))", "score": -0.5499484848824068, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}, {"orig_question": "Which phone number does Michelle have?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Phone,=,Michelle), Customer.Phone),Track.Composer))", "score": -0.5578335833397432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Michelle), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1637456146756196, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21655469950318362, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2723246131928227, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.27492515809868784, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2805887996939987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28728459931029204, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28836460381589246, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29129356303441456, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2974962535592347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.306253539184065, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.31336900675252133, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3241919222643366, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3278147713716975, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<=,0.99), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3377835110999411, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of invoices sold for a unit price smaller or equal than 0.99 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.40684397459226385, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2235857495579694, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.33066406338548404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.35630967705583316, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.38304629414415103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42735019778774586, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.42894525029891944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4308328279767011, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.CustomerId,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.48843946545457584, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Country,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5135693797383283, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5469604477839312, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.562318001742824, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5806911889879064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.Total))", "score": -0.6782557052101765, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.InvoiceDate))", "score": -0.7079057731473869, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "At which dates were sales to the USA made?", "inferred_code": "isEmpty(extractValues(distinct(getData(Invoice), Invoice.Total),Invoice.InvoiceDate))", "score": -0.7415490083218558, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,USA), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18526701643985938, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2335585046444449, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2347799034403521, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2354109556178353, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25930258453033256, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.2917120431117055, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3134691943876776, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.31961207132373437, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3254525346525048, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32649688316540176, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingAddress,<=,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3313335688700612, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.34954320999188354, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.3541053833617793, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1), Invoice.InvoiceId),Invoice.Total)", "score": -0.36157951717064285, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,>,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3719608156086017, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.022624707080467488, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Employee.Country))", "score": -0.4949651632905443, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Customer.Country))", "score": -0.5025512252450426, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5493363882894656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.563641993742094, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5718579529557395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5861635584083679, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6166202511739834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6216198919173621, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6272009137188375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Customer.CustomerId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6388104368088326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6391418158402573, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6415065377226843, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6780103712986483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which country we sent an invoice does the postal code 89503 belong?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.690872376666448, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,89503), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.12036369029836017, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.15215204632308116, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.15806401048921856, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.16135825574584223, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.17065332357039956, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19270251932462126, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.20966241244572026, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.22406421973633234, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.2583093129154729, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29442439495383127, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name)", "score": -0.29695516248345244, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name)", "score": -0.3193050782216903, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Gerald Moore),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name)", "score": -0.32020825544522513, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name)", "score": -0.3357472695180549, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres does the music done by Gerald Moore belong to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.Name,=,Gerald Moore), Genre.Name),Genre.Name))", "score": -0.37058637483451345, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Gerald Moore),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.08374855947024581, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.1577536035793033, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.16453103223241303, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.22388714933503012, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.23375230780603218, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.28215546927218743, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.2887267589196859, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.UnitPrice),Album.Title))", "score": -0.3154325569540146, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31575800250631886, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.32056379519176287, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.3313924216827056, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Protected AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.3440355122901605, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.UnitPrice),Album.Title))", "score": -0.35144501520205174, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3612437916003665, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}, {"orig_question": "On which album occurs the longest Protected AAC audio file track?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Protected AAC audio file),Track.Bytes),Album.Title))", "score": -0.38929609420388583, "correct_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.03307661932740302, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Employee.PostalCode))", "score": -0.3908927026841411, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.39616461430523486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Employee.PostalCode),Customer.PostalCode))", "score": -0.47851155192438455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.5394956542349973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Artist.ArtistId))", "score": -0.588686722860075, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6255386635366449, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.6470197537619242, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6636748477521905, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6878484651151666, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.Address))", "score": -0.7199069443795452, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Address),Customer.PostalCode))", "score": -0.730642745800651, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Country),Customer.PostalCode))", "score": -0.7365223863798747, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7428562208715448, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Artist.Name))", "score": -0.8029247108552227, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.03260332295576518, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Track.Name))", "score": -0.41787493923584407, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.FirstName))", "score": -0.4717572400895733, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Employee.LastName))", "score": -0.47339851358810847, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.5635978008583665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.5952348946168894, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,QC), Customer.LastName),Customer.LastName))", "score": -0.6034595411820192, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.FirstName),Customer.LastName))", "score": -0.6100655477112014, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.Country),Customer.LastName))", "score": -0.6108718197410781, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.Email))", "score": -0.6450176606504101, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.6626900117462355, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.675730010529464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Customer.LastName),Track.Name))", "score": -0.6809649552804321, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.Email),Customer.LastName))", "score": -0.6845793407028395, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}, {"orig_question": "What are the last names of customers not from the state QC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Customer),Customer.CustomerId,Invoice.CustomerId),Customer.State,!=,QC), Employee.LastName),Customer.LastName))", "score": -0.7073670740547698, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,QC), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Title))", "score": -0.22510405204229755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.FirstName),Employee.Title))", "score": -0.303867879723839, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Country),Employee.Title))", "score": -0.30500300548010273, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.PostalCode),Employee.Title))", "score": -0.3516635330670397, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.Title))", "score": -0.39478367886476917, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.City))", "score": -0.45306505582266254, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.Email))", "score": -0.49008532187872333, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Title),Employee.FirstName))", "score": -0.5006175222151796, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.Address),Employee.Title))", "score": -0.5107598932736437, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.LastName),Employee.Title))", "score": -0.5216908486836473, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.FirstName),Employee.Title))", "score": -0.5455187222362693, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),filter(merge(getData(Track),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Email,=,laura@chinookcorp.com),Genre.GenreId,Track.GenreId), Genre.Name),Employee.Title))", "score": -0.5520076379170159, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.PostalCode),Employee.Title))", "score": -0.560727970278086, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,laura@chinookcorp.com),getData(Employee),Customer.SupportRepId,Genre.GenreId), Employee.FirstName),Employee.Title))", "score": -0.5654615279833026, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}, {"orig_question": "Where do the employees with the email address laura@chinookcorp.com live ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,PlaylistTrack.TrackId), Genre.Name),Employee.Title))", "score": -0.5812871297442727, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,laura@chinookcorp.com), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.03044742346264684, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3053045719907459, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.4242132254921671, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5365859038110312, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,!=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5567601174161609, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.5649649947927173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Employee.Address))", "score": -0.60393964895502, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.650342868250538, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.668549701576012, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.Total,<,13.86),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6823955406169763, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6971507915341135, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.6990703740202662, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,null,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7073747366712269, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.7315828765322294, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Which are the billing addresses with an invoice total smaller than 13.86?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.7944330819927927, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,13.86), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.UnitPrice),Artist.Name))", "score": -0.19764605435585958, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.Milliseconds),Artist.Name))", "score": -0.23034433238391025, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.2305689067659138, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Artist.Name))", "score": -0.23576159992971818, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.24932707263695864, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.UnitPrice,>,0.99),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes),Artist.Name))", "score": -0.2681041863085388, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.27409426889337146, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),Track.UnitPrice),Artist.Name))", "score": -0.2748006829896789, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,9010917),Track.Bytes),Artist.Name))", "score": -0.28070476590679827, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,>,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.2851851093815019, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.28565047804950144, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,9010917),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.30622447931464025, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,!=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.UnitPrice),Artist.Name))", "score": -0.3103233831693674, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Bytes,>,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Milliseconds),Artist.Name))", "score": -0.32958657416427495, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists have tracks bigger than 9010917 bytes and more expensive than 0.99?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Bytes,>,9010917),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Artist.Name))", "score": -0.33103098708262646, "correct_code": "done(extractValues(distinct(merge(merge(filter(filter(getData(Track),Track.UnitPrice,>=,0.99),Track.Bytes,>=,9010917),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.1796040790850384, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.1996652739817364, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.41317991490905115, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.42902601833884546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.43324110980574915, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.44908721323554346, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.InvoiceId),Invoice.Total)", "score": -0.48919508729209976, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "sum(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.5135709195431154, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Customer.Phone))", "score": -0.5494411266172392, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Customer.Phone))", "score": -0.5695023215139372, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.5717722196350223, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6052532302910549, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6253144251877529, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,<=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6434229272181256, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}, {"orig_question": "What are the total costs of invoices issued on May 6th 2009?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))", "score": -0.6694208169574267, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-05-06 00:00:00), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18008008112793647, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2121667692305997, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23165445268347093, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23683922617002398, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.Total),Invoice.Total))", "score": -0.24877147180540385, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2500751981774373, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2509830704819623, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2512431195271903, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.258484155692045, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26377036719931407, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.Total),Invoice.Total))", "score": -0.27799086282712376, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Next Steps), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2843278890957542, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.2972166182582458, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30665219637826696, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total cost of tracks on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.3071556039694093, "correct_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Next Steps), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.22167916577501912, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.2712411792199804, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.29862730879535876, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.3023006731376084, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.Total))", "score": -0.3369241142608973, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.34418639022944475, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3479407381491306, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.Address),Customer.Address))", "score": -0.3581690132685586, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3609423162632222, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.3647608980490031, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99), Customer.Address),Customer.Address))", "score": -0.36527727986822595, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.368136473315937, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),filter(getData(Invoice),Invoice.BillingCity,>=,0.99),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.37228074030806124, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.37277913403509616, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Address))", "score": -0.3940656446159688, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.020162591300504573, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Album.Title))", "score": -0.4605997321750692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.FirstName))", "score": -0.4937147246731868, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Fax))", "score": -0.6064494071151785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Employee.FirstName))", "score": -0.6181009230758718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Employee.FirstName),Customer.FirstName))", "score": -0.6440871209460965, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6441356179957438, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.Fax),Customer.FirstName))", "score": -0.6746389121371976, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))", "score": -0.6870558183845787, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.PostalCode),Customer.FirstName))", "score": -0.69144020980184, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Album.Title),Customer.FirstName))", "score": -0.701758071835684, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Track.Name))", "score": -0.7325105486061148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Track.Name),Customer.FirstName))", "score": -0.7400870174724332, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.Email))", "score": -0.7470208225395254, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the first name of the customer with the email address astrid.gruber@apple.at?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.PostalCode))", "score": -0.7528669653083853, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,astrid.gruber@apple.at), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.044186332209350865, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.48303842501627514, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,None), Customer.Email),Customer.Email))", "score": -0.48352622942911694, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.531838178205362, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,None), Customer.Email),Customer.Email))", "score": -0.5518448944567353, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Track.Name))", "score": -0.5910273822613927, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,None),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Email),Customer.Email))", "score": -0.6218061600865814, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Track.Bytes))", "score": -0.7394328197496653, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,None), Customer.Email),Customer.Email))", "score": -0.758331179189554, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,None), Customer.Email),Customer.Email))", "score": -0.7588189836023957, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,None), Customer.Email),Customer.Email))", "score": -0.7721868898152024, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,None),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Email),Customer.Email))", "score": -0.8005927861463088, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,None), Customer.Email),Customer.Email))", "score": -0.8071309323786409, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,None), Customer.Email),Customer.Email))", "score": -0.8271376482807682, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.Email,=,None),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.Email),Track.Name))", "score": -0.8294754291541059, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.02862087132234592, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.42556098981528095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.InvoiceId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.501396722979857, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5046705851127626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.514301938983848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5186981421767868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5353285442439344, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.536903406100464, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5839568624069216, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6213487096392782, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.634618843512726, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6812976718210848, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6875868148708832, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.7652052164339693, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "What postal code do the invoices have that are issued in Dublin?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Dublin), Invoice.InvoiceDate),Invoice.BillingPostalCode))", "score": -0.7699524283671053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Dublin), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.22892974764181417, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Title),Employee.City))", "score": -0.33571761548591894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.3810751259334211, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.Title))", "score": -0.4049909643836145, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,7727B 41 Ave), Employee.Title),Employee.City))", "score": -0.48786299377752584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,>=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.48797547705544275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.4935412973172788, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Address),Employee.City))", "score": -0.49762400686813635, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Title),Employee.Title))", "score": -0.5117788322277192, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,7727B 41 Ave), Employee.City),Employee.City))", "score": -0.5244933933026914, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.City),Employee.BirthDate))", "score": -0.5305621705956582, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.Email),Employee.City))", "score": -0.5364384621389036, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.City))", "score": -0.5412367254502897, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.State),Employee.City))", "score": -0.5499116152532224, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "What's the birthdate of the employee living at 7727B 41 Ave?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,7727B 41 Ave), Employee.City),Employee.Title))", "score": -0.5571363426752214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,7727B 41 Ave), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.23430954520453892, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.2798381801944819, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.28021233910933735, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.UnitPrice,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.2875551681151181, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.2901772095190449, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Album.Title,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.301709692930823, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3080359707600856, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Temple of the Dog),getData(Track),MediaType.MediaTypeId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3135446925142258, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.3177846832129022, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.3183561429197729, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Album.Title,=,Temple of the Dog),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.321056698923562, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32320509228756, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Temple of the Dog),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.3251693634052625, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity,=,Temple of the Dog),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.32965643301781483, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}, {"orig_question": "To how many different genres can the songs of Temple of the Dog be assigned to?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Name,=,Temple of the Dog), Genre.Name),Genre.Name))", "score": -0.3329360160119038, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Temple of the Dog),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.037332437379518524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.Country),Employee.State))", "score": -0.35450867787585594, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,11120 Jasper Ave NW),getData(Employee),Customer.SupportRepId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.46202243440763263, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.49145581193687893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),filter(merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,11120 Jasper Ave NW),Employee.EmployeeId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.5063966548457385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),filter(merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,11120 Jasper Ave NW),Customer.SupportRepId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.5067106802281982, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),filter(merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.Address,=,11120 Jasper Ave NW),Invoice.CustomerId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.5074778369508934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Address))", "score": -0.517959135962883, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.Country))", "score": -0.5194953860773239, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5202378496025446, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.State),Employee.State))", "score": -0.5513546595711768, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId), Employee.State),Employee.State))", "score": -0.5637355279279256, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))", "score": -0.5663270383979584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Customer.State))", "score": -0.5773033978475723, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}, {"orig_question": "In which state does the employee with the address 11120 Jasper Ave NW work?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId), Employee.State),Employee.State))", "score": -0.5841523676655688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,11120 Jasper Ave NW), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.12327258900313498, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1485001459255494, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16152792280832798, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16379648489303728, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.1726943357302956, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.18310348089556955, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.22842850852209343, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24195675601605143, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.24998561699482863, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.26843486654928694, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2704555674012012, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.273200025463894, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2853436365736885, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2875101383975849, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2884680236019979, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1466104114381212, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18698726656514514, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21113528236447793, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.2151321248308386, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22361713388165733, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22620349512177518, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.2301664008668606, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2401652015185675, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2543178432332658, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.2659206804522748, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.2660142634811219, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.27115671271591957, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28453518079635315, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30018999746630903, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of the total invoices from the genre alternative?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Invoice.InvoiceId),Invoice.Total)", "score": -0.3070045594510445, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.24090102056470641, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2832929168125702, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.City))", "score": -0.30595420042482147, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Track.UnitPrice))", "score": -0.34674390891996154, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Employee.City))", "score": -0.34834609667268523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Track.UnitPrice))", "score": -0.3891358051678253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Track.Milliseconds))", "score": -0.5084775511404587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5161999065658165, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.BillingCity),Track.Milliseconds))", "score": -0.5508694473883224, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Employee.State,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5585918028136803, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.5811346594473434, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Employee.City))", "score": -0.5812530864259315, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.BirthDate))", "score": -0.6082198444983078, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Employee.Title))", "score": -0.6154570404669357, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6218794707438065, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13385157874328496, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Acelerou),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.13401606416680917, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Name,=,Acelerou),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.15103799059568382, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.16019131399922334, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.16949029371591118, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.2620234769276231, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Composer,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.32637160450256913, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3281223077636964, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Playlist.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.3567429601878699, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36636916691543675, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.Name,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.3702727496209416, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.37583701280172954, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.Composer,=,Acelerou),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.38260114210312407, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,Acelerou), Playlist.Name),Playlist.Name))", "score": -0.4041848163401002, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "In how many different playlists occures the track Acelerou?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Name,=,Acelerou),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name)", "score": -0.44853692614102286, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,Acelerou),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
