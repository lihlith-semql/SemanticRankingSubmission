{"index": 0, "beams": [{"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.08645651982473646, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.12487209758983568, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.1374824432531411, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.14176398637122686, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1837397204154156, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.2109834675219277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2756090340786146, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27943642748269915, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2863382114206241, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.29056781142865373, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Brazilian Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29746990706801646, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.30147976238519925, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.325968925479071, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3277745861158469, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file format are tracks on the Brazilian Music playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))", "score": -0.33055197033893463, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Brazilian Music), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 1, "beams": [{"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1621535673832439, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16947912645319657, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17244257477390845, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1938221418326061, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2023576949176699, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20842109539508966, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20942820830075418, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2340169361716526, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24064879462348435, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2424098107461175, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2562857136045618, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26556227725819187, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.2817683121549922, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.3011916745592955, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "How much is the sum of the invoices in the genre Rock And Roll?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Rock And Roll),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.305968769185102, "correct_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Rock And Roll),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 2, "beams": [{"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.12495848974688059, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.19627365349183976, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.21213137938211432, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.23166446867767268, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2362444728760227, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2433654920231357, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.2480915358661961, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2594289236900395, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Julian Bream),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.26075574876091845, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.26250125149943077, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.2727992765918816, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.27892832574406906, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.29079392061727477, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(Track),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.30567121409386133, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track unit price of tracks that were in an album created by Julian Bream?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,Julian Bream), Track.TrackId),Track.UnitPrice)", "score": -0.3127787379615623, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Julian Bream), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 3, "beams": [{"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.043208011720253126, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3255478480958298, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3569418176225554, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.3628056359625589, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total))", "score": -0.409889829639269, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.44210204167884143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.44745907538020185, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.46509588271160485, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.4721248928800674, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.47228377769808494, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.47529828391589035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.Total),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.557568606948498, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5592468736630868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.Total))", "score": -0.5806653983835841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "Find the billing state of the invoices having total value of at least 11.94 dollars.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,=,11.94), Invoice.BillingState),Invoice.BillingState))", "score": -0.5886790679118605, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,>=,11.94), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 4, "beams": [{"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.005103563796054792, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9354652363478636, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.9914271006689117, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.0238330676297849, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -1.0277322827901743, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1245660023111184, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.130883195002261, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.1467180140480009, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.2557836152939357, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -1.2855356034508743, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.3027329408495973, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -1.311597254734356, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Phone),Artist.Name))", "score": -1.3351330622442568, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -1.366917449581868, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are the artists' names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.4000790450686467, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 5, "beams": [{"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.0792662830426707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.41599646780153754, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.43977811034346814, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.4571931054751536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.4750330980221086, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.4888996961011586, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.4926211123748908, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.5135269617575585, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.BirthDate),Employee.State))", "score": -0.5317670966833248, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-3443), Employee.State),Employee.State))", "score": -0.5409694028421654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5561458244919535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State)", "score": -0.5572392932958414, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5836201707822523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,+1 (403) 262-3443),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.5987123088877468, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}, {"orig_question": "What is the state where the employee whose phone number is +1 (403) 262-3443 lives?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(Artist),Employee.Phone,=,+1 (403) 262-3443),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.SupportRepId,Invoice.CustomerId),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Invoice.Total)", "score": -0.6023963194082734, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 6, "beams": [{"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.07180857482287804, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.10452215156301625, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2096641054767476, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.21995585449692112, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2605022987773269, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2745749956361192, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2951767593692034, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.29894716104234054, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.29962799471085105, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.302355007698981, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.30917136245099136, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)", "score": -0.3238913192228059, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3245970468887288, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3248869431380143, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount spent on MPEG audio file tracks?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.33166073778247873, "correct_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 7, "beams": [{"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.04632266408492766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.11201392867429696, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2516796873292468, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.2561818767846013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.3218731413739706, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.36426167949771837, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.3821376817024503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.39411055204101864, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Customer.Email,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.40634036111067656, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Album),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.416045971816638, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.44782894629181963, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.4518078899219504, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>=,2509409), Artist.Name),Artist.Name))", "score": -0.4539323647339006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,2509409), Artist.Name),Artist.Name))", "score": -0.4643978251810402, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "Are there no artists that created tracks big 2509409 bytes ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Customer.Email,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,2509409), Artist.Name),Artist.Name))", "score": -0.4720316257000459, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,=,2509409),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 8, "beams": [{"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.07014357127942196, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.11800995216895833, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1776695280778008, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.194695426617608, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.29569752343528294, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30094081750377494, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))", "score": -0.30611164317326894, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.34699411463746943, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.35284069672038293, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.37729197228572, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.4159052629864831, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.416811165234571, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.42850332457914303, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Employee.BirthDate,<,10317185), Playlist.Name),Playlist.Name))", "score": -0.4298368080475905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}, {"orig_question": "On which playlists are tracks that are smaller than 10317185 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,<=,10317185),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.43293117066345765, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<=,10317185), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 9, "beams": [{"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.04855618820731062, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.16278588250936263, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.19290665658794695, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2087244593409794, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), InvoiceLine.UnitPrice),Invoice.InvoiceDate))", "score": -0.25433088951419835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.2557330480182788, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.Total),Invoice.InvoiceDate))", "score": -0.2590461479552676, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2759238891586377, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2772782890060124, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.29059309001447237, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2933667630802023, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3025116012399803, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30528003106861723, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.3184287845181685, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the dates of purchases of MPEG audio file format tracks?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Customer.City))", "score": -0.32209355744866486, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 10, "beams": [{"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.10033280081370322, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.Phone))", "score": -0.268310010947971, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.HireDate))", "score": -0.34751661173322645, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.City))", "score": -0.3643499115041777, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.HireDate),Employee.City))", "score": -0.4028762677244231, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.PostalCode))", "score": -0.4439816033027455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.519382426098673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.PostalCode),Employee.City))", "score": -0.5297160842947051, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.Phone))", "score": -0.5323271216384455, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.HireDate),Employee.Phone))", "score": -0.5708534778586909, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6051110271855578, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.Phone),Employee.HireDate))", "score": -0.611533722423701, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6220342605865881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6224156707085058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}, {"orig_question": "Which city does our employee with fax number +1 (403) 262-3322 come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))", "score": -0.6250611632622167, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-3322), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 11, "beams": [{"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.024423876184300752, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Phone),Customer.City))", "score": -0.43598345700957, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.State),Customer.City))", "score": -0.47434125129439053, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Phone))", "score": -0.5176869969473046, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Employee.HireDate),Customer.City))", "score": -0.5612376410172146, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Fax),Customer.City))", "score": -0.5983500558540982, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.6376325656783592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Invoice.BillingCity),Customer.City))", "score": -0.6435512978241604, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.PostalCode),Customer.City))", "score": -0.6647500473663968, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.State))", "score": -0.6806455593214196, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.Company),Customer.City))", "score": -0.7063750702545804, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.725206928433181, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.PostalCode))", "score": -0.7320889573202294, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+1 (520) 622-4200), Customer.City),Customer.City))", "score": -0.7352663447272789, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}, {"orig_question": "In which city does the customer with the phone number +1 (520) 622-4200 live?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.Fax))", "score": -0.7359234433279198, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (520) 622-4200), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 12, "beams": [{"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))", "score": -0.0952864784417341, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.14806517889394621, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15498666171914896, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.16684038070554705, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))", "score": -0.22353091021055074, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.238873382037517, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.25423519315596727, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.25441109025691283, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.26050762884609113, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.26355610965612963, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2683466269651654, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.27167862362255174, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28356776110138776, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,3,Raj Bhavan Road),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.28445059898198866, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}, {"orig_question": "What genres do the tracks sold to the address 3,Raj Bhavan Road have?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,3,Raj Bhavan Road),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.29301680447103784, "correct_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingAddress,=,3,Raj Bhavan Road), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 13, "beams": [{"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.0898073889847021, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11885491807711836, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1547948923978982, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18118215593450146, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19694138958404275, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti), Invoice.InvoiceId),Invoice.Total)", "score": -0.20164857279025572, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20651456669316606, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2155991619927764, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21712213025528132, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22610244539355354, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23490453047076587, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2473876876546411, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2569374703650024, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2708444932215926, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total sum of invoices for tracks not produced by Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27967151035043203, "correct_code": "sum(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Chicago Symphony Chorus, Chicago Symphony Orchestra & Sir Georg Solti),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 14, "beams": [{"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.014883481064316584, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.42780786157163675, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.5870092691438913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.6207204997590452, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.6689988174157406, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.7221610130327463, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.TrackId),Track.UnitPrice)", "score": -0.7392406674158419, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.7725777210253, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.8148293079393625, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "sum(distinct(filter(getData(Track),Track.Bytes,>=,6252071), Track.TrackId),Track.UnitPrice)", "score": -0.8788614006992671, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,6252071), Track.UnitPrice),Track.UnitPrice))", "score": -0.881528013949719, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Album.Title))", "score": -0.8845543662428099, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.Composer))", "score": -0.9386579791425902, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.Bytes))", "score": -0.9563019076704222, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the track with the size of 6252071?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.Composer),Track.UnitPrice))", "score": -0.9931938806512335, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,6252071), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 15, "beams": [{"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.09050293636785221, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.16421263344162368, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.18690161537888395, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.212738861928795, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.23087437363716817, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2606113124526554, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2631611574981379, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29350844230254663, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Composer,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.32656112001216553, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,!=,Jazz),Track.Bytes),Album.Title))", "score": -0.3303767479211198, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33687085457190935, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.3468752535936592, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3578250481082232, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Genre.Name,!=,Jazz),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3595598365091696, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}, {"orig_question": "Which album, that is not jazz, contains the biggest existing track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,!=,Jazz),Track.Milliseconds),Album.Title))", "score": -0.36501076530203247, "correct_code": "done(extractValues(max(merge(filter(getData(Genre),Genre.Name,!=,Jazz),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 16, "beams": [{"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.19754443281326878, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.20153971182959238, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2369196514719012, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.2628417976618279, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.2677516421141767, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.26797470133006057, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2695651650020832, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.274475009454432, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Jay Kay), Track.Name),Track.Name))", "score": -0.2978178909856121, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.3018131700019357, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.3131544101789321, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Jay Kay), Track.Name),Track.Name))", "score": -0.3198777605971372, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,!=,Jay Kay), Track.Name),Album.Title))", "score": -0.32124065501791116, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,Jay Kay), Track.Name),Track.Name))", "score": -0.3237029255754747, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks not composed by Jay Kay?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Jay Kay), Track.Name),Album.Title))", "score": -0.32523593403423473, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.Composer,!=,Jay Kay), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 17, "beams": [{"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.029756501271191862, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.17653427544259087, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.25437830454813914, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.288216265766433, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Alternative),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3551888099728982, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3633753767064104, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative),getData(InvoiceLine),Track.TrackId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3721689005807656, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.BillingPostalCode,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4204359549859465, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4204525030309205, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.Milliseconds),InvoiceLine.UnitPrice)", "score": -0.4246400291389562, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.427626713590868, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.43005439525670214, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Alternative), Track.Composer),InvoiceLine.UnitPrice)", "score": -0.4625418398931616, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4661462170532436, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}, {"orig_question": "Wht is the average unit price of tracks that belong to the Alternative genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,!=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4718796872823985, "correct_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Genre.Name,=,Alternative), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 18, "beams": [{"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.23861182435667502, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.24574532381255607, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.2640792038809742, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.28081711641400026, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.2814182916144835, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2831189851687218, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Bytes))", "score": -0.2886613457817264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Invoice.BillingAddress))", "score": -0.29579484523760746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.29867876337956717, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Bytes))", "score": -0.2997726421755184, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Bytes),Track.Bytes))", "score": -0.30338096075218984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Milliseconds))", "score": -0.30472806208330044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.3058122628354482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Invoice.BillingAddress))", "score": -0.3069061416313994, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there any orders of tracks from the Comedy playlist for which we do not have the customer's billing address?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Comedy),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Invoice.BillingAddress))", "score": -0.3079469165000101, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Comedy),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 19, "beams": [{"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.07697705582540948, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.1942449028865667, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.4356380070821615, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Album.Title))", "score": -0.46026471753430087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Email),Customer.Fax))", "score": -0.4774914200679632, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.5262310768739553, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Country,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.5759561325685354, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Fax),Album.Title))", "score": -0.5775325645954581, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Canada), Customer.Email),Customer.Fax))", "score": -0.5947592671291204, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5960454448123366, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.6519621874467703, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.LastName),Customer.Fax))", "score": -0.6647581274883123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.PostalCode),Customer.Fax))", "score": -0.6866354759113165, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Employee.Fax))", "score": -0.6884125818760367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}, {"orig_question": "Which are the fax of the customers from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Canada), Customer.Fax),Customer.Fax))", "score": -0.7129591371194692, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Canada), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 20, "beams": [{"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.16052375127588628, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.23205671371691353, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.24706788347684172, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.26025957187821497, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.28563085860768167, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2947145561565294, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.2980218586985633, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.31860084591786897, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3412168324098707, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3465998147523243, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.35867342268329855, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.359968468165473, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3675699252583518, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes)", "score": -0.37280839656833553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}, {"orig_question": "How many bytes do the tracks composed by Ralph Vaughan Williams have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))", "score": -0.3770063532644103, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,Ralph Vaughan Williams), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 21, "beams": [{"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.16190784691148874, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.19516431159983616, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2221709061220444, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2373179507297109, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.24585686994876588, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.26100391455643235, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.271212561411813, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(Genre),Genre.Name,<=,Comedy),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3000320306939878, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3044690261001604, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.307921813678067, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,<=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3150416704247157, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Milliseconds,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32025306134976295, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Composer,<=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32306884559619636, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3316077648152514, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity of invoices of tracks with a unit price smaller or equal than 0.99 and in the genre \"Comedy\" ? ", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),InvoiceLine.Quantity,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<=,Comedy), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3387276215619001, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Comedy),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<=,0.99), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 22, "beams": [{"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.12193564353765396, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.15624225387930557, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Album.ArtistId),Artist.Name))", "score": -0.3449830828530443, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.LastName),Artist.Name))", "score": -0.35135364437902383, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Employee),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3651858227358487, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3752001035649001, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Track.AlbumId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.37663946298261497, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.38210192358600403, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Album),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.3941072941869109, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.39635923990306526, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.PostalCode),Artist.Name))", "score": -0.41464773491338636, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Artist.Name),Artist.Name))", "score": -0.4173615865744921, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.4222717879034881, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(getData(Artist),Artist.Name,=,None), Album.ArtistId),Artist.Name))", "score": -0.4272129948276415, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "what are the names of the artists in this dataset?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Artist.Name,=,None), Employee.Phone),Artist.Name))", "score": -0.42954647875160257, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 23, "beams": [{"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.06995085595764798, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1525565944793551, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.15532648712420855, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.22895514048668789, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2297037091769035, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23031482340169118, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25602033660799695, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2617413550202621, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.26631169318052617, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.26995715333690845, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2719407154498783, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27459596575768397, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2779162719100067, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected MPEG-4 video file), Invoice.InvoiceId),Invoice.Total)", "score": -0.2992513576855957, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total value of invoices containing tracks of protected MPEG-4 video file format?", "inferred_code": "sum(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected MPEG-4 video file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.316832979788574, "correct_code": "sum(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected MPEG-4 video file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 24, "beams": [{"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.09752528866487228, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.15140729157495283, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.1605483093851066, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.17590757753251055, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.202096710114499, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.2192934368680145, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2240953391075301, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22624848594195485, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.23577955547860538, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2432781258036437, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24690883586048837, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.LastName,=,Johnson), Track.TrackId),Track.UnitPrice)", "score": -0.27212810085139477, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2726877506778969, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Johnson),getData(Track),Customer.CustomerId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.30615301057968847, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the summed unit price of the tracks sold by the employee with the last name Johnson?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.LastName,=,Johnson),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.31241279965831953, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.LastName,=,Johnson),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 25, "beams": [{"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.1873413161010808, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.21315260416188625, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.23835259639023948, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2491692665611559, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.25679271915800417, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2654694340034575, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Genre.GenreId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.26576199880256385, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2902447277357022, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.2923332892576264, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3060860344984883, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3078040275529902, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3095392509079837, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),Genre.GenreId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.31648070867145073, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.3189633076840549, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "To what genres belongs Alanis Morisette's music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,PlaylistTrack.PlaylistId),Playlist.Name,=,Alanis Morissette), Genre.Name),Genre.Name))", "score": -0.31967930318565496, "correct_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Alanis Morissette),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 26, "beams": [{"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.13629537882591208, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.2169166551938165, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Track.Name))", "score": -0.2468520775480329, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.3089653602876546, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.31677300555461385, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.317378022224182, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Album),Track.AlbumId,Album.AlbumId), Track.Milliseconds),Album.Title))", "score": -0.3206610141931329, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Milliseconds),Album.Title))", "score": -0.3274733539159373, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.33185104608886107, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Track.Name))", "score": -0.3428624723571389, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Track.Name))", "score": -0.3516513773703742, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Track),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.35195523854292415, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.35605826694612663, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Alternative & Punk),getData(Track),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.36036790047945155, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What's the number of tracks invoiced that don't belong to the genre Alternative & Punk?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.36171508889201437, "correct_code": "sum(distinct(merge(merge(filter(getData(Genre),Genre.Name,!=,Alternative & Punk),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 27, "beams": [{"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.011378108593589335, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8113137642034487, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8570695966435806, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9222261262426179, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.923832013673695, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.941745383785598, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9448223660877526, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -0.9802900616632609, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -1.041965979563194, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.0557876983330987, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.0686527635134468, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -1.0771482113999657, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.1228508195291471, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1740396739949335, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists in our database that do not have a name?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.239508271855788, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 28, "beams": [{"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.11498944563186245, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.1768712886828151, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.18320066628851825, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name),Album.Title))", "score": -0.24904610803604102, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Bytes),Album.Title))", "score": -0.29033302914021164, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.2941221976230479, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2952749502841068, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Album.Title))", "score": -0.31574006472800703, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.31825405852741734, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Bytes),Album.Title))", "score": -0.35635510282512445, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))", "score": -0.35904452391590136, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.3876766706723323, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Album.Title))", "score": -0.3935858063564506, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Purchased AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Milliseconds),Album.Title))", "score": -0.3999519554612686, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}, {"orig_question": "Which album has the lognest track in the Purchased AAC audio file format?", "inferred_code": "done(extractValues(min(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),InvoiceLine.Quantity),Album.Title))", "score": -0.41389358845187363, "correct_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Purchased AAC audio file),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 29, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.0735265030917343, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.11598655243355527, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15001074904535433, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18165494610965077, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.18411596680515022, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2016685885477304, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21987025751188358, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Aisha Duo),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22178295641434315, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22594359173655915, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23845829932411894, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2410317667729448, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24655334293993403, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24886745191516296, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Aisha Duo),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2553218124803138, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album of the artist Aisha Duo?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.25827831925338324, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Aisha Duo),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 30, "beams": [{"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1768637665472265, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19479916134143052, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.21953883783659178, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.22128017806048886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.23625120132389588, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2420987684336664, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.24484378111810656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.25309035194368334, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2599100915362291, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26752330001333174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.26771495094155523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.28538224337375084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2982697299871188, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2988181809498365, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which billing postal code did we send invoices after 2009-10-07 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.29884825119738523, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-10-07 00:00:00), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 31, "beams": [{"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.09116670585282442, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.16513541618018404, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.17997602626693635, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.19191721239975165, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.21970734911305578, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22149368459669233, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.23673435995117692, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.27133848967064655, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28718993176934615, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3018794174199761, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3063314514378357, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.31285614800040257, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3146042827338398, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Science Fiction),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.35093554694455087, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}, {"orig_question": "Which albums have tracks from the genre Science Fiction?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.3595508125862712, "correct_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 32, "beams": [{"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.12408630823476363, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.14295303515284086, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.14525613919659028, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.14724949292442674, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.23751818116313453, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.25223599686398746, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.2734058278258141, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.29930279870682525, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.30359925647841113, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))", "score": -0.3147628367317295, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.35708121648976276, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.3696577570570435, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.37082799077867434, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3782510474515894, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}, {"orig_question": "On which album is the biggest track that is not of the media type AAC audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,!=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3868400568222052, "correct_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,AAC audio file),Track.Bytes),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 33, "beams": [{"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.33742863142503615, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3465053697836881, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3635158232960078, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.36885193056126575, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.37322895046018223, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.37777999535374357, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3886099519695979, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.39299977810531983, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.39557551123775986, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4021577983008228, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.4070107503370896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.41469714384056955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.41534633888289746, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.4261801552316073, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Are there any customers that purchased the UB40 albums?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,UB40),merge(getData(Album),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Genre.Name),Customer.LastName))", "score": -0.42678933316223444, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,UB40), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 34, "beams": [{"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.10326358578051058, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.15399557336144018, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.17945391284879791, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.1834073857356759, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.218039607347365, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.23722290614955963, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.23847072986181939, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24377558130501675, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2546631622262581, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2609549141327744, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111), Genre.Name),Genre.Name))", "score": -0.26658416830591425, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27149389486562797, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2853326214674337, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2866908880904261, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Tracks of what genre have customers with the postal code 94040-111 ordered?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,94040-111),getData(Track),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29722986882327973, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,94040-111),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 35, "beams": [{"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.0560276455253188, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.22699642395673436, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.4666759700521652, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4841167780577962, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.501067761611921, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5469485244721, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5604915042070298, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5777906051570845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5817267022102897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5953200025947475, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6111834974035446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.CustomerId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6126191035448022, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,2009-01-03 00:00:00), Invoice.InvoiceDate),Customer.City))", "score": -0.6376447484835808, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.654456023406965, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "which are the cities with an invoice date since 2009-01-03 00:00:00 have invoice?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,2009-01-03 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.6550855564892117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2009-01-03 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 36, "beams": [{"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.2847633492714221, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.31534331439592767, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.City))", "score": -0.41711327286120087, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -0.48707875750185325, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.5176587226263588, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.State))", "score": -0.5209461278887595, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.5487624916713685, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Email))", "score": -0.5661293808620109, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Fax))", "score": -0.5967093459865165, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.City))", "score": -0.619428681091632, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.6857508065559212, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -0.6984793044517897, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.PostalCode))", "score": -0.7198176615251998, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.State))", "score": -0.7232615361191905, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "how many different citys exist in the dataset customer?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Employee.Title))", "score": -0.728397107075095, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 37, "beams": [{"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.10110885446478826, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.1359953117979146, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.137535060872205, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.15517171857253934, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.16308221607307458, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16648788468438455, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.18476917908865462, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.1908182406939015, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.19248002151896562, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), None),None)", "score": -0.19588990130893202, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.22192311648104274, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)", "score": -0.22638240432225443, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Deep Cuts),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24707865372637877, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.25502027186985293, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average of total invoices of tracks which occur in the playlist Classical 101 - Deep Cuts?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Deep Cuts),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2605385549573014, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - Deep Cuts), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 38, "beams": [{"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.031730411920010575, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.FirstName))", "score": -0.7161259761849367, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.LastName))", "score": -0.7608229194954257, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.LastName))", "score": -0.8334537411766838, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Artist.ArtistId))", "score": -0.8397774838500945, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.PostalCode))", "score": -0.8773612278296375, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.LastName))", "score": -0.8835065593476191, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Employee.LastName))", "score": -0.8888561975394502, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))", "score": -0.9074194934918316, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.963514728439457, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Genre.GenreId))", "score": -0.9683300657048489, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Employee.LastName),Customer.LastName))", "score": -0.9925739727090577, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Genre.Name))", "score": -1.0043060123043892, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), MediaType.Name),Customer.LastName))", "score": -1.0156632251554945, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}, {"orig_question": "How many customers with different last names are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Album.Title))", "score": -1.0187685310426955, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 39, "beams": [{"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2452863947428341, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.2606264770902271, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3486596242464657, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.3639997065938587, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.3820458025611515, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3845645085848446, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Employee.Country),Invoice.BillingCountry))", "score": -0.3999045909322376, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.4396264449633236, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Employee.Country),Employee.Country))", "score": -0.45496652731071663, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Customer.Country),Invoice.BillingCountry))", "score": -0.481246647325861, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.4854190320647831, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,QC), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.521323916403162, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,QC), Invoice.BillingCountry),Employee.Country))", "score": -0.5429996744669552, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5445453421152706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "for which country is the state abbreviation QC", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Customer.Country))", "score": -0.549390365270483, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,QC), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 40, "beams": [{"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1459639118047562, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21024816939552693, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.2815189332695809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.3458031908603516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.454744708630642, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.45555102908929257, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4662031055422631, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5190289662214127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5198352866800633, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5304873631330338, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.PostalCode))", "score": -0.5567702063353863, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Employee.City))", "score": -0.5736309298308697, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Artist.Name))", "score": -0.5887666949065533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5911060505541172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which City does not have a billing address at Calle Lira 198?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,Calle Lira, 198), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6017581270070878, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Calle Lira, 198), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 41, "beams": [{"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.019957702272222377, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.FirstName),Employee.Phone))", "score": -0.5215320248535136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.537630820312188, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.City),Employee.Phone))", "score": -0.5815916318824748, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.5881951094052056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.5897659302136162, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.FirstName))", "score": -0.6077747451054165, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6227017879864434, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.6491261959454278, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.PostalCode),Employee.Phone))", "score": -0.6794330139091471, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Customer.Phone))", "score": -0.6938487397419522, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Customer.Phone),Employee.Phone))", "score": -0.6991860527923563, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.City))", "score": -0.7198384510265896, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Artist.Name))", "score": -0.7485817180859158, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employee with the fax number +1 (403) 262-6712?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))", "score": -0.7543318510433892, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,=,+1 (403) 262-6712), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 42, "beams": [{"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.0448610145807491, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.23873245326587836, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Invoice.BillingPostalCode))", "score": -0.25722886702392184, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,>,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.29482176886624023, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.LastName),Customer.PostalCode))", "score": -0.32351774831839863, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.32641359020170635, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.34341775834256816, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.34441124420600805, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Employee.PostalCode))", "score": -0.35225372364384866, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Track.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.354481863703022, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.36276525050442504, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.LastName))", "score": -0.3690751135510486, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.Company),Customer.PostalCode))", "score": -0.36918410998929513, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,InvoiceLine.UnitPrice),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3747481104981543, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the distinct postal codes of customers that bought tracks which cost 99 cents?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Employee.PostalCode),Customer.PostalCode))", "score": -0.37924357965023026, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 43, "beams": [{"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1743870793647382, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18264144956600056, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.183985786425844, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.1842234720372759, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.19709605602316038, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.19979747610026757, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.20163009566144174, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.21461867055562742, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.21461890154671787, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23861176560700945, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,IT Staff),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24038106855018987, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24299800745232866, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Country,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.25720064758820516, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.26128668221597917, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the length of all tracks sold by our employees from the IT department? ", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.FirstName,=,IT Staff),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.26787360310194785, "correct_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,=,IT Staff), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 44, "beams": [{"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.07147818484415862, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.20950077583060633, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.221168159628678, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3373209865085903, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.3816013250031789, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(InvoiceLine),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4156078507349746, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4226724713395566, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)", "score": -0.4364193362994467, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1), Track.Milliseconds),Track.Milliseconds)", "score": -0.4641341365942522, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4752997128476181, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,Employee.Country),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.47569849120134944, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,On-The-Go 1),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Milliseconds)", "score": -0.4787432121991797, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Employee.EmployeeId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4848653719346798, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.4880642004714272, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average track length of the On-The-Go 1 playlist?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(Invoice),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.49923033132018957, "correct_code": "avg(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 45, "beams": [{"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.1323314097850255, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,michael@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.15117888783133504, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1836082998584978, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.18528146522276287, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1898938139725472, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2195538268232885, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.22642630663740776, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2282537725017954, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Email,=,michael@chinookcorp.com),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.23848820647789026, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)", "score": -0.2417702052950753, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.24381392629761947, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25009944041166887, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Address,=,michael@chinookcorp.com),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2569163333471139, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2576401145095464, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the summed length of the different tracks sold by the employees who support customers with the email address michael@chinookcorp.com?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,=,michael@chinookcorp.com),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.27157800123442766, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Email,=,michael@chinookcorp.com), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 46, "beams": [{"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.06988271266163792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.LastName))", "score": -0.20484181433857884, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.FirstName))", "score": -0.3255860408389708, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.LastName),Employee.LastName))", "score": -0.4605451425159117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.5609469114424428, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.Email))", "score": -0.5952996829146286, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.Country))", "score": -0.6182982543105027, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Email),Employee.FirstName))", "score": -0.6285796960437438, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Playlist.Name),Employee.FirstName))", "score": -0.6410282453143736, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.FirstName))", "score": -0.6637107928836485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Customer.FirstName))", "score": -0.6889149764174363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T5K 2N1), Employee.FirstName),Employee.LastName))", "score": -0.6959060131193837, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.7028435765387258, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Track.Name))", "score": -0.7216034153098008, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What are the distinct names of the employees that live in T5K 2N1 postal code area?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T5K 2N1), Employee.FirstName),Employee.FirstName))", "score": -0.7230012117506703, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 47, "beams": [{"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.25289922783122165, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.2723186669682036, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.31814414093241794, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Track.Composer))", "score": -0.3375635800693999, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.4046198671494494, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.4240393062864314, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.4297084865902434, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.4698647802506457, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Track.Composer),Employee.PostalCode))", "score": -0.4739675057862769, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Employee.PostalCode))", "score": -0.4806752821241389, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,Edmonton), Invoice.BillingPostalCode),Track.Composer))", "score": -0.4892842193876277, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Track.Composer),Track.Composer))", "score": -0.49338694492325885, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4949533996914397, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Employee.PostalCode),Track.Composer))", "score": -0.5000947212611209, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "In which postal code area do employees live that serviced orders from Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,Edmonton), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5459201952253352, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCity,=,Edmonton),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 48, "beams": [{"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.23319344276963153, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))", "score": -0.23645188090457267, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2421365521414946, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24235003651107706, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25163399087224997, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.25343431526363797, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.262377424635501, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2625909090050835, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27187486336625644, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2723718138000971, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),PlaylistTrack.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.289750194350817, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2911195886068793, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),Album.AlbumId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2950603481142259, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2960474844952672, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many genres are there with a media type MPEG audio file?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2961011875213561, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,MPEG audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 49, "beams": [{"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13790460605984411, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.1412179207838831, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.17622100316782593, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.19542862765212116, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2101346434534361, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.2568773004001429, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2629223131460926, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2728416866852281, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2740933389050944, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2893237364134812, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.290510711223819, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Artist),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2925177972501848, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Smith, Toby),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3085423279500169, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.31635683896519345, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell tracks composed by Smith, Toby?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Smith, Toby),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.32260653141390455, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Smith, Toby), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 50, "beams": [{"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,8624492), Artist.Name),Artist.Name))", "score": -0.3322702205987298, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,8624492), Artist.Name),Artist.Name))", "score": -0.35508066399522925, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Artist.Name))", "score": -0.3643117281639492, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.36823187640670113, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.37520285947126997, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.37746294057542107, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Employee.LastName))", "score": -0.3835841958756359, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.38443392363998985, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.38835407188274185, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Album.Title,=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.39077838577941293, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.39281526004435585, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bark at the Moon (Remastered)), Artist.Name),Employee.LastName))", "score": -0.39673540828710785, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bark at the Moon (Remastered)), Artist.Name),Artist.Name))", "score": -0.3975851360514618, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Album),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Composer,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.40370639135167663, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}, {"orig_question": "What artist names do not have only tracks of 8624492 bytes considering all the tracks belonging to an album different than \"Bark at the Moon (Remastered)\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Name,!=,8624492), Artist.Name),Employee.LastName))", "score": -0.40596647245582773, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.Title,!=,Bark at the Moon (Remastered)),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8624492), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 51, "beams": [{"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))", "score": -0.028673036740656244, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,358761786), Track.Name),Track.Name))", "score": -0.2527493711277202, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,358761786), Track.Name),Track.Name))", "score": -0.4812892514928535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,358761786), Track.Name),Track.Name))", "score": -0.528071257071133, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>=,358761786), Track.Name),Track.Name))", "score": -0.7053655858799175, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,<=,358761786), Track.Name),Track.Name))", "score": -0.7238585490449623, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,<=,358761786), Track.Name),Track.Name))", "score": -0.7320048350557045, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,null,358761786), Track.Name),Track.Name))", "score": -0.7409414972826198, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Milliseconds),Track.Name))", "score": -0.8344805650012859, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.BirthDate,<=,358761786), Track.Name),Track.Name))", "score": -0.8573404092057899, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.Email,<=,358761786), Track.Name),Track.Name))", "score": -0.8607030648454383, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Employee.Email),Track.Name))", "score": -0.8875468186633952, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,358761786), Track.Name),Track.Name))", "score": -0.9479348834320263, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,<=,358761786), Track.Name),Track.Name))", "score": -0.9492039818032936, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}, {"orig_question": "What are the names of tracks that are the size of 358761786 or smaller?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Invoice.Total,>=,358761786), Track.Name),Track.Name))", "score": -0.9560811544833996, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,358761786), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 52, "beams": [{"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Name))", "score": -0.14467749495469068, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.19789318153432342, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.20042751056216998, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.26605150566446467, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))", "score": -0.26858583469231123, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3006414389513138, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.30372442354613916, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3150770415660451, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.31889982381833676, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.32855214722068105, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps),Track.Bytes),Track.Milliseconds))", "score": -0.3308270875150109, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.33333542643306807, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Name))", "score": -0.3529871416311432, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Name))", "score": -0.3602873655598217, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}, {"orig_question": "What is the length of the largest tracks in all the playlists except Classical 101 - Next Steps?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Track.Milliseconds),Track.Milliseconds))", "score": -0.3824305205977943, "correct_code": "done(extractValues(max(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Track.Bytes),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 53, "beams": [{"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.14161884038796183, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.17688950343277726, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1899048919099273, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19127852709905402, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.19298206497065792, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.20496453101611178, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.21135151344884476, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22443527292815502, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2320486522659488, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.23444269376970486, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Toronto),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23752992569286782, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingState,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2462950922546668, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.2532987862129792, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Toronto), MediaType.Name),MediaType.Name))", "score": -0.25875641204084826, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types did we sell to Toronto?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,=,Toronto),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.26897307478793264, "correct_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Toronto), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 54, "beams": [{"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.13834039288485656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))", "score": -0.3898792167165084, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.InvoiceDate))", "score": -0.40909913348878035, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.430267212949403, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.4470538402458729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.47266430941947085, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.4770157889228764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.48945094003646544, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.49380236143068934, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total)", "score": -0.5109229421782532, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total)", "score": -0.5174576408547893, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Invoice.BillingState,=,AB), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.5194128853929443, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.5272124558175033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.InvoiceId),Invoice.Total)", "score": -0.5337471544940393, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}, {"orig_question": "Give me a list of total invoice associated to the AB state?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,InvoiceLine.InvoiceId),getData(Customer),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total)", "score": -0.5416234826742599, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,AB), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 55, "beams": [{"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.0879752799473357, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.11047648811236765, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,!=,8606887), Artist.Name),Artist.Name))", "score": -0.19342694915017333, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,8606887), Artist.Name),Artist.Name))", "score": -0.19416359311676862, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,8606887), Artist.Name),Artist.Name))", "score": -0.2911925218106468, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>=,8606887), Artist.Name),Artist.Name))", "score": -0.3063556387866459, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3817076079576475, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,8606887),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.3870250583426648, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.TrackId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))", "score": -0.40705767648409896, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,null,8606887), Artist.Name),Artist.Name))", "score": -0.41031905060739277, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Track.UnitPrice)", "score": -0.41766513286607476, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,!=,8606887), Artist.Name),Artist.Name))", "score": -0.42298578218941, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Artist.Name)", "score": -0.4337890438396114, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Artist.Name))", "score": -0.4488425999622901, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists have tracks bigger than 8606887 bytes?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<,8606887), Artist.Name),Invoice.InvoiceDate)", "score": -0.4633931256904484, "correct_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,>,8606887), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 56, "beams": [{"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.07999053483672469, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.1336738232321295, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.City))", "score": -0.5324264976925406, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.HireDate))", "score": -0.5359313700146231, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5508299086041006, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Artist.Name))", "score": -0.5564313147015127, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.5666061833298954, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Album.ArtistId))", "score": -0.616390845531896, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.InvoiceDate),Customer.City))", "score": -0.6202894717253002, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6483353806224841, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,>=,4, Rue Milton), Invoice.BillingCity),Customer.City))", "score": -0.7020186690178889, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7471386536753926, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Track.UnitPrice))", "score": -0.7578824970669302, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Customer.Phone))", "score": -0.7807768795437369, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "What is the city associated to the billing address 4, Rue Milton?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Employee.PostalCode))", "score": -0.7825249049610647, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,4, Rue Milton), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 57, "beams": [{"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.006721554836520561, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.5554920294044774, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.6577009301101869, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7001504063870033, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7255339057393313, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.7306202623312045, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7311206672088555, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8018040750925886, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8081087700086468, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8156815791863643, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8177520329152587, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8309905879565777, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8578390639569715, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8731895653996388, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the titles of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Album),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8792925827700309, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 58, "beams": [{"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.PostalCode,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.13998847184304727, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.17075731879169528, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)", "score": -0.17523830366163956, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18880089080617118, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.20607309022304326, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22169719037528673, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22560623127229879, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,=,T2P 5M5),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22876439556377148, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.23805514210067166, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.23931777806119867, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24073118275894517, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24128276665421033, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), None),None)", "score": -0.24784374517096347, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,InvoiceLine.InvoiceId), None),None)", "score": -0.24910638113149047, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold by employees living in an area with the postal code T2P 5M5?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.PostalCode,=,T2P 5M5),merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Invoice.CustomerId), None),None)", "score": -0.25098799175363784, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.PostalCode,=,T2P 5M5), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 59, "beams": [{"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.25314108214462067, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.2670127463546706, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.2691688581860922, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.27675309961648525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.29062476382653524, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.30257942596816334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3115093335323296, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3164510901782133, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(MediaType),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3167948824667609, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3220645736050439, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Artist),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.32538099774237955, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3261914190742485, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(MediaType),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.3306664951764132, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.33170930180771524, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What are the different postal codes of customers which order tracks for a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))", "score": -0.34107028668537975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,=,0.99), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 60, "beams": [{"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.14155539092253933, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.1584598433011749, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.16330493373847066, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.16766592488478055, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.2172494893539861, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21977843935164013, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Email,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.220118175000124, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.AlbumId,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2339679631666295, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.Title,!=,IT Manager),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)", "score": -0.2710492585446442, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.Title,!=,IT Manager),getData(Invoice),Invoice.InvoiceId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),None,None),None,None), None),None)", "score": -0.293311452118133, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,!=,IT Manager), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.2997813378011075, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Fax,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.31135798758457367, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)", "score": -0.32028660623333505, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Title,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.3282624399632092, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the total cost of all the tracks sold by employees with the title other than IT Manager?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Track.UnitPrice,!=,IT Manager),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.33310753040050495, "correct_code": "sum(distinct(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.Title,!=,IT Manager), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 61, "beams": [{"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.14082906908848117, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.17818320952879305, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.187683130138725, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23043116798237775, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Track),Album.AlbumId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2593745879960117, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.287307196560672, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,!=,Bicycle Race),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31201283381460465, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31525320884546415, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Track.Composer),Artist.Name))", "score": -0.3299420476879708, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.334299663566117, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.Name,!=,Bicycle Race),getData(Track),Album.ArtistId,Track.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33544983729808836, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Playlist.Name,!=,Bicycle Race),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.33861168044593, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3519770659474803, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.35795964272142655, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}, {"orig_question": "Which artist sings in the shortest track, which is not called Bicycle Race?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Composer,!=,Bicycle Race), Artist.Name),Artist.Name))", "score": -0.3600881231429298, "correct_code": "done(extractValues(min(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,!=,Bicycle Race),Track.Milliseconds),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 62, "beams": [{"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))", "score": -0.07764095568745688, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.State),Employee.State))", "score": -0.16087527328818396, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.State),Employee.State))", "score": -0.43540709966509894, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,Canada), Employee.State),Employee.State))", "score": -0.5304764942495868, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Country),Employee.State))", "score": -0.5328546309629019, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Playlist.Name,=,Canada), Employee.State),Employee.State))", "score": -0.5719167565712269, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Country),Employee.State))", "score": -0.616088948563629, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.Country))", "score": -0.6441926610441442, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Invoice.BillingState),Employee.State))", "score": -0.649617894903713, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.State),Employee.State))", "score": -0.6576082085975941, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingAddress,=,Canada), Employee.State),Employee.State))", "score": -0.6606158589729603, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Email,=,Canada), Employee.State),Employee.State))", "score": -0.661627528608733, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.HireDate))", "score": -0.6641972911329503, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,Canada), Employee.State),Employee.State))", "score": -0.6850042914757069, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}, {"orig_question": "In which states do employees who work in canada live?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.State))", "score": -0.6862872088113363, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.State),Employee.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 63, "beams": [{"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.036501046359262546, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Country))", "score": -0.3155068718788243, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.3873751127121068, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.Country))", "score": -0.4102445804473973, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6028558324051119, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.Address))", "score": -0.6142678224441624, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6253361765720911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6415462428431056, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingAddress),Invoice.BillingCountry))", "score": -0.6602071831894136, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingAddress))", "score": -0.6663423740264989, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6986478630878992, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7027530733921594, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Employee.State))", "score": -0.7259216272232152, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Customer.Country),Invoice.BillingCountry))", "score": -0.7341144989204622, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "Which is the country with the billing postal code 12227-000?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Customer.FirstName))", "score": -0.7403880321380711, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,12227-000), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 64, "beams": [{"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.03712848629251556, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.2222392207961216, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.27438926211407966, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Name))", "score": -0.31199587248648375, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.33710280197641146, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3401030805583681, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.35394378111314845, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Milliseconds),Track.Name))", "score": -0.35616825855957857, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Bytes))", "score": -0.3914124192938269, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4047994203078091, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Heavy Metal Classic), Track.Name),Track.Name))", "score": -0.4078724338215108, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Heavy Metal Classic), Track.Bytes),Track.Name))", "score": -0.4252737547542708, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.4259703123726644, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(Playlist),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.4289456764767529, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are part of the Heavy Metal Classic playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Milliseconds),Track.Name))", "score": -0.4348952758986618, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Heavy Metal Classic),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 65, "beams": [{"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.1145646481633478, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.14708840961829234, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.165719742788906, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Genre.Name),Album.Title))", "score": -0.18854876117740083, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Name),Album.Title))", "score": -0.23475722854504458, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Album.Title))", "score": -0.24422157068675587, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Track.Composer),Album.Title))", "score": -0.26648168356491714, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Genre.GenreId), Genre.Name),Album.Title))", "score": -0.2711912476225329, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2719608828545794, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3028143715607159, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening),getData(Album),Track.AlbumId,Album.AlbumId), Track.Name),Album.Title))", "score": -0.3053085797887352, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Genre.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3124904821562446, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))", "score": -0.3126843184411494, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.32261233382393983, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}, {"orig_question": "Which albums are from the genre Easy Listening?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Easy Listening),merge(getData(Track),getData(Genre),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId), Track.Composer),Album.Title))", "score": -0.3353381330156604, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Genre.Name,=,Easy Listening), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 66, "beams": [{"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.14074948615442498, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.173357318408949, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.17381075670527402, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.20641858895979806, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2290339109305405, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26164174318506456, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.26209518148138955, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2683550138299391, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.27705371518559585, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.2923597079892531, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.2947030137359136, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3009628460844631, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3014162699828275, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.3249675258458165, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "Find the billing address of the invoices for buying the tracks that does not belong to the Genre name Soundtrack.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Genre.Name,!=,Soundtrack),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingPostalCode),Invoice.BillingAddress))", "score": -0.32542096414214156, "correct_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,!=,Soundtrack),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 67, "beams": [{"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.BillingPostalCode))", "score": -0.23741752217210887, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Track.Composer))", "score": -0.25746620009340404, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.34135102043546794, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3440049992004788, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Track.Composer))", "score": -0.36405367712177394, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.38280142406620143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3842108876506245, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Track.Composer))", "score": -0.4028501019874966, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.44793849746383785, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingAddress),Invoice.BillingPostalCode))", "score": -0.449163670937196, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingAddress),Track.Composer))", "score": -0.46921234885849117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4867349223295605, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingPostalCode),Invoice.InvoiceDate))", "score": -0.4907983646789944, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.5295947895447171, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "From which BillingStates are the invoices except from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,New York), Invoice.InvoiceDate),Employee.PostalCode))", "score": -0.5432271988192952, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,New York), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 68, "beams": [{"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16179658303104413, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.17397094832751261, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19474184929485822, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.19960480299348315, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.20551417887334442, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2149608809540939, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21551659090110203, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2324914084645867, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23432381048718834, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2465041114999257, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2497448156220616, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26076458326929053, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26531965911634764, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,Protected AAC audio file), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27068073411159077, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average invoice total for the media type Protected AAC audio file?", "inferred_code": "avg(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2812880540451611, "correct_code": "avg(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 69, "beams": [{"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.Email))", "score": -0.1721966814075131, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,BC), Employee.Email),Employee.Email))", "score": -0.292158658412518, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,BC), Employee.Email),Employee.Email))", "score": -0.30866175403934903, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,BC), Employee.Email),Employee.Email))", "score": -0.3096221189771313, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.35915987825137563, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.4791218552563805, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.BirthDate))", "score": -0.4891788314853329, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.49562495088321157, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,BC), Employee.BirthDate),Employee.Email))", "score": -0.49658531582099386, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Track.Bytes),Employee.Email))", "score": -0.5043914232228417, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Email),Employee.Title))", "score": -0.524116928485455, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,BC), Employee.Email),Employee.Email))", "score": -0.56198425104958, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Address),Employee.Email))", "score": -0.5940124306653161, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,BC), Employee.Email),Employee.BirthDate))", "score": -0.6091408084903378, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}, {"orig_question": "What are the emails of employees that do not work with customers in British Columbia?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,BC), Employee.Title),Employee.Email))", "score": -0.61413972711307, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 70, "beams": [{"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.02477525496007126, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.7100661151969782, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.8735535985470234, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Phone))", "score": -0.958175323510773, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.9746419443942596, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.0201767551763783, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.BillingCity))", "score": -1.035612248339295, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.City))", "score": -1.0802906618918022, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -1.1026765128526343, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -1.1082096220920346, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.State))", "score": -1.1108741547245071, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.City))", "score": -1.1808479435646655, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Country))", "score": -1.1932748362094687, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "sum(distinct(getData(Customer), Customer.City),Invoice.CustomerId)", "score": -1.2312081313456524, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}, {"orig_question": "How many different customer cities are there ?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Invoice.CustomerId))", "score": -1.2517848928035076, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 71, "beams": [{"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.1534694125898809, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15422326324609764, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.15535937462023808, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2709042483066737, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27165809896289045, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2727942103370309, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2925207561152985, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Science Fiction), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3114084316657861, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), Invoice.BillingAddress),Invoice.Total)", "score": -0.3171665060159539, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), Invoice.BillingAddress),Invoice.Total)", "score": -0.3179203566721707, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), Invoice.BillingAddress),Invoice.Total)", "score": -0.31905646804631116, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3213891653511763, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.GenreId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32214301600739303, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.GenreId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.32327912738153347, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the total amount billed in the Science Fiction genre?", "inferred_code": "sum(distinct(merge(filter(getData(Genre),Genre.Name,=,Science Fiction),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.PlaylistId,Track.GenreId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3582768800149936, "correct_code": "sum(distinct(filter(merge(merge(getData(Genre),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,Science Fiction), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 72, "beams": [{"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.11100463304569944, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.16457920634448886, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.19807819657315323, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.21366516936103827, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.23512800237804457, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.UnitPrice), Track.TrackId),Track.Bytes)", "score": -0.23739007062554748, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Customer),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.24716415958970261, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.25267055446624037, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.25718356882461785, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.2889120826959566, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.TrackId),Track.Bytes)", "score": -0.29068256372277, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)", "score": -0.30598834433907524, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Customer.SupportRepId), Track.TrackId),Track.Bytes)", "score": -0.30881822960277633, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Ton Koopman),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.31253370078428827, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the average size of tracks by Ton Koopman?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Ton Koopman),getData(Track),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.Bytes)", "score": -0.33573401792676183, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,=,Ton Koopman), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 73, "beams": [{"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.2742826128970896, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3098696135706905, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3120309469759377, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.32300170106032094, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.35858870173392177, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.35909394832268937, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3756373069651578, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.38060967451929173, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.39021326181676064, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.3946809489962902, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.4069740739659667, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.4078130364859207, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Name))", "score": -0.41122430763875867, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Bytes))", "score": -0.42435639512838913, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What are the track unit prices for tracks bigger than 11774865?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,!=,11774865), Track.UnitPrice),Track.Milliseconds))", "score": -0.42551539330187227, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,11774865), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 74, "beams": [{"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.10154564256845333, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,Bernard), Customer.Country),Customer.Country))", "score": -0.32175452399133064, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.3247875566321454, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Address),Customer.Country))", "score": -0.4119618157583318, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.4266572813230596, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingState))", "score": -0.4600417609053693, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4993208252716933, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.5051343053356123, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5104360198572104, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Invoice.BillingCountry))", "score": -0.5162494999211295, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Company),Customer.Country))", "score": -0.51679547826825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Address))", "score": -0.5272033805686078, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Customer.Country))", "score": -0.5340535617158103, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))", "score": -0.5398670417797293, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}, {"orig_question": "In which disinct countries live the customers whose last named is Bernard?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Bernard), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5436009114230863, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Bernard), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 75, "beams": [{"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.134920504897309, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.1617391379768378, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2549320692414767, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2817507023210055, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.48137510663218563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5081937397117144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.5628899494404322, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5711790891582496, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.589708582519961, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6143338764304644, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6411525095099933, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.6829015137846, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,>,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6911906535024173, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,S\u00e3o Paulo), Invoice.BillingCountry),Employee.Country))", "score": -0.7018364826435572, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which country is the billing city S\u00e3o Paulo?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Customer.Country))", "score": -0.7097201468641288, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,S\u00e3o Paulo), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 76, "beams": [{"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.13446343745454215, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.33540265951331794, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.33869338835938834, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.3623008975700941, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.3823479853806312, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.4352305539662584, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Bytes),Album.Title))", "score": -0.4692906885726057, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.48217587983357174, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.48254218404278887, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Track.Bytes),Album.Title))", "score": -0.4854953816102352, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,!=,0.99), Album.Title),Album.Title))", "score": -0.5041367044614162, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.TrackId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.5102509086258483, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice,!=,0.99), Track.Bytes),Album.Title))", "score": -0.516236014439919, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.AlbumId),Track.UnitPrice,!=,0.99), Track.UnitPrice),Album.Title))", "score": -0.5369804124364438, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}, {"orig_question": "What is the cheapest album we have that doesn't cost 0.99?", "inferred_code": "done(extractValues(distinct(filter(getData(Album),Track.UnitPrice,!=,0.99), Track.Name),Album.Title))", "score": -0.5665308484749403, "correct_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 77, "beams": [{"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.08969321120821405, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Employee.Fax))", "score": -0.23753312249027658, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Title))", "score": -0.3003920504852431, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Employee.Title))", "score": -0.4482319617673056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Track.UnitPrice),Employee.Fax))", "score": -0.4818677010043757, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Customer.Fax),Employee.Fax))", "score": -0.48628994841419626, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Customer.Fax))", "score": -0.5237728098436492, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6133201273187296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Track.UnitPrice))", "score": -0.6252316871687071, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Album.ArtistId),Employee.Fax))", "score": -0.6310208739741938, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Edmonton), Employee.Fax),Employee.Fax))", "score": -0.6403075607522624, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.HireDate),Employee.Fax))", "score": -0.6425171198352473, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Phone),Employee.Fax))", "score": -0.6655403079494135, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Title),Customer.Fax))", "score": -0.6716127211257117, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}, {"orig_question": "What are the fax numbers of employees that do not live in Edmonton?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Email))", "score": -0.6736623087927001, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Edmonton), Employee.Fax),Employee.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 78, "beams": [{"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.05220633198241177, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.13842040907382813, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.14173085019587744, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.16425055595468027, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18704720167400996, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.19497621177449767, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.23381187738825393, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2511492671947946, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2560493333520345, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26016026845825535, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2687096920598014, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.27844937895542904, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.2812162711991633, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28268583436264827, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total amount of money spent on tracks from the playlist Music Videos?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Invoice.InvoiceId),Invoice.Total)", "score": -0.28353697280116774, "correct_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 79, "beams": [{"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.07027610487784841, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Address))", "score": -0.3030882841303537, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Country))", "score": -0.33016463465537527, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.State))", "score": -0.47093936152305105, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.State),Employee.Address))", "score": -0.4823884731486032, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.City))", "score": -0.5454820925697277, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Country),Employee.Country))", "score": -0.5629768139078806, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Customer.Address),Employee.Address))", "score": -0.5666648811056803, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.583765846244205, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Customer.Address))", "score": -0.5889989072784374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.5957421199746022, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.BirthDate),Employee.Address))", "score": -0.598059303159971, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.6042423383660207, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.City),Employee.Address))", "score": -0.6164490646078775, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}, {"orig_question": "Whats the address of our employee with the phone number +1 (780) 428-9482?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (780) 428-9482), Employee.Address),Employee.Address))", "score": -0.667370392508019, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (780) 428-9482), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 80, "beams": [{"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.15066187976360956, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.15257859606639265, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.17318354074802128, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.1732165732382196, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.19495268121135423, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.2186527025480357, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.HireDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.22371809604346932, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.23273358122516966, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24816209505067108, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.BirthDate),Track.Bytes)", "score": -0.24868278065594285, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2576347651082352, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2593467520100919, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.Email),Track.Bytes)", "score": -0.2640617849297001, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2680152370313794, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks sold by employees born before 1962-02-18 at 00:00:00?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,<,1962-02-18 00:00:00),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Employee.Email),Track.Bytes)", "score": -0.2858091325821205, "correct_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.BirthDate,<,1962-02-18 00:00:00),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 81, "beams": [{"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.19936084462350143, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.23254090798150046, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.24371879917384778, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.2711603105182798, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.2768988625318468, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3155182650686261, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3313926195352065, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.34903776765069533, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Artist.Name,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.35559887690501657, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.3645726828932055, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3655491083986822, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCity,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3660802683447656, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.375000557503631, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,None),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.3814088954589928, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much do all tracks cost together?", "inferred_code": "sum(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3822177907437414, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 82, "beams": [{"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.352857931913533, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3620020724300281, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36963130990152193, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,James Levine),getData(PlaylistTrack),Playlist.PlaylistId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.37430688347978525, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3749373489318355, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38031779095832935, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,James Levine),getData(PlaylistTrack),Track.TrackId,Customer.SupportRepId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38159060668860934, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3840814894483306, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3875130491381387, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38946193853418204, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.39171072691982445, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Playlist.PlaylistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.39665718965463376, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.397570921670517, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.40239720797663187, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of a purchase of James Levine tracks?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4042864271261276, "correct_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,James Levine), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 83, "beams": [{"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.03460768173931965, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Invoice.BillingPostalCode))", "score": -0.22787542224228377, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingPostalCode),Genre.Name))", "score": -0.2697088590696152, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,1033 N Park Ave),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.2707868150770315, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.28327102091973655, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,Track.GenreId), Genre.Name),Genre.Name))", "score": -0.30747294605921016, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),merge(getData(InvoiceLine),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.3163662031882605, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.3197962540974996, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.GenreId))", "score": -0.3418392233538761, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Invoice.BillingPostalCode,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.37401868665346444, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Track.Name))", "score": -0.4021183543541383, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.TrackId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.4117557183114482, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Album.AlbumId), Genre.Name),Genre.Name))", "score": -0.4145295441237373, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.415559407819096, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "The customer with the address 1033 N Park Ave has ordered tracks of which genre?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,1033 N Park Ave),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Invoice.BillingAddress))", "score": -0.41692622712522187, "correct_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,1033 N Park Ave),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 84, "beams": [{"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.04537278074007625, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.45777024376248326, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5707669565898306, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5744712682073431, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5885000456309019, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6050447250661122, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6056734218040584, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6222233478542961, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6399564368953674, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6542396865314859, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.656854148533281, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.659704979505408, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6694119400131483, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Track.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6742970150234169, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity on the invoices?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6745871715058027, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 85, "beams": [{"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.20314762004338358, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.21070780323796034, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.24332197084977297, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2484686587772485, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.25088215404434977, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2560288419718253, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2643626584800238, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.26614364141265157, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2737038246072283, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2761178640804401, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2771095115915479, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2836780472750169, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2886430095836379, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2954107257233723, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "In which countries have customers bought an album by artist Accept?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Accept),merge(merge(getData(Album),getData(Invoice),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2958287503747508, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Accept),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 86, "beams": [{"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.1147116162085993, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.1479700319664737, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.Total),Invoice.Total))", "score": -0.14823428407232364, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.15848357907153, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.1692146796756355, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Invoice.BillingState),Invoice.Total))", "score": -0.1697521348495308, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.20190639933101534, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))", "score": -0.20442176664663206, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.21446376176908613, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.InvoiceDate),Invoice.Total))", "score": -0.21617292135103605, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.23093541204084647, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music), Invoice.Total),Invoice.Total))", "score": -0.2352614200602247, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.Total))", "score": -0.2591055592745397, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2606485049533462, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}, {"orig_question": "Are there records of totals in invoices including tracks that are in the playlist 90\u00e2\u0080\u0099s Music?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2640064343680725, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u00e2\u0080\u0099s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Invoice.Total),Invoice.Total))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 87, "beams": [{"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.050444895880848745, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5390307329898136, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.5524926216686318, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.6963445805611481, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.744934688085013, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7648099391687315, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.8372494538773059, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.9229746710342062, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.9232440942397704, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.9412985033431304, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9549540445297137, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.9645038696442481, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.9817545884733173, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Genre.Name)", "score": -1.0340462115562155, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artist names do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),MediaType.Name))", "score": -1.0360586041750954, "correct_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 88, "beams": [{"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.18584309794701898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.2501450855958639, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Track.Name))", "score": -0.25796447242404197, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3068278694807956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3069603330801218, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.31413550450722516, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.Name,=,Classical 101 - The Basics), Track.Name),Album.Title))", "score": -0.31472223881937417, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.3211397282250503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Track.Name),Track.Name))", "score": -0.32853938066354077, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.33388783026808794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Track.Name))", "score": -0.34119546529451744, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3626723889793069, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Invoice.BillingPostalCode),Track.Name))", "score": -0.3695106072484308, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.36998002400573643, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the Classical 101 - The Basics that are nor assigned a genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,Classical 101 - The Basics),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3712623207289667, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 89, "beams": [{"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.18154360536119538, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2066220837316223, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21373000879220386, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.23880848716263078, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2617343822902411, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2688611280846268, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2703846960387427, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.27222283057652175, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27494173594209176, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.286812860660668, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2887776914773223, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Track),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2939207857212496, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2939396133036359, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(InvoiceLine),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.29546318125775173, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the total sum of all orders of tracks from Bebel Gilberto?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Genre),getData(PlaylistTrack),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Bebel Gilberto),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId), Track.TrackId),Invoice.Total)", "score": -0.2973013705841878, "correct_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Bebel Gilberto),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 90, "beams": [{"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13144342263773176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.13151245673539227, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.15270607414115844, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Invoice.BillingPostalCode))", "score": -0.15726221018907094, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.1786001047705711, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18688173649681653, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.18695077059447704, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.1957585071735295, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.19743355560495804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Invoice.BillingPostalCode))", "score": -0.20198969165287053, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Track.Composer))", "score": -0.23103697389377814, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Composer))", "score": -0.23559310994169064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Artist.Name),Invoice.BillingPostalCode))", "score": -0.2404859886373291, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.253686417729858, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Are there no postal codes of invoices of tracks not composed by \"Boston Symphony Orchestra & Seiji Ozawa\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Boston Symphony Orchestra & Seiji Ozawa),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.BillingPostalCode),Artist.Name))", "score": -0.25986294074697974, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Boston Symphony Orchestra & Seiji Ozawa), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 91, "beams": [{"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.055137095831469196, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.2987441400514399, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.33899062671525826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.4210039715731, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingPostalCode))", "score": -0.4815504530893122, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Invoice.BillingCity))", "score": -0.5514405647741114, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Genre.Name))", "score": -0.5917261520849024, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Company))", "score": -0.6011820713506495, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6646110157930707, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6685934642778193, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Customer.Country))", "score": -0.6924607435689722, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.704857502456889, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingCountry),Employee.PostalCode))", "score": -0.7132310549245631, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Genre.Name,=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7201764563546931, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "What countries do invoices get send to, excluding the entries with a billing postal code of 71020-677?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,71020-677), Invoice.BillingPostalCode),Invoice.BillingCountry))", "score": -0.7220641494245683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,!=,71020-677), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 92, "beams": [{"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.12574579239321623, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.1679386176593242, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.18060913402679216, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.2048773633304906, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Composer,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.28813609417693203, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.30699170769097617, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3196412171268382, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Address,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.31965020018111906, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.Name,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.32633385573762713, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Track.Composer,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.3304234955160353, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.33879218147443035, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingCity,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.344130429565846, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.36185505513745025, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Bytes)", "score": -0.37623231158406745, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "Whats the average track size of tracks purchased from 120 S Orange Ave?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,120 S Orange Ave), Track.TrackId),Track.Bytes)", "score": -0.37725333370408687, "correct_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,120 S Orange Ave),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 93, "beams": [{"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.20891786355186867, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.22880786209552464, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.2619916207224012, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), MediaType.Name),Playlist.Name))", "score": -0.27619848274604564, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Track.Name))", "score": -0.2791736241662913, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), MediaType.Name),Track.Name))", "score": -0.2933804861899358, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.30243964618069413, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Playlist.Name),Playlist.Name))", "score": -0.3075901126220188, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Playlist.Name),Track.Name))", "score": -0.324772116065909, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32489861626695227, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Music),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Playlist.Name),Track.Name))", "score": -0.3300475086194881, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.3378864674831299, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Playlist.Name))", "score": -0.3491451986606466, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), MediaType.Name),Playlist.Name))", "score": -0.35209332950677436, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}, {"orig_question": "Which generes are in the playlist Music?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Track.Name),Track.Name))", "score": -0.3550684709270201, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 94, "beams": [{"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.04757295032128615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.22651431022198665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2449723872056317, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.2527466302368655, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.28562810877674566, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3119932965250909, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Employee.FirstName))", "score": -0.3407143245523493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3670164752676624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Employee.Email,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.37548282303868485, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.38126896693527973, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.38174722314240334, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,7068737),Playlist.Name,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.3873123290623831, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.39478518846169813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),PlaylistTrack.PlaylistId))", "score": -0.3951102804990215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists with tracks with a size of at least 7068737 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Customer.CustomerId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,7068737), Playlist.Name),Playlist.Name))", "score": -0.40185635205169495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,7068737),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 95, "beams": [{"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10021145515252712, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.12504888083745416, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.20483758265072072, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.21170587273005093, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.263849757652777, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.28113639844526067, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.28868718333770405, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,<,5064553), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2984376547441701, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,5064553), Invoice.BillingCity),Customer.City))", "score": -0.32225157400929105, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553), Invoice.BillingCity),Customer.City))", "score": -0.3470889996942181, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.35684091200428136, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35854836349914765, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,5064553),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.35928026535378016, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3616205427438119, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "To which cities did we sell a track larger than 5064553 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,5064553),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.38624731463578665, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Bytes,>,5064553), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 96, "beams": [{"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.02604521997818665, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.3806083547005983, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Phone))", "score": -0.510646584449205, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Country))", "score": -0.5442609516958328, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.PostalCode))", "score": -0.5610268442014785, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.5992910014520021, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.LastName))", "score": -0.6003199545721145, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.City))", "score": -0.6476860968450637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.PostalCode),Customer.Company))", "score": -0.6513836593421729, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Country),Customer.Company))", "score": -0.6592220277580054, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.6653762208352418, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Invoice.BillingCity),Customer.Company))", "score": -0.6817296952995093, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Invoice.BillingCity))", "score": -0.7152842013219924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.7249009689603554, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}, {"orig_question": "From which companies are the customers whose email address is not robbrown@shaw.ca?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))", "score": -0.7484803544411989, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,robbrown@shaw.ca), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 97, "beams": [{"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.20531794930612624, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.2564352016610406, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.2614444426558727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.28907484676331613, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.30630420842228273, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.GenreId,Genre.GenreId),Artist.Name,!=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.3237108193801422, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Album.AlbumId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.33439392851658933, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3349024390122753, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Artist.Name,=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.3380135677298895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.34019209911823045, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3452013401130626, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Genre.Name,=,Adrian Leaper & Doreen de Feis), Genre.Name),Album.Title))", "score": -0.3487211804161121, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.3574215574788845, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),Artist.Name,!=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Genre.Name),Album.Title))", "score": -0.36243087406300983, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any albums from Adrian Leaper & Doreen de Feis that are not assigned to any genre?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Genre),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),Genre.GenreId,Track.GenreId), Album.Title),Album.Title))", "score": -0.3658261019421252, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Adrian Leaper & Doreen de Feis),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 98, "beams": [{"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.1116671091050249, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.12573825408803763, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.22718799916796065, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.2364567054721563, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.2391042999335724, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.24125914415097338, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,=,Cupertino), Track.Name),Track.Name))", "score": -0.24202496049198524, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.25579794761625113, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.26986909259926384, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Cupertino), Track.Name),Track.Name))", "score": -0.27094107508609244, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.27135963799222174, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.29203403522655935, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.2949391049413696, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Cupertino), Track.Name),Track.Name))", "score": -0.30610518793867464, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}, {"orig_question": "Which tracks did we sell to Cupertino?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,Cupertino), Track.Name),Track.Name))", "score": -0.3064949721998391, "correct_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Cupertino), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 99, "beams": [{"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.33475259498241133, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.Phone))", "score": -0.4040519106543669, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.46488455395512374, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.Phone))", "score": -0.4655519564421385, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.HireDate))", "score": -0.4798957416412359, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.State))", "score": -0.531069995721642, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Customer.Phone))", "score": -0.5341838696270793, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.HireDate))", "score": -0.5491950573131914, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Customer.Phone))", "score": -0.5956839154148509, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.HireDate),Employee.State))", "score": -0.6003693113935976, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.HireDate))", "score": -0.610695103100963, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.Phone),Employee.State))", "score": -0.6618693571813692, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Employee.State),Employee.Phone))", "score": -0.6928280617702056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Fax))", "score": -0.7441739229189993, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}, {"orig_question": "What is Nancys employee phone ?", "inferred_code": "done(extractValues(distinct(getData(Employee), Customer.Phone),Employee.Phone))", "score": -0.754922568406299, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Nancy), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 100, "beams": [{"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.18265476869653788, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.2454801679566046, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Age Of Innocence), MediaType.Name),MediaType.Name))", "score": -0.26767861580577723, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2685801226053597, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2714145120734936, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30006417409807035, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(PlaylistTrack),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.30202775910676605, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.30568975569955004, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3198945721052514, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.UnitPrice,=,Age Of Innocence), MediaType.Name),MediaType.Name))", "score": -0.3305040150658439, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),getData(Track),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3335118105994767, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3413471453123111, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,=,0.99),getData(PlaylistTrack),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3517312950905437, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.UnitPrice,=,0.99), MediaType.Name),MediaType.Name))", "score": -0.3554745631871025, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are there for tracks named \"Age Of Innocence\" that were sold with a unit price of 0.99 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,Age Of Innocence),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3640957875165421, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.Name,=,Age Of Innocence),InvoiceLine.UnitPrice,=,0.99),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 101, "beams": [{"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.1544427452339259, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.1681270594965711, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<,293041),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.20860102039301726, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.23847049085417898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.25062822183235267, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.27790844697205636, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.287430887860661, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,null,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.29540475984356146, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.30411653068690825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.3210558317094378, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.32695723982988545, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,<,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<=,293041), Playlist.Name),Playlist.Name))", "score": -0.3305782725980424, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.3319595265804673, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Track.Name))", "score": -0.3340241066669525, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there playlists containing tracks that last longer or equal than 293041 milliseconds ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),filter(merge(getData(Track),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,293041),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Milliseconds,<,293041), Playlist.Name),Playlist.Name))", "score": -0.33512129272108154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,293041),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 102, "beams": [{"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.010581303034086886, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.44961856144323953, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.47897884286263964, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5104712695382878, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.539831550957688, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.5479644631222982, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.5842302308956143, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6046277150699098, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6135905123150144, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.InvoiceId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.614508515900825, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingState),Invoice.BillingCountry))", "score": -0.6563613651042033, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.6566684935196463, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.6604948734120626, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.InvoiceDate,<,2009-12-26 00:00:00), Invoice.BillingCountry),Customer.Country))", "score": -0.717871612644826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}, {"orig_question": "To which countries were invoices issued before December 26th 2009?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.7187849149295289, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<=,2009-12-26 00:00:00), Invoice.BillingCountry),Invoice.BillingCountry))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 103, "beams": [{"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.008580787319082392, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.9918876280979237, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Album.Title))", "score": -1.0963301098068723, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Artist), Album.Title),Album.Title))", "score": -1.1165973881226219, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Album.Title)", "score": -1.3274545916432337, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.AlbumId))", "score": -1.3473039513550418, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.AlbumId),Album.Title))", "score": -1.3889800409257482, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Artist.ArtistId))", "score": -1.3941926470183417, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Track), Album.Title),Album.Title))", "score": -1.4418567085703253, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Track), Album.Title),Album.Title)", "score": -1.4570667559643344, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Genre.Name)", "score": -1.4700936376212417, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Customer.Fax),Album.Title))", "score": -1.4840284495271217, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "count(extractValues(distinct(getData(Album), Album.Title),Customer.Fax))", "score": -1.4933103634734721, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),Artist.ArtistId)", "score": -1.497690393806084, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "How many different albums do we have in the database?", "inferred_code": "sum(distinct(getData(Album), Album.Title),InvoiceLine.Quantity)", "score": -1.5641959367561242, "correct_code": "count(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 104, "beams": [{"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.015568162226372806, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.416090392885053, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5081338203513844, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5345570093368847, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.CustomerId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5463543542165555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.5503142309889881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5793454380320018, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.SupportRepId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.5844264694735424, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6175659718971729, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.6213449073538868, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6365525448425603, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceDate,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6400751100158987, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,Customer.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.647193128376897, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingState,=,NS),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Customer.SupportRepId,InvoiceLine.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.6556380871541597, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we send invoices to the billing state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.711035166837064, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 105, "beams": [{"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03003924697657484, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6035274753373245, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.6258018177359905, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.6361580634336772, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.636548962401778, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6469052080994646, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6920633441158601, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.700323684215734, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.7030009332525938, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7112612733524678, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.7847679153031544, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.788749420516167, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7955150599689419, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.8027460716456564, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average expense of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8048232486936399, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 106, "beams": [{"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.11991724701622464, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.15720032523546548, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.18368757533472224, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,<=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2096685447037405, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.26380559646256596, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2719847713385004, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2769301152916486, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.2869481160571675, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Invoice.InvoiceId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3092678495577412, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),InvoiceLine.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.31421319351088944, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,<=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3242311942764084, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.3253476032823857, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.3300911779152504, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,MediaType.MediaTypeId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.3340829390218415, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}, {"orig_question": "What playlists are the tracks more expensive or costing as much as 0.99 on?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Playlist),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.35797234677230627, "correct_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 107, "beams": [{"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.06783018244823324, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))", "score": -0.33784916608055937, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.40556286259015906, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.4801620094331156, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.BirthDate))", "score": -0.48357447686066735, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Address),Employee.Title))", "score": -0.5043705066891562, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5046127922068498, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Email),Employee.Title))", "score": -0.5129032394142996, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB), Employee.BirthDate),Track.UnitPrice))", "score": -0.538569584897099, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,!=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5579771607408475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Track.UnitPrice))", "score": -0.5615479916559707, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5861509307068601, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,AB), Employee.BirthDate),Employee.Title))", "score": -0.5997861175092112, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.BirthDate),Track.UnitPrice))", "score": -0.6201077233971093, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}, {"orig_question": "how ist the employee title of the employee who is from the state of AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.BirthDate),Employee.Fax))", "score": -0.6207369536386977, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 108, "beams": [{"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.33715141195839854, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.3651070992222484, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.36977710211422965, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.3705687462903828, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.3872098161388124, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.39280426556553855, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Customer.City))", "score": -0.3977327893780795, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Customer.City))", "score": -0.3985244335542326, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.40145098739507235, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.40319443644621394, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Customer.City))", "score": -0.4151655034026623, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),Customer.SupportRepId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.41906296045948144, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Customer.City),Invoice.BillingCity))", "score": -0.4206271504707967, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Artist),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.42542995572136966, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}, {"orig_question": "In how many cities had we issued invoices when the unit price of a route was 1.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Customer),InvoiceLine.TrackId,Customer.CustomerId),Invoice.CustomerId,Invoice.InvoiceId),Track.UnitPrice,=,1.99), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.4262215998975228, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 109, "beams": [{"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.18827782019505104, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.22259099936740892, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.2655491637617042, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.Milliseconds),Track.UnitPrice)", "score": -0.5247360423602403, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5557991859710013, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.5901123651433592, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Album),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5949625261670195, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.5984191355878326, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Album),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.6292757053393774, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.6329717098813854, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,None),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.63304567030848, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(getData(Track), Track.UnitPrice),Track.UnitPrice)", "score": -0.654887478657374, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.6880930595151252, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), InvoiceLine.UnitPrice),Track.UnitPrice)", "score": -0.6994096647933109, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price?", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.7224062386874831, "correct_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 110, "beams": [{"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.04716726792853911, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Milliseconds),Album.Title))", "score": -0.13707061031092677, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.18435494394806107, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.25305750809820676, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.277240978660932, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.31002253530924306, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes),Album.Title))", "score": -0.37281155991371395, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes),Album.Title))", "score": -0.4146780885496772, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.43989415251107933, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))", "score": -0.4527646824670285, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),Genre.GenreId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4607792815290268, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.GenreId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.4617485872635874, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,MPEG audio file),Track.Milliseconds),Album.Title))", "score": -0.46913929001298565, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.5016628237377168, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album containing the longest track with the media type MPEG audio file?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file),Track.Bytes),Album.Title))", "score": -0.5076758704659433, "correct_code": "done(extractValues(max(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 111, "beams": [{"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Invoice.Total),Employee.PostalCode))", "score": -0.2322718821676879, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.PostalCode))", "score": -0.325173192765261, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Employee.Address),Employee.PostalCode))", "score": -0.3391483495162277, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.BillingState,!=,BC),Invoice.Total),Employee.PostalCode))", "score": -0.37242535315163616, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.Address),Employee.PostalCode))", "score": -0.3743093142063648, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,!=,BC),Invoice.Total),Employee.PostalCode))", "score": -0.39463331925116474, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Customer.Address),Employee.PostalCode))", "score": -0.406790510859583, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.State),Employee.PostalCode))", "score": -0.4126496745450051, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.CustomerId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.PostalCode))", "score": -0.41755404555364256, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Employee.Country),Employee.PostalCode))", "score": -0.41899108573841193, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC),Invoice.Total),Employee.City))", "score": -0.4191547108080788, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,!=,BC), Employee.Address),Employee.PostalCode))", "score": -0.42901074931696126, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.Address),Employee.PostalCode))", "score": -0.4302727066795033, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.City,!=,BC),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total),Employee.PostalCode))", "score": -0.48725976892071166, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What is the postal code of the employee who is not responsible for Chase and has the billing state BC?", "inferred_code": "done(extractValues(min(merge(filter(getData(Invoice),Invoice.BillingState,!=,BC),merge(filter(getData(Customer),Customer.Address,!=,Chase),getData(Invoice),Customer.CustomerId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total),Employee.PostalCode))", "score": -0.5105487779592554, "correct_code": "done(extractValues(distinct(filter(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,!=,Chase),Invoice.BillingState,=,BC), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 112, "beams": [{"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Country),Customer.Country))", "score": -0.2034309188045642, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.2056849597938708, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.2629107477638501, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.36354609131597676, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.3915418979433188, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.424707143920533, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.48142748226347293, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Genre.Name,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5059147584064722, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.509423288890815, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.523382494752727, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId),Genre.Name,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5339105650338142, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,Peeters), Invoice.BillingCountry),Customer.Country))", "score": -0.5425885348680292, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.547281876198735, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,Peeters),merge(getData(Track),getData(Invoice),Invoice.CustomerId,Customer.CustomerId),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingCountry),Customer.Country))", "score": -0.5486329276613561, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}, {"orig_question": "From which different countries are customers with the last name Peeters?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))", "score": -0.5501135138009446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Peeters), Customer.Country),Customer.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 113, "beams": [{"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.14932016619790073, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.1545161497587004, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.15647129538471566, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.16085258692589857, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),Track.UnitPrice)", "score": -0.200170985937803, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2129159393062912, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,IT Staff),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21753410110727095, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,IT Staff),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.22377121635901073, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.22827264844579087, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,IT Staff),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.22913437570672873, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Playlist.Name,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23194360526274943, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCountry,=,IT Staff),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), None),None)", "score": -0.23245473895528876, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.27238498333766753, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingState,=,IT Staff),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2933802426009754, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price for tracks sold to a customer that was supported by an employee of the IT Staff?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,=,IT Staff), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.3009488184330196, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.Title,=,IT Staff),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 114, "beams": [{"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.13176939271752142, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.13342142701642332, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.14167092711529614, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.16763447562444014, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.17971264763315, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2338887754386271, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2396826381082632, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2011-04-20 00:00:00),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId), MediaType.Name),MediaType.Name))", "score": -0.2441218898299727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24487451197176652, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24679920415980588, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.24944903141929486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,>=,2011-04-20 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.25185865267296365, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28610343603620075, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.28630267807763854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there media types associated with tracks sold after 2011-04-20 00:00:00?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,>=,2011-04-20 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.29125635467315486, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>,2011-04-20 00:00:00),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 115, "beams": [{"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Milliseconds),Track.Name))", "score": -0.10095520392496837, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Composer),Track.Name))", "score": -0.13928600475628627, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))", "score": -0.3828529797538067, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8201437), Track.Milliseconds),Track.Name))", "score": -0.44990579113800777, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8201437), Track.Composer),Track.Name))", "score": -0.4882365919693257, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Milliseconds),Track.Composer))", "score": -0.5062271978749777, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Composer),Track.Composer))", "score": -0.5445579987062956, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.UnitPrice),Track.Name))", "score": -0.5665624223693158, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,8201437), Track.Milliseconds),Track.Name))", "score": -0.5942010067446972, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,!=,8201437), Track.Composer),Track.Name))", "score": -0.6325318075760151, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8201437), Track.Milliseconds),Track.Name))", "score": -0.6402534030421521, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8201437), Track.Milliseconds),Track.Name))", "score": -0.6475658796771313, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8201437), Track.Composer),Track.Name))", "score": -0.67858420387347, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Bytes),Track.Name))", "score": -0.6835064373954083, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are bigger than 8201437 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<=,8201437), Track.Composer),Track.Name))", "score": -0.6858966805084492, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8201437), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 116, "beams": [{"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.18972662796700507, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.5803952308511586, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.5874956780697341, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Artist.Name)", "score": -0.6197993232025825, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.7005785484912266, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.7200154127252295, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.744558256726192, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.8139452866522158, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8291212329130145, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.8627607181917969, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Customer), Artist.Name),Artist.Name)", "score": -0.9195832721339984, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.9288190384945447, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Artist.Name),Employee.Phone)", "score": -0.9357606340572038, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9617176368995596, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all artist names?", "inferred_code": "sum(distinct(getData(Artist), Customer.LastName),Artist.Name)", "score": -1.0016306493061848, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 117, "beams": [{"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.09923342029148974, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.10507366588343164, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))", "score": -0.16717373454494613, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Playlist),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22196435527457112, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Track),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.22462046838144972, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), Track.Name),MediaType.Name))", "score": -0.2385371714146005, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.AlbumId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2642960141072991, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))", "score": -0.27717757155622363, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), Track.Bytes),MediaType.Name))", "score": -0.2773719074256398, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.ArtistId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.2806200177498431, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Maurizio Pollini),merge(getData(Album),getData(Track),Album.AlbumId,Album.ArtistId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3320623588695197, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Maurizio Pollini),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.33333551618553275, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),Track.UnitPrice)", "score": -0.3389509889235493, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Album.ArtistId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),Track.UnitPrice)", "score": -0.34393597601150006, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}, {"orig_question": "Of how many different types are tracks performed by artists other than Maurizio Pollini?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,!=,Maurizio Pollini), Track.TrackId),Track.UnitPrice)", "score": -0.35092411695316567, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Maurizio Pollini), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 118, "beams": [{"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.058233321274551136, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.21436663268092307, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.23195213869258147, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.23688014620328096, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.2386927451624334, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.23915733766279496, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.2509620278170192, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.25600026995326225, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.25650339256757176, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.28099664696690607, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics), Track.UnitPrice),Track.UnitPrice))", "score": -0.2830347903250917, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(Album),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.2885113417362893, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.30230298072205714, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.30723772938196214, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What are the unit prices of tracks on the playlist Classical 101 - The Basics?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - The Basics),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.3200144970739793, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical 101 - The Basics),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 119, "beams": [{"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.015270356837700758, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.7750772343103, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.7991540119176153, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8334039166879574, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.8433365614370388, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.8998126591917711, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -0.9172633422876486, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -0.9347089622534004, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.9579371475640709, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.9916329996959085, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.9926582606491685, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.019335029201629, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Genre), Artist.Name),Artist.Name))", "score": -1.0672459117363509, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.0872908650277946, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Are there any artists?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.0974876603235462, "correct_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 120, "beams": [{"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.09515392690808255, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.12305814623755006, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.13028205108932403, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15585240932759764, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.19282628375992528, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19930642724747677, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2142802884944177, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2219157997639098, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23153598744531123, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.23361933829260265, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24397095237403968, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.2616884824584237, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),Track.MediaTypeId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.27012310694479424, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.28872205186646716, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many distinct media types are in the tracks of the playlist Grunge?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))", "score": -0.3254730190104298, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 121, "beams": [{"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.20621321596263442, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.220064858571277, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.32246140636561904, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.Milliseconds),Track.Name))", "score": -0.33789310850261245, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.369368145862969, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.36979166741220226, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.3933822075569677, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.3945847296578613, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.3950082512070946, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Milliseconds),Track.Name))", "score": -0.4090966290902135, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.Bytes,>=,6906078),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Bytes),Track.Name))", "score": -0.416618144810667, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Name),Track.Name))", "score": -0.41859879135186, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,6906078), Track.UnitPrice),Track.Name))", "score": -0.41923119352981875, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Invoice.InvoiceId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,6906078), Track.Bytes),Track.Name))", "score": -0.419654715079052, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "What is the UnitPrice of tracks with a bytes size equal to or above 6906078?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,6906078), Track.Milliseconds),Track.Name))", "score": -0.4343132034710546, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,6906078), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 122, "beams": [{"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.0917871191559243, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.17256918246130226, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.34253171531596166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.5311472683606553, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Email),Customer.Fax))", "score": -0.6093760074509191, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.6386057704148698, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.State),Customer.Fax))", "score": -0.6890698613060522, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Email),Customer.Fax))", "score": -0.6901580707562971, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.6917583965623635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Fax),Album.Title))", "score": -0.7004080437982338, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.7009898393807816, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Lisbon), Customer.Fax),Customer.Fax))", "score": -0.7284753292260575, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Lisbon), Customer.Phone),Customer.Fax))", "score": -0.7596099914444494, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.State),Customer.Fax))", "score": -0.7698519246114301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}, {"orig_question": "Whats the fax numbers of our customers from Lisbon?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Lisbon), Customer.Fax),Employee.Fax))", "score": -0.7725404598677414, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,Lisbon), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 123, "beams": [{"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.19821917970693903, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.30319137086189585, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.City))", "score": -0.41081618477619486, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.46869106387709797, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.City))", "score": -0.49402403046406107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Title),Employee.Title))", "score": -0.5157883759311517, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.BirthDate))", "score": -0.5329806279114564, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.City),Employee.HireDate))", "score": -0.5337977777890046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.Phone),Employee.City))", "score": -0.537731580036052, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.City))", "score": -0.5403591943723999, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.City))", "score": -0.5523259729516552, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.HireDate),Employee.City))", "score": -0.5611342113188584, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.Title))", "score": -0.5637391078588311, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.FirstName),Employee.City))", "score": -0.5680282037428697, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}, {"orig_question": "When are the employees with last name Callahan born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.LastName,=,Callahan), Employee.City),Employee.HireDate))", "score": -0.5734903105377386, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Callahan), Employee.BirthDate),Employee.BirthDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 124, "beams": [{"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.15857987964608145, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1779917118898341, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.1945799818298698, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2105689290276024, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.23591405928673034, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.23721099500274545, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId), Genre.Name),Genre.Name))", "score": -0.2384162365861709, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.2456841481309414, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.2471437209186793, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.AlbumId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.2689925765115378, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.27158584961537996, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Genre.Name),Genre.Name))", "score": -0.27830999596200173, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.28509832240096117, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,Protected AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2984070890649613, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "To which genres belong the tracks of the type Protected AAC audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))", "score": -0.29891389372101485, "correct_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,Protected AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 125, "beams": [{"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.12688717148917997, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.16400669197242165, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Genre),Track.GenreId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.19016283680646587, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.22240386599353473, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2327833780095085, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2334750137035627, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.24385452571953645, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2608098195026847, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),merge(getData(Track),getData(Track),Track.GenreId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2649361082496457, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2671300256132534, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,InvoiceLine.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2718809672127127, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Track),Track.GenreId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2759721638635389, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Purchased AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.27820118093527624, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Track.GenreId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.3049405848750901, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}, {"orig_question": "How many different genres are there for tracks whose media type is not \"Purchased AAC audio file\"?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.MediaTypeId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))", "score": -0.32172187360745863, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Genre),Track.GenreId,Genre.GenreId),MediaType.Name,!=,Purchased AAC audio file), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 126, "beams": [{"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.11695968490115138, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.Bytes),Track.Bytes)", "score": -0.14091566877658235, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.1909341860965118, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.19507947862752098, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.243710771160149, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Employee.BirthDate),Track.Bytes)", "score": -0.2671264747480031, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Employee.BirthDate),Track.Bytes)", "score": -0.2686604352872102, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.TrackId),Track.Bytes)", "score": -0.28773837408301506, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Employee.Email),Track.Bytes)", "score": -0.3018683918103025, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Employee.Email),Track.Bytes)", "score": -0.31266462536404604, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes)", "score": -0.32536559373757634, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Track.UnitPrice),Track.Bytes)", "score": -0.3437216391175798, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes)", "score": -0.3610021685634971, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Invoice.Total),Track.Bytes)", "score": -0.3749480787191261, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of tracks in the TV Shows playlist?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), Playlist.Name),Track.Bytes)", "score": -0.3754230372981946, "correct_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 127, "beams": [{"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.19894277228398421, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.21123135155436049, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2218577586694189, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2379948622297931, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2502834415001694, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2609098486152278, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.26261665220861935, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2809109696431661, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.28352356743443613, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2869390775113623, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.2871288704544348, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.28730575737716246, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.PlaylistId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.29883141491939064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),Track.Name))", "score": -0.29941746851871576, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any tracks on the playlist Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3026806620594501, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 128, "beams": [{"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.04296903728754842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.City),Employee.Phone))", "score": -0.3324516121974739, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.FirstName),Employee.Phone))", "score": -0.4745006863704475, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.4856837312436255, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.PostalCode),Employee.Phone))", "score": -0.48997956558378064, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.495134762928501, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Artist.Name),Employee.Phone))", "score": -0.5532507304778846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.5895647029137763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.617869160578266, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.LastName),Employee.Phone))", "score": -0.6180205349555763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.FirstName))", "score": -0.6239215587011131, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.6375993112778815, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Country),Employee.Phone))", "score": -0.6499947313895973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,Calgary), Employee.Phone),Employee.Phone))", "score": -0.655414007112995, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}, {"orig_question": "What's the phone number of the employees who don't work in Calgary?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.City))", "score": -0.6780320857396873, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,Calgary), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 129, "beams": [{"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.022005023680321756, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2836331764829083, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.645416535799086, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,<,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.645552672807753, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.6805802164726629, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.Total))", "score": -0.7063949881248845, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.7301360896217375, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.Total),Invoice.InvoiceDate))", "score": -0.7419627240287809, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Customer.City))", "score": -0.7421611128502263, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Track.UnitPrice))", "score": -0.7641174374275579, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.7739140729081555, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.8014796713960095, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.896244321264021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.9070446886016725, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "What are the invoice dates from all countries except from Norway?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.9071808256103395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Norway), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 130, "beams": [{"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.006390054286060958, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.7399835493677206, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.758030103830188, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8287793276829764, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8457548938709216, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.8468258821454436, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Album.AlbumId), Album.Title),Album.Title))", "score": -0.8498950156676696, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9321161690535822, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9358544514589451, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Album),Album.Title,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9386907939829253, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.9465018209389924, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,None),getData(Track),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.9501627235160495, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -1.0030718069152469, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Track),Album.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -1.0366013785270158, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "What are the different title of the albums?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Genre),Genre.Name,=,None),getData(Album),Track.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -1.074031283106398, "correct_code": "done(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 131, "beams": [{"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.23832886332157385, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.2713374784504493, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.28136634626235146, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2936054738866049, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.2999273887148686, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3040682484506257, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,!=,2013-01-15 00:00:00), Track.TrackId),Track.UnitPrice)", "score": -0.3140971162625279, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,<,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3281753271142889, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3298545923957215, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,=,1.99),Track.UnitPrice,!=,2013-01-15 00:00:00), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3352295021833064, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.33778056711485127, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.33960759158101556, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,!=,1.99),Track.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.34416525348247096, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99),InvoiceLine.UnitPrice,!=,1.99), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35520391690088243, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average unit price of tracks with a unit price that is not 1.99 and that were not sold only in 2003-01-15 00:00:00 ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)", "score": -0.36804075852768364, "correct_code": "avg(distinct(filter(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,2013-01-15 00:00:00),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.UnitPrice,!=,1.99), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 132, "beams": [{"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1821748327004446, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.21884654914609794, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2645307731484432, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),Track.AlbumId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.2947409019460239, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.310518771873384, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Album.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3147274066110661, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3268773671206482, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3311351673797926, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Album.Title,=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.34524008741212525, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3459199901234634, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3537390130683877, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.GenreId),Album.Title,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.3638659006261454, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,=,0.99),InvoiceLine.UnitPrice),Album.Title))", "score": -0.36585648291853384, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.366536385629872, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What is the title of the album with the longest sold track that has a unit price different from 0.99?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.AlbumId),Track.UnitPrice,=,0.99),Track.UnitPrice),Album.Title))", "score": -0.37435540857479627, "correct_code": "done(extractValues(max(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 133, "beams": [{"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.0655139193222567, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.Address))", "score": -0.27085788848853554, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Country))", "score": -0.29080434258139576, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.Country))", "score": -0.4961483117476746, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.State))", "score": -0.5094521802202507, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Customer.Address),Employee.Address))", "score": -0.5310196310565516, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.City))", "score": -0.5601739447847649, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6342678671753674, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Invoice.BillingAddress))", "score": -0.6488657158151909, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.655680503910844, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.Composer,=,T5K 2N1), Employee.Address),Employee.Address))", "score": -0.6570554638565227, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Invoice.BillingAddress),Employee.Address))", "score": -0.6778293282077357, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Track.Milliseconds))", "score": -0.6780017178789421, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Customer.Address))", "score": -0.6848420065180107, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}, {"orig_question": "What is the address of our employee with the postal code T5K 2N1?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Country),Employee.State))", "score": -0.7147961493865296, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,T5K 2N1), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 134, "beams": [{"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.17719244116454255, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.17922791530945775, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.18180966325736386, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18202006156817235, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2460607206011911, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24755440174745064, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2598838788343607, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2615959210031494, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.2746186140629056, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.TrackId),Track.UnitPrice)", "score": -0.2884417722960752, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.2987682573476344, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3029339247634606, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Grunge), Track.TrackId),Track.UnitPrice)", "score": -0.3040790541817097, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge), Track.TrackId),Track.Bytes)", "score": -0.3105416887436346, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the summed number of bytes of tracks in the playlist named Grunge?", "inferred_code": "sum(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Grunge),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.TrackId),Track.Bytes)", "score": -0.32711619089430133, "correct_code": "sum(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Grunge),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 135, "beams": [{"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.06499820627014158, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,!=,Barnett), Customer.City),Customer.City))", "score": -0.29828665277455, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,!=,Barnett), Customer.City),Customer.City))", "score": -0.32117769739124924, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,!=,Barnett), Customer.City),Customer.City))", "score": -0.4699582817265764, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Barnett), Customer.City),Customer.City))", "score": -0.4744474223116413, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Barnett), Customer.City),Customer.City))", "score": -0.4973384669283405, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Barnett), Customer.City),Customer.City))", "score": -0.6461190512636676, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,!=,Barnett), Customer.City),Customer.City))", "score": -0.669314599246718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,!=,Barnett), Customer.City),Customer.City))", "score": -0.6871040823170915, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,!=,Barnett), Customer.City),Customer.City))", "score": -0.7334828736493364, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,Barnett), Customer.City),Customer.City))", "score": -0.7922731997678056, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,<=,Barnett), Customer.City),Customer.City))", "score": -0.8079436352709308, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.PostalCode))", "score": -0.9521879696715443, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.City))", "score": -0.997207213740867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}, {"orig_question": "In which cities do live customers named Barnett?", "inferred_code": "done(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.City))", "score": -1.002447515336035, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Barnett), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 136, "beams": [{"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.10128478742556411, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.13076697573397175, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.17924750519527144, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.21059624862024623, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.232312390313972, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.23380651763385285, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.32725354092555753, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Invoice.InvoiceId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.3337883189451247, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Track.TrackId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.3757340703868572, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Invoice.InvoiceId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name))", "score": -0.3822688484064244, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.3840919076581927, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,11043559), Artist.Name),Artist.Name)", "score": -0.38935658584191124, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Invoice.CustomerId,Album.AlbumId),Track.Bytes,=,11043559), Artist.Name),Artist.Name))", "score": -0.4133357432175881, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.4242740727043601, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}, {"orig_question": "How many different artists produced albums containing tracks whose size is 11043559 bytes ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Bytes,=,11043559), Artist.Name),Employee.Phone))", "score": -0.4656192029915469, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,=,11043559),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 137, "beams": [{"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>,8271418), Track.Composer),Track.Composer))", "score": -0.034553505187432165, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,<,8271418), Track.Composer),Track.Composer))", "score": -0.3676803453690809, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.435212632517402, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4426954608668428, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.49310770932738596, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4939020128042693, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.49609752016258757, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5005905376768268, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.518441312101585, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5206368194599031, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.5390991338632956, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,8271418),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5412946412216139, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>,8271418),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5462218181931958, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,8271418),getData(Track),Track.AlbumId,Track.TrackId), Track.Composer),Track.Composer))", "score": -0.5552930417105362, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}, {"orig_question": "Who are the composers involved in tracks with more than 8271418 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>,8271418), Track.Composer),Track.Composer))", "score": -0.6081704988009733, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,>=,8271418), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 138, "beams": [{"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.06054724935347622, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.3299114395992, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.35587930454895816, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Fax))", "score": -0.3575659989928681, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.4020374008763506, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.42800526582610876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.45181036216492143, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,1016), Customer.Email),Customer.Email))", "score": -0.45506415232921427, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))", "score": -0.47777822711467954, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.State))", "score": -0.4789104759311158, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Address),Customer.Email))", "score": -0.500953031665631, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Address))", "score": -0.5086070298766572, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,!=,1016), Customer.Email),Customer.Email))", "score": -0.5163199512390677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Customer.CustomerId),Customer.PostalCode,=,1016), Customer.Email),Customer.Fax))", "score": -0.5275085914829966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}, {"orig_question": "Which emails from customers with postal code 1016 do we have?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.State),Customer.Email))", "score": -0.538459671623059, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,1016), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 139, "beams": [{"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.03479996155153506, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Phone))", "score": -0.6403442667706398, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Album.Title))", "score": -0.7002957653805321, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Fax))", "score": -0.7353270540477779, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.LastName))", "score": -0.8904658437032161, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Album.Title),Customer.Phone))", "score": -0.918474661395594, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.9463647097767319, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.9525010739538325, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Employee.Phone))", "score": -0.9829027460033772, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Phone))", "score": -1.0344549877186995, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.City))", "score": -1.0441671207154024, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),MediaType.Name))", "score": -1.0452094338258893, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -1.045262187087032, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Phone))", "score": -1.0681907861077442, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}, {"orig_question": "How many phone numbers from customers do we have?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.LastName),Customer.Phone))", "score": -1.0904646928141895, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 140, "beams": [{"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24130095470719734, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.24485859139803048, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.2744348826956428, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.28578041508069, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.2868342551581903, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.2928411639707041, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,90\u2019s Music),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.309542226845536, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Employee.BirthDate),Track.Bytes)", "score": -0.3153841262323129, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.32193751371217894, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.32412449260974335, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.32750883708991757, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,=,90\u2019s Music), Track.TrackId),Track.Bytes)", "score": -0.3279444293732749, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.3694526646687413, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.Name,!=,90\u2019s Music), Track.Bytes),Track.Bytes)", "score": -0.3749834636000833, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the total size of all the tracks on the playlist 90's Music if we exclude the track Maquinarama?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.Name,!=,90\u2019s Music),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), None),None)", "score": -0.396224092951955, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,90\u2019s Music),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Name,!=,Maquinarama),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 141, "beams": [{"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.07305766670781595, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2345221773388731, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.24033257372105496, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.27080566745411494, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.273184223651852, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.AlbumId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2733501904360128, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.27893566876571946, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2806342263744195, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Track),InvoiceLine.InvoiceId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.2959144586198617, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.30461809573345533, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.3054320404346493, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.30873120499205736, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.31042849211563717, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Classical 101 - Next Steps),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.31124246369302855, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in the Classical 101 - Next Steps playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps),merge(getData(Track),getData(Genre),InvoiceLine.InvoiceId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3168375652057792, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical 101 - Next Steps), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 142, "beams": [{"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Album.Title),Album.Title))", "score": -0.09108332222760561, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,!=,MPEG audio file), Album.Title),Album.Title))", "score": -0.21710058650165248, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,MPEG audio file), Album.Title),Album.Title))", "score": -0.2475046757643852, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Track.Composer),Album.Title))", "score": -0.26596809327306803, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId), Album.Title),Album.Title))", "score": -0.2775224975372804, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), InvoiceLine.UnitPrice),Album.Title))", "score": -0.28057919686914384, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.30127447567832993, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Album.AlbumId),Album.Title))", "score": -0.31456660626887795, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.TrackId), Album.Title),Album.Title))", "score": -0.319128832504321, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Track.UnitPrice),Album.Title))", "score": -0.3203301852163685, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Bytes,<=,13250848), Album.Title),Album.Title))", "score": -0.32093721708018424, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Album.Title),Album.Title))", "score": -0.330728445492811, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), InvoiceLine.InvoiceLineId),Album.Title))", "score": -0.339377136563372, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<=,MPEG audio file), Track.Name),Album.Title))", "score": -0.3556941282539453, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}, {"orig_question": "How many albums contain tracks of MPEG audio file that are smaller than 13250848 bytes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,<,MPEG audio file), Album.Title),Album.Title))", "score": -0.3559264050149061, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),Track.Bytes,<,13250848), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 143, "beams": [{"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.11643216083920443, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.11736171089722036, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.UnitPrice),Track.UnitPrice))", "score": -0.20125853438090116, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Bytes),Track.UnitPrice))", "score": -0.23765708649621964, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.27915792790456445, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.281262568272216, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Track.Milliseconds),Track.UnitPrice))", "score": -0.2915331212497592, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.29390555482460795, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3078164065153307, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.31074451008174186, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.UnitPrice),Track.UnitPrice))", "score": -0.31759075984656854, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),getData(Track),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3438050842242156, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Mundo Livre S/A),merge(getData(Track),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.Bytes),Track.UnitPrice))", "score": -0.3469050655603283, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(merge(filter(getData(Artist),Artist.Name,!=,Mundo Livre S/A),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Track.UnitPrice),Track.UnitPrice))", "score": -0.35601757512093163, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}, {"orig_question": "What is the unit price of the biggest track between all the tracks produced by any artist except the artist named Mundo Livre S/A ?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))", "score": -0.3620636148190841, "correct_code": "done(extractValues(max(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Mundo Livre S/A),Track.Bytes),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 144, "beams": [{"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))", "score": -0.2608642705666814, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.31559702953515717, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3183405941568352, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.Country))", "score": -0.3292200505437983, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3339417812675035, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.3366853458891816, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.Total,<,3.96),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.34070334551900044, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Invoice),Invoice.Total,<,3.96),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total),Employee.Address))", "score": -0.38341382935190027, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.Total,<,3.96),Invoice.Total),Employee.State))", "score": -0.3885505641560456, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(getData(Invoice),Invoice.Total,<,3.96),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total),Employee.Country))", "score": -0.3887620856164827, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.3906449107248996, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),InvoiceLine.InvoiceId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.3933884753465776, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),InvoiceLine.InvoiceId,Employee.EmployeeId),Employee.BirthDate),Employee.Address))", "score": -0.3951572758837599, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Employee),InvoiceLine.InvoiceId,Employee.EmployeeId),Employee.BirthDate),Employee.Address))", "score": -0.3979008405054379, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}, {"orig_question": "What is the address of the employee that sent the invoice with the highest total of invoices with a total lower than 3.96?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),getData(Invoice),Customer.SupportRepId,Customer.CustomerId),Invoice.Total),Employee.Address))", "score": -0.40898960929554523, "correct_code": "done(extractValues(max(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.Total,<,3.96),Invoice.Total),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 145, "beams": [{"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.1389922678458618, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,9640349), Playlist.Name),Playlist.Name))", "score": -0.20550426270690192, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.22769903353844, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),Track.Name))", "score": -0.22807256536841022, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24295995781207794, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<=,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2613267627899482, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.26502263799010506, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,>,9640349), Playlist.Name),Playlist.Name))", "score": -0.2696827217947565, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,!=,9640349), Playlist.Name),Track.Name))", "score": -0.29458456022945034, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.3038996922785719, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.3085597760832233, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.Bytes,<,9640349), Playlist.Name),Playlist.Name))", "score": -0.3122169047468297, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,<,9640349), Playlist.Name),MediaType.Name))", "score": -0.3124198412328911, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,<,9640349),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.3142220702481154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}, {"orig_question": "Are there any playlists on which there are tracks bigger than 9640349 bytes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>,9640349), Playlist.Name),Track.Name))", "score": -0.31677933106098843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,9640349),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 146, "beams": [{"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.24731284845465695, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2512843899136176, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2648077268213668, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.28086152358719735, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.28555536416117017, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.2904213283509999, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Artist),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.2911724199100266, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.31116896569080327, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.31164084467705977, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.31356595144694727, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.31866486175678843, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3209406787243588, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(MediaType),Playlist.Name,=,Protected MPEG-4 video file),getData(Album),Artist.ArtistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),Album.ArtistId,Artist.ArtistId), Artist.Name),Artist.Name))", "score": -0.328670681930685, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Track.GenreId),merge(getData(Album),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.AlbumId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3406147995121555, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}, {"orig_question": "How many artists produced Protected MPEG-4 video files?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),Artist.ArtistId,Track.GenreId),getData(Artist),Album.ArtistId,Artist.ArtistId),Track.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))", "score": -0.3529172200742882, "correct_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),getData(Artist),Album.ArtistId,Artist.ArtistId),MediaType.Name,=,Protected MPEG-4 video file), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 147, "beams": [{"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.09513923801387136, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.263453225566991, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.31475077100003546, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.39691309161389654, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Fax,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.42509416766370123, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.Country),Employee.FirstName))", "score": -0.4485797481229383, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.542477051689275, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.Phone))", "score": -0.5449489047368843, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.LastName))", "score": -0.5697257807096321, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.LastName),Employee.FirstName))", "score": -0.5747142927339155, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.5823533339043934, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6052499599372823, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.Country))", "score": -0.6055750241121132, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,!=,2003-05-03 00:00:00), Employee.Country),Employee.FirstName))", "score": -0.616893735676058, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}, {"orig_question": "What is the first name of the employees who were not hired on 2003-05-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Album.ArtistId,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))", "score": -0.6189118427773792, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,!=,2003-05-03 00:00:00), Employee.FirstName),Employee.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 148, "beams": [{"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2501784626995121, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2843715724399784, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Playlist.PlaylistId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2845330378155527, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3187261475560191, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.344224838346033, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Genre.GenreId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.35925854645200433, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3784179480864993, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),MediaType.MediaTypeId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3819089396397395, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Invoice),getData(Track),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38712237808703903, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(PlaylistTrack),Track.TrackId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.39269388036438635, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Track.TrackId,Track.GenreId),Invoice.BillingAddress,=,1),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3927423873601299, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(PlaylistTrack),Genre.GenreId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.39361312156804495, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingAddress,=,Knocking At Your Back Door),getData(Track),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3988765904338286, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Knocking At Your Back Door), MediaType.Name),MediaType.Name))", "score": -0.4196121638954689, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What file type is the track Knocking At Your Back Door?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(PlaylistTrack),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceId,Track.GenreId),Invoice.BillingAddress,=,1), MediaType.Name),MediaType.Name))", "score": -0.41971784935654116, "correct_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(filter(getData(Track),Track.Name,=,Knocking At Your Back Door),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 149, "beams": [{"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2439374025803271, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2530323799236889, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,<,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.2567828435454503, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2724624888317925, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2773072421379199, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2834644271654559, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,14234427),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2853556216487342, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2923313027752887, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29879086068986427, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30092980599545044, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,!=,Milton Nascimento, Caetano Veloso), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30242154114531067, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)", "score": -0.3051766852924301, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.30773928937968686, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Track),Track.Name,=,Milton Nascimento, Caetano Veloso),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3138229388123921, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average amount spent on purchases of Milton Nascimento, Caetano Veloso composed tracks that are bigger than 14234427?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,Milton Nascimento, Caetano Veloso),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.32306572290409524, "correct_code": "avg(distinct(filter(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>,14234427),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,Milton Nascimento, Caetano Veloso), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 150, "beams": [{"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.23837512543989933, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.24198093820001848, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.2487148021299241, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.26000788844239825, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.26099121765491123, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.26361370120251737, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.26459703041503035, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Composer),Track.Name))", "score": -0.27034756513242303, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.UnitPrice),Track.Name))", "score": -0.271330894344936, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3473911972022488, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3509970258890034, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.351948636738503, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.35555444949862214, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.3618612574110152, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks produced by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Name),Track.Name))", "score": -0.36825889230002656, "correct_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,M\u00c3\u00b4nica Marianno),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 151, "beams": [{"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.16067712051699345, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.24090961409638112, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.2842373032672185, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.3292208094699163, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.3644697968466062, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.4001156002832431, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.40945330304930394, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,>=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.4803480938626308, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.5114410300357122, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.5236757830334682, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,cole porter), Track.UnitPrice),Track.Bytes))", "score": -0.5421433974606771, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,>=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.5686592892361659, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.5916735236150998, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,>=,cole porter), Track.Milliseconds),Track.Bytes))", "score": -0.6039082766128558, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}, {"orig_question": "How big are the tracks of Cole Porter?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,cole porter), Track.Bytes),Track.Bytes))", "score": -0.6358381886584539, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,cole porter), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 152, "beams": [{"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), Track.TrackId),Track.Milliseconds)", "score": -0.1154246998547097, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.1652556929596793, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.20359725597920592, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.27166514297812694, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.2848263439723428, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2984427763854405, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Invoice.InvoiceId),Track.Milliseconds)", "score": -0.3060472751057893, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.30692470772426117, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.30733228582992983, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.31000670599765356, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),merge(merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.31392116060605696, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Invoice.InvoiceId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3231679069918694, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.3431976919330168, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.3815392549525434, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of all tracks that have been sold to customers in Norway?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Norway),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.38629279152906465, "correct_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Norway),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 153, "beams": [{"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.36875118243655924, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.37170518358624227, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.38667535528952446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.38962935643920743, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.39661040175195367, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.39956440290163664, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.400812661390094, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.403766662539777, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4145345746049188, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Track.Name))", "score": -0.4151960958418398, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4167541817285554, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),PlaylistTrack.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.41748857575460185, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Track.Name),Track.Name))", "score": -0.4181501016758274, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.41873677896826544, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Do tracks that have been bought from Tucson have a media type?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),MediaType.Name,=,Tucson),merge(getData(InvoiceLine),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Track.Name))", "score": -0.4197080882552863, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCity,=,Tucson),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 154, "beams": [{"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.08276478990402947, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.12705472183485678, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.14827545927400532, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.15430865397032947, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.17877240680728737, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.1803129013014506, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.18197579162307678, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18544876739424193, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.21705121998239824, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2515192546152404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2845456850367766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Music Videos),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29360183865824724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.30124217838128325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Music Videos), Genre.Name),Genre.Name))", "score": -0.33033336445404043, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there no genre names for tracks in the playlist named \"Music Videos\" ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Music Videos), Genre.Name),Track.GenreId))", "score": -0.3583779850538851, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Music Videos),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 155, "beams": [{"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.Country))", "score": -0.12139450022232268, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))", "score": -0.17248998590957854, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Andrew), Employee.Country),Employee.Country))", "score": -0.3822010607386801, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.City),Employee.Country))", "score": -0.43883214899551604, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.City))", "score": -0.4681668878461096, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.City),Employee.Country))", "score": -0.4899276346827719, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Invoice.BillingCountry),Employee.Country))", "score": -0.5096772761012289, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.City))", "score": -0.5192623735333655, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Invoice.BillingCountry))", "score": -0.540515869941828, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.State))", "score": -0.5553256274129126, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Invoice.BillingCountry),Employee.Country))", "score": -0.5607727617884848, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Invoice.BillingCountry))", "score": -0.5916113556290838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Country),Employee.Address))", "score": -0.6000065208340857, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Andrew), Employee.Address),Employee.Country))", "score": -0.6021062881613943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}, {"orig_question": "From which countries are the employees that are called Andrew from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.State))", "score": -0.6064211131001684, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Andrew), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 156, "beams": [{"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.1465773938791681, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.16541866946469855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Playlist.Name))", "score": -0.24153005912963227, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Playlist.Name))", "score": -0.24824619886013594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.2613400028017212, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.26182625515782837, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),InvoiceLine.InvoiceId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.28190724200819456, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(PlaylistTrack),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.28279879840397854, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Name))", "score": -0.2852961161925512, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Name))", "score": -0.28663429524950174, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceDate),Track.Bytes))", "score": -0.29269534623655785, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Invoice.InvoiceDate),Track.Bytes))", "score": -0.29403570263426354, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Invoice.InvoiceId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.29483855797404235, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Playlist),Track.TrackId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Bytes),Track.Bytes))", "score": -0.30258041960111676, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "Is the playlist Classical empty?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical), Track.Name),Track.Bytes))", "score": -0.30938885196150623, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 157, "beams": [{"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18405530906853432, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.18947360507621508, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.19534892437801887, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.20016467626719947, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Artist.Name,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21569549484075098, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.HireDate,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21584471257817003, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21672068690808163, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.22624568295502573, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Phone,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.226909391432806, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.2316639789627065, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.23284758164988992, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Edmonton),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.23874692621144017, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Employee),Employee.City,!=,Edmonton),merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)", "score": -0.24559329183080403, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.FirstName,!=,Edmonton), Track.TrackId),Track.UnitPrice)", "score": -0.29403763321108034, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "What is the average track rice on invoices made by employees not in Edmonton?", "inferred_code": "avg(distinct(filter(merge(getData(Employee),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,!=,Edmonton), Track.TrackId),Track.UnitPrice)", "score": -0.2977210801418285, "correct_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.City,!=,Edmonton),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 158, "beams": [{"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.31847071973545565, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,On-The-Go 1),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34611594185078015, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.36807395861405456, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Artist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3695087537566295, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.37640893669533754, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Playlist.Name,=,On-The-Go 1), Track.TrackId),Track.Bytes)", "score": -0.38022727651708843, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Bytes,=,On-The-Go 1), Track.TrackId),Track.Bytes)", "score": -0.38192283882073896, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,On-The-Go 1),getData(PlaylistTrack),Artist.ArtistId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3836277973112738, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3860269386593964, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3866250059141777, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.3874766506915033, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Artist),getData(Album),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3962430078782366, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.4003571559386693, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,On-The-Go 1),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.4053110158221611, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}, {"orig_question": "What is the sum of the track bytes by Jimmy Page, Robert Plant, John Bonham, John Paul Jones?", "inferred_code": "sum(distinct(filter(merge(getData(Playlist),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Track.Composer,=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones), Track.TrackId),Track.Bytes)", "score": -0.4120501167677428, "correct_code": "sum(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,On-The-Go 1),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),filter(getData(Track),Track.Composer,!=,Jimmy Page, Robert Plant, John Bonham, John Paul Jones),PlaylistTrack.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 159, "beams": [{"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.028160617813544474, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20745872394897058, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2198662390136343, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23347524333523384, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.23548701760884927, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Artist.Name,=,Iron Maiden), Genre.Name),Genre.Name))", "score": -0.2394283735777526, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Album),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.28136745732300256, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.3019261777986365, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.3087852974514425, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Track.GenreId))", "score": -0.321949398765727, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.33407907950719307, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3408948836491928, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.AlbumId),Album.Title,=,Iron Maiden), Genre.Name),Genre.Name))", "score": -0.3656476774897072, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))", "score": -0.3738876621782111, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Count the genre name for the tracks of the albums where Iron Maiden worked as an artist.", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Iron Maiden),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Track.GenreId),Album.AlbumId,Track.AlbumId), Genre.Name),Genre.Name))", "score": -0.38263855886594317, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Iron Maiden),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 160, "beams": [{"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.024842718065883673, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Margaret), Employee.Email),Employee.Email))", "score": -0.36902306825777487, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.538499100514855, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Customer.Email),Employee.Email))", "score": -0.5684401871722002, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.BirthDate))", "score": -0.5859228874642213, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Margaret), Employee.Email),Employee.Email))", "score": -0.6083799436773916, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.FirstName))", "score": -0.6226963306862672, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Customer.Email))", "score": -0.6429635192353089, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.BirthDate),Employee.Email))", "score": -0.6442441823046465, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Track.Bytes))", "score": -0.6564591433007081, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.FirstName),Employee.Email))", "score": -0.6770173193972369, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Fax))", "score": -0.6880313660103639, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.State))", "score": -0.6932572032410462, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Track.Bytes),Employee.Email))", "score": -0.7539727570574541, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}, {"orig_question": "What are the distinct email adresses of the employees with the first name Margaret?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Address),Employee.Email))", "score": -0.7733048083346148, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Margaret), Employee.Email),Employee.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 161, "beams": [{"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.033126371949038, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Track.Name))", "score": -0.38901319824071834, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.4440555880210013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.49983051516028354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.FirstName))", "score": -0.5445771487793536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Genre.Name))", "score": -0.5502431067070574, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.LastName),Employee.LastName))", "score": -0.5673642466208548, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Genre.GenreId))", "score": -0.5858575972160907, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.LastName))", "score": -0.5896200526403845, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Canada), Employee.LastName),Employee.LastName))", "score": -0.6273234371692524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Customer.LastName))", "score": -0.6420287164291949, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Track.GenreId))", "score": -0.6459215553841204, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Artist.ArtistId))", "score": -0.7369616302094073, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Title))", "score": -0.7533169063171954, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}, {"orig_question": "What are the last names of the employees living in Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.LastName))", "score": -0.7576897133039893, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 162, "beams": [{"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.34800108028166865, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.35716538809868653, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds))", "score": -0.43400259039477423, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.4416865528929283, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.4427763013059842, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds)", "score": -0.44892211778465463, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.TrackId),Track.UnitPrice,=,0.99), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.45040206576941155, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Track.UnitPrice,=,0.99), Track.Milliseconds),Track.Milliseconds)", "score": -0.458086447151929, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.4792536541435883, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),Album.Title,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.4803434025566442, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.484267941069849, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Milliseconds))", "score": -0.4853576894829049, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice),Track.Name))", "score": -0.49091911220304596, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice),Track.Name))", "score": -0.4920088606161019, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}, {"orig_question": "Who composed the tracks that cost 0.99 for unit ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Track.UnitPrice),Track.Milliseconds))", "score": -0.5023284681993276, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.UnitPrice,=,0.99), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 163, "beams": [{"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Customer.State),Customer.State))", "score": -0.3891643992024001, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Riotur), Customer.State),Customer.State))", "score": -0.40297784268432224, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.45066806286149586, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.4627831837492522, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.Company,=,Riotur), Customer.State),Customer.State))", "score": -0.464481506343418, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.FirstName,=,Riotur), Customer.State),Customer.State))", "score": -0.47659662723117435, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Customer.State),Employee.State))", "score": -0.5145452728825148, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.5260794869022902, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Riotur), Customer.State),Employee.State))", "score": -0.528358716364437, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.5398929303842124, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Riotur), Invoice.Total),Customer.State))", "score": -0.5609607210712966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Riotur), Invoice.Total),Customer.State))", "score": -0.5747741645532187, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Employee.State))", "score": -0.5760489365416106, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Invoice.BillingState),Customer.State))", "score": -0.587583150561386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}, {"orig_question": "Which state is associated to the comagny named Riotur in the customer's table?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Riotur), Customer.State),Employee.State))", "score": -0.588164057429367, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Riotur), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 164, "beams": [{"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.09149912207794841, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.25270619824004825, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.3225336393661564, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.4289171828277176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.LastName))", "score": -0.4580016455001896, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.48374071552825626, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.Email))", "score": -0.5249502977676457, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,VV), Customer.FirstName),Customer.FirstName))", "score": -0.537906093741185, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.Phone))", "score": -0.6107670685596531, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Email),Customer.FirstName))", "score": -0.6123926888540154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,VV), Customer.FirstName),Customer.LastName))", "score": -0.6192087216622895, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Employee.FirstName))", "score": -0.6237094423122471, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,VV), Customer.FirstName),Customer.Phone))", "score": -0.6599517001159256, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.Country),Customer.FirstName))", "score": -0.6648409615590936, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}, {"orig_question": "What is the customer first name which lives in the customer state VV?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.6669203149771672, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,VV), Customer.FirstName),Customer.FirstName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 165, "beams": [{"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.057043944052566076, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<=,1.99), Track.Name),Track.Name))", "score": -0.34357442570399144, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.3772769312050189, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4221206687186556, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.42864449985801195, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.44147230749317024, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,PlaylistTrack.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4424731385315958, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4480265869966258, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4553769275275376, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4734882373716487, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.4863160217485629, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,1.99),Track.UnitPrice,<=,1.99), Track.Name),Track.Name))", "score": -0.48815957910587177, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.49138528891413324, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.GenreId,Track.TrackId),Invoice.InvoiceId,Track.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.49283988607937174, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}, {"orig_question": "Are there any tracks cheaper than 1.99?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,>,1.99), Track.Name),Track.Name))", "score": -0.5306301624841581, "correct_code": "isEmpty(extractValues(distinct(filter(getData(Track),Track.UnitPrice,<,1.99), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 166, "beams": [{"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.1063783976223931, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.2331641639557347, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.27133395774035307, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.39811972407369467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Customer.City),Customer.City))", "score": -0.42734034331260773, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.PostalCode),Customer.City))", "score": -0.5407874236789212, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,FL), Customer.City),Customer.City))", "score": -0.5541261096459493, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,!=,FL), Customer.City),Customer.City))", "score": -0.5571215922918782, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.Company),Customer.City))", "score": -0.5648332486834988, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Invoice.InvoiceId),Customer.City))", "score": -0.5874606619563565, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.State,!=,FL), Invoice.BillingCity),Customer.City))", "score": -0.5922959034305677, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Invoice.BillingCity))", "score": -0.6154015503798291, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,!=,FL), Customer.City),Customer.City))", "score": -0.6322750921335683, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Employee.City),Customer.City))", "score": -0.6343993793216214, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}, {"orig_question": "Which cities are our customers from that are not in the state of Florida?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,!=,FL), Customer.City),Customer.City))", "score": -0.635982381829308, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,!=,FL), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 167, "beams": [{"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.03119050901841547, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.40440188911270525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.City),Employee.Phone))", "score": -0.4880680405021849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.PostalCode),Employee.Phone))", "score": -0.518423195970172, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.FirstName),Employee.Phone))", "score": -0.5279084407211485, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.5660909023554268, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.LastName),Employee.Phone))", "score": -0.5880954228759947, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Artist.Name))", "score": -0.5994275673710945, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.FirstName))", "score": -0.6220871075474861, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Artist.Name),Employee.Phone))", "score": -0.624229487073535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Customer.Phone))", "score": -0.6611735686146858, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.LastName))", "score": -0.6678106650197151, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Customer.Phone),Employee.Phone))", "score": -0.6968725882888975, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,Canada), Employee.Phone),Employee.Phone))", "score": -0.7242765631945076, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees from Canada?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.City))", "score": -0.7298524245106819, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Canada), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 168, "beams": [{"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.2998819325069661, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.31143498174120837, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.3248243630021398, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3313748458741341, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Album),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.3392197928241254, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.3417165598645845, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.34311324019600725, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3447642271350655, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood),getData(Track),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.Bytes),Album.Title))", "score": -0.35510594112551586, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),Track.Composer,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.36848752817614644, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.Name),Album.Title))", "score": -0.37607874991079104, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.37922408678435204, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(Album),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Composer,!=,One By One), Track.Name),Album.Title))", "score": -0.38365856146065674, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Album),InvoiceLine.TrackId,Album.ArtistId),getData(Album),Track.AlbumId,Album.AlbumId), Track.UnitPrice),Album.Title))", "score": -0.39261349158041137, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}, {"orig_question": "Which tracks are on the album One By One but not from Jack's Mannequin & Mick Fleetwood?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Composer,!=,One By One),getData(Album),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.39916397445240565, "correct_code": "sum(distinct(filter(merge(getData(Artist),filter(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.Title,=,One By One),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Jack's Mannequin & Mick Fleetwood), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 169, "beams": [{"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Fax))", "score": -0.10966408180761966, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.1839285742607899, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.2803793761995621, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Album.Title))", "score": -0.5372675404069014, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.6011745695141144, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Album.Title))", "score": -0.6100999100005113, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Album.Title))", "score": -0.6337183423456736, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.7201122705009766, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Email),Customer.Fax))", "score": -0.7714684971724637, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Employee.Fax))", "score": -0.8064765676972456, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCountry,=,Portugal), Customer.Fax),Customer.Fax))", "score": -0.832313365128357, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Email),Customer.Fax))", "score": -0.8679192991112359, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Portugal), Customer.Fax),Employee.Fax))", "score": -0.9029273696360178, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Album.Title),Customer.Fax))", "score": -0.9328306683455594, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are the distinct fax numbers of customers from Portugal?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Email))", "score": -0.9420941814896651, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Portugal), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 170, "beams": [{"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.1993446168206997, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2292985060833189, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.25439786620724175, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.27332950556754604, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2762265111708052, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.2864152695677313, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.29763150531331145, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.31946015027687485, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.32756376066581266, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>,10.91),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3287992370624304, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),Invoice.Total,>,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3338434401415221, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Invoice.Total,>=,10.91),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.35508079451320945, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.3585977477259287, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.3675908531321356, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks with a lower total invoice than 10.91?", "inferred_code": "avg(distinct(filter(getData(Track),Invoice.Total,>,10.91), Track.TrackId),Track.Milliseconds)", "score": -0.381040783508694, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,<,10.91), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 171, "beams": [{"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.08708255050412163, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.09093654705737843, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.10624527766913797, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.16337203292892757, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.19571513040073943, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2683187658871537, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.2864135149681188, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2938967811895239, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.29470016723528686, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))", "score": -0.3025697569228441, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.32431651362956765, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.3585888228246426, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.3590244485688779, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows), MediaType.Name),MediaType.Name))", "score": -0.37075787789899484, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Which media types have the tracks from playlists named TV Shows?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,TV Shows),merge(getData(Track),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.41057458359421845, "correct_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,TV Shows),merge(getData(PlaylistTrack),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 172, "beams": [{"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))", "score": -0.19931036211462436, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.25124323468626303, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.28598859038909336, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.2933176020026539, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29751011092872504, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3280629577054842, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,!=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.33225546746220697, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Album),getData(Album),Artist.ArtistId,Track.GenreId),Artist.Name,=,None),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.3363684885703166, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3630972247431288, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.36755089938437147, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.37407865562929915, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Album),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.37853233027054184, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.3905815315674327, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3940487376897332, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}, {"orig_question": "Is there an album without an album titel?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Album),Album.Title,=,None),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Album.ArtistId), Album.Title),Album.Title))", "score": -0.3950352062086754, "correct_code": "isEmpty(extractValues(distinct(getData(Album), Album.Title),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 173, "beams": [{"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.09287121597964201, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.09680791473301356, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.20218574528066494, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.24285710862919213, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.25135506463818375, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.2594065115841716, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.27583100453783516, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.28347195219184756, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.30207917228864717, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Album.AlbumId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.33179995962019826, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.TrackId),Artist.ArtistId,Album.ArtistId), Track.Bytes),Track.Bytes))", "score": -0.3325658331081497, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.34966405924934985, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.Bytes),Track.Bytes))", "score": -0.3657800866710838, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.3830451288421405, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}, {"orig_question": "How many bytes do the tracks need which are not of Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker),merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),InvoiceLine.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.Bytes),Track.Bytes))", "score": -0.42549278480036373, "correct_code": "sum(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Herbert Von Karajan, Mirella Freni & Wiener Philharmoniker), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 174, "beams": [{"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.3660787299336112, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.36637566453130044, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Employee.BirthDate)", "score": -0.3811560370508482, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Track.UnitPrice)", "score": -0.38307780398311536, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice)", "score": -0.3833747385808046, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.3958704506684402, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.39616738526612943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Track.UnitPrice)", "score": -0.3981551111003524, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Email),Employee.BirthDate)", "score": -0.4088775833240094, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.FirstName),Employee.BirthDate)", "score": -0.4109477577856772, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.4114253621304173, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate)", "score": -0.41172229672810656, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Track.UnitPrice)", "score": -0.4128695247179443, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Invoice),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice)", "score": -0.41316645931563356, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}, {"orig_question": "Give me the positions of all employees born on 1973/07/01", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.SupportRepId),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.State),Employee.BirthDate)", "score": -0.4243666886281653, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,1973-07-01 00:00:00), Employee.Title),Employee.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 175, "beams": [{"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Composer,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.20729740658134688, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3220358711867312, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.33392049278763364, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),Album.AlbumId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.3601779774763572, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3676528148462571, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3723511004534147, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3807796479681882, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.38654643056609594, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Artist),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.3926642695690906, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4003321227878173, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4042112180147078, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.40965113509451523, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.41221680308809766, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Genre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.Milliseconds),Track.Milliseconds))", "score": -0.4160958883471692, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}, {"orig_question": "How long is the least expensive track by M\u00c3\u00b4nica Marianno?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Artist.Name,=,M\u00c3\u00b4nica Marianno), Track.TrackId),Track.Milliseconds)", "score": -0.41977347584713226, "correct_code": "done(extractValues(min(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,M\u00c3\u00b4nica Marianno),Track.UnitPrice),Track.Milliseconds))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 176, "beams": [{"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.06887298915402384, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2289196466299009, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2306583564005494, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.23303357628356025, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2457339024486876, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-07-03 00:00:00),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.Name),Track.Name))", "score": -0.2710846002404392, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2763182159997086, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.2850946087529579, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.29989294772314057, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.30458661387878666, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.BirthDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3149965218203605, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.32358400326375475, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3319955882248329, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.3430239766621882, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}, {"orig_question": "What are the track names with an invoice date after 2013-07-03 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2013-07-03 00:00:00), Track.Name),Track.Name))", "score": -0.35998801068949293, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,>,2013-07-03 00:00:00), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 177, "beams": [{"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Track.Name),Track.Name))", "score": -0.14253199561782076, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.18874622868702745, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.24084764177412232, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.25322337205059575, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.26043152366129796, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2617153252327255, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.26981003628689076, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2775721997634099, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.2790894647464978, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2894133516870223, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.29128580857400016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3010627822133345, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),Track.MediaTypeId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3050726131648322, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Classical 101 - Next Steps), Track.Name),Track.Name))", "score": -0.30628182856836655, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}, {"orig_question": "What are the names of all tracks that are not on the playlist Classical 101 - Next Steps?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical 101 - Next Steps),merge(getData(Track),getData(Track),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.3245028086699495, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Classical 101 - Next Steps),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 178, "beams": [{"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.11011634084954404, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35943952962789594, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.4049596637321033, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.41733885186291386, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Track),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5324266346615918, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5796897563572214, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.5866942216634843, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6253050175311367, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,None), Invoice.InvoiceId),InvoiceLine.Quantity)", "score": -0.6530229050461182, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6542828525104553, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,!=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6617790484429268, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,>=,None),InvoiceLine.Quantity,<=,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6634167315878188, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.6666620406412658, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(InvoiceLine),InvoiceLine.Quantity,null,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.6847280674023205, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}, {"orig_question": "What is the average quantity per invoice?", "inferred_code": "avg(distinct(filter(getData(Invoice),InvoiceLine.Quantity,<,None), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.7121821747454731, "correct_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 179, "beams": [{"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.20598661946260347, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Genre.Name),Track.Name))", "score": -0.2325654142471306, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))", "score": -0.2793239264288831, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Name,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.3052880359328579, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))", "score": -0.310162515641203, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Name,=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.31517235000504124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Composer),Track.Name))", "score": -0.3210429998478162, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Album.Title))", "score": -0.32161061987090966, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3243215330610927, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3320731037800832, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3331455428163827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Elis Regina),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Album.AlbumId,Track.AlbumId),getData(Track),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Track.Name))", "score": -0.3408971149653442, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Composer,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.34311724201079713, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Artist.Name,!=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.350326448334952, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}, {"orig_question": "Are there tracks that don't are in the album with the title No Prayer For The Dying and were created by the artist Elis Regina?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina),Track.Composer,=,Elis Regina),getData(Track),Album.AlbumId,Track.AlbumId), Genre.Name),Track.Name))", "score": -0.3530017005972169, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Artist),merge(filter(getData(Album),Album.Title,!=,No Prayer For The Dying),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Elis Regina), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 180, "beams": [{"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.11621239234099716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.1206994089707174, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.17053600408681524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1801569982204076, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),getData(Track),PlaylistTrack.TrackId,Track.TrackId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.20184307092661288, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.20981975469278685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Classical), Genre.Name),Genre.Name))", "score": -0.21049751206921288, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21103831229241976, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.22756563547939374, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.24360155521283494, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Classical),merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Invoice.BillingAddress),Genre.Name))", "score": -0.24872495801633054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical), Genre.Name),Genre.Name))", "score": -0.25376942351941945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.Name,!=,Classical), Genre.Name),Genre.Name))", "score": -0.25436129616534964, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.271680521707041, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genres that are represented in all playlists excluding the Classical playlist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,=,Classical),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Genre),Track.GenreId,Genre.GenreId), Playlist.Name),Genre.Name))", "score": -0.2751236238490596, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Classical),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 181, "beams": [{"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.City))", "score": -0.2470969220034931, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.State))", "score": -0.2964685817591999, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Country))", "score": -0.37613068123982885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Title))", "score": -0.3979089965455387, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.City))", "score": -0.4182828997604702, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.BirthDate))", "score": -0.41969890495465734, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.FirstName))", "score": -0.4271547307603214, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.State))", "score": -0.46765455951617696, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.FirstName),Employee.City))", "score": -0.5196945962838981, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.State),Employee.City))", "score": -0.5397022066049431, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Address))", "score": -0.5417454948060367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,Johnson), Employee.City),Employee.Country))", "score": -0.5473166589968059, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.City),Employee.Phone))", "score": -0.552092741929755, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.Country),Employee.City))", "score": -0.5545374450616691, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}, {"orig_question": "Where do employees called Johnson come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,Johnson), Employee.BirthDate),Employee.City))", "score": -0.5551783738069389, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,Johnson), Employee.Country),Employee.Country))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 182, "beams": [{"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.05862898688246787, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.2838484694384533, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.47621934884431916, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5073486164346832, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(InvoiceLine), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.5107534309479821, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Track.Composer))", "score": -0.65055023721834, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingPostalCode,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6571800008550781, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6672868624464172, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.6759044423833984, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.7302052288450795, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCity,!=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7325680989906687, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7496271519791683, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Customer.PostalCode))", "score": -0.7544827371038991, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.7620876937307912, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "Give me all postal codes billing in Ireland", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.7840640445956524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Ireland), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 183, "beams": [{"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.06156443086351742, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.08354410226854896, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.17344353496000461, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.2741115372251226, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.2869363076784184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks), Genre.Name),Genre.Name))", "score": -0.30639141471909725, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),Track.GenreId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.30729645957623664, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.30975028343179295, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.31890589931377167, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Genre),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3338579059257555, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(merge(getData(Track),getData(Genre),Track.GenreId,Track.GenreId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3370603571674733, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.3378624040670158, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),getData(Track),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.34173533585922666, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Track.GenreId))", "score": -0.352476025531642, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}, {"orig_question": "What genres are on the Audiobooks playlist?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Playlist.Name,=,Audiobooks),merge(getData(PlaylistTrack),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId), Genre.Name),Genre.Name))", "score": -0.39116783120219184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 184, "beams": [{"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.061185037129591134, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.11899010018977085, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.17148677536067336, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.31540818610380245, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Playlist),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.32033467756881634, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34045196979946785, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,0.99), Playlist.Name),Playlist.Name))", "score": -0.34138341865613875, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Track.UnitPrice,=,0.99),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.34146792534175413, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.36244749962294504, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Employee.FirstName))", "score": -0.367010914240506, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Employee.FirstName))", "score": -0.3677005338290539, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Name,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.38754394333986997, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,Playlist.PlaylistId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))", "score": -0.39733959541480046, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,=,0.99),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.40357127464367476, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}, {"orig_question": "What are the names of the playlists that only have tracks with a unit price of 0.99?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,=,0.99),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Employee.FirstName))", "score": -0.4085543685602291, "correct_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,=,0.99), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 185, "beams": [{"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.25892103935361044, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.2731772743257056, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Invoice.BillingAddress))", "score": -0.27824117993375413, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.2878569404501646, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.30211317542225974, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3053844239086184, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),InvoiceLine.Quantity))", "score": -0.3071770810303083, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3196406588807136, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Invoice.BillingAddress))", "score": -0.3247045644887621, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.3278716940008813, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Track.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.33432032500517256, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.34212792897297645, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),InvoiceLine.Quantity),Track.Milliseconds))", "score": -0.347191834581025, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,Track.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.3485765599772677, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "To which addresses has the track Heartbreaker been sold to?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Heartbreaker),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),InvoiceLine.Quantity))", "score": -0.35364046558531625, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Name,=,Heartbreaker),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 186, "beams": [{"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))", "score": -0.20580152176080446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Company))", "score": -0.22514143340049486, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Country))", "score": -0.31860223166404467, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Country))", "score": -0.33794214330373507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Country),Customer.Company))", "score": -0.38545659310875635, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Country),Customer.Company))", "score": -0.40479650474844675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Country),Customer.Country))", "score": -0.49825730301199656, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Country),Customer.Country))", "score": -0.517597214651687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Phone))", "score": -0.5701594626134465, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.City))", "score": -0.5866160666173528, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.Phone))", "score": -0.5894993742531369, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,AB), Customer.Company),Customer.Company))", "score": -0.5918992137139867, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.State))", "score": -0.6037041222280095, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,AB), Customer.Company),Customer.City))", "score": -0.6059559782570432, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}, {"orig_question": "Which companies are in the state AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.State,=,AB), Customer.Company),Customer.Company))", "score": -0.6181909119313787, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,AB), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 187, "beams": [{"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.007094515031440096, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.46845558272194304, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5269536859938526, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.5302920878981454, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.AlbumId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.5371043699955784, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5437457496801722, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5469880959964746, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.5689891278076212, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.5758014099050542, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5803272261440632, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Track.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.5870282387966014, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6031492905840535, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor),getData(InvoiceLine),Track.TrackId,Album.AlbumId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6054861992683842, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.GenreId,Track.GenreId),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))", "score": -0.6099615404245171, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}, {"orig_question": "Which is the unit price of the track that is named \"Senhora E Senhor\"?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Senhora E Senhor),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.UnitPrice),Track.UnitPrice))", "score": -0.6229622901972119, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,Senhora E Senhor), Track.UnitPrice),Track.UnitPrice))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 188, "beams": [{"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.03930388348141128, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Phone))", "score": -0.583486850814075, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Country))", "score": -0.5917340950787374, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Company))", "score": -0.7335270170877851, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Country),Customer.Company))", "score": -0.8716133337357556, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))", "score": -0.8757965375589843, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.City))", "score": -0.9087270665300707, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.PostalCode))", "score": -0.9145794300464389, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.LastName))", "score": -0.9176102931031541, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Company))", "score": -0.9727280472705554, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Invoice.CustomerId))", "score": -0.9753883700591988, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Company))", "score": -1.0007185317969334, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.BillingCity),Customer.Company))", "score": -1.0336225638501386, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(MediaType), Customer.Company),Customer.Company))", "score": -1.0353693234675299, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}, {"orig_question": "How many different customer companies are there?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.FirstName))", "score": -1.0909224982682038, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 189, "beams": [{"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.07188015431893291, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.2838489371312235, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.28664765258727815, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.3201630569667036, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.32296177242275825, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.34946316820114887, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.3522618836572035, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.3537712330987287, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Genre),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))", "score": -0.37149753261565127, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.385777288036629, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Album.AlbumId), Track.Composer),Track.Composer))", "score": -0.3885760034926836, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.40796007754986263, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4107587748700246, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.4228723063241742, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}, {"orig_question": "Which composers have tracks that are not 159473 milliseconds long?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,159473),getData(Track),Track.TrackId,InvoiceLine.TrackId),getData(Album),Track.TrackId,InvoiceLine.TrackId), Track.Composer),Track.Composer))", "score": -0.42567102178022886, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,159473), Track.Composer),Track.Composer))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 190, "beams": [{"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.04287269290870236, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16136796255970057, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.16418612175398917, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.17748037468301717, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20787381214999992, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2229440581585941, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2359749288526013, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2595225786202986, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27881946912420613, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(getData(Album),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.2797337457397775, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.28108440395299594, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Album),Artist.ArtistId,Album.ArtistId),merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)", "score": -0.283110947425846, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.29763210875833856, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2985330422256639, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total in invoices that include tracks that appear in an album by another artist than Berliner Philharmoniker & Herbert Von Karajan?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan), Invoice.InvoiceId),Invoice.Total)", "score": -0.30299716342443833, "correct_code": "avg(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Berliner Philharmoniker & Herbert Von Karajan),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 191, "beams": [{"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.15877927480348197, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.21145780144955878, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2246995904092679, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2299567229034028, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2411404545709618, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.2595736092649773, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.2965418330261736, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.31122357833506287, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.31225213591105416, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(Customer),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.InvoiceId),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret), Track.TrackId),Track.UnitPrice)", "score": -0.31733412483134005, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Playlist.Name,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,Customer.SupportRepId), Track.TrackId),Track.UnitPrice)", "score": -0.3419347889286908, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.34384419448152576, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3472419854334394, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Invoice.BillingCountry,=,Margaret),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.3492203596722504, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "Whats the average track unit price sold to customers supported by Margaret?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Invoice),Playlist.Name,=,Margaret),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3742070266811595, "correct_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.FirstName,=,Margaret),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 192, "beams": [{"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.14096064887962712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.21239204727135075, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.BillingState))", "score": -0.295920446738819, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.3566964382680453, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.36735184513054264, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.InvoiceDate))", "score": -0.4009488338979281, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Employee.State))", "score": -0.42812783665976895, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.Total))", "score": -0.4496336693318881, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.47238023228965176, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Employee.State))", "score": -0.5116562361272372, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.InvoiceDate),Invoice.Total))", "score": -0.5210650677236117, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.Total),Invoice.BillingState))", "score": -0.5264172258230246, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.BillingState),Invoice.InvoiceDate))", "score": -0.55590863175712, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Austria), Invoice.InvoiceDate),Employee.State))", "score": -0.5830876345189608, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}, {"orig_question": "To which Austian states did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Employee.State),Invoice.BillingState))", "score": -0.5870818497987784, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Austria), Invoice.BillingState),Invoice.BillingState))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 193, "beams": [{"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))", "score": -0.11979853686716524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.3683094870134929, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.37028903527546836, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.38132742144959225, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(merge(filter(getData(Customer),Customer.PostalCode,=,2010),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.Fax),Customer.Fax)", "score": -0.3910847372537582, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.3963521869972241, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.40199050150952464, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.41302888768364854, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.42176733747965583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.43280572365377973, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4502891670372217, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.45345598176413043, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingPostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4534688150559524, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Invoice.BillingPostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4645071208419485, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}, {"orig_question": "What are all fax numbers from customers not with the postal code 2010?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Invoice),getData(Customer),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax)", "score": -0.4783318820494212, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,2010), Customer.Fax),Customer.Fax))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 194, "beams": [{"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.007931076250525823, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.7972053197091995, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.8848461448989846, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.9249849048206631, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.9801730275075461, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -1.0399588672285696, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -1.0412069612614927, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.ArtistId),Artist.Name))", "score": -1.0553489127967712, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -1.0864357557310413, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.PostalCode))", "score": -1.1300016490902898, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.ArtistId))", "score": -1.1325364996291538, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -1.1723095511282016, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.2157317144704778, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.City))", "score": -1.2677128972244434, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "Which artists do we have in our database?", "inferred_code": "done(extractValues(distinct(getData(Artist), Employee.Phone),Artist.Name))", "score": -1.2916116826099884, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 195, "beams": [{"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.04213314085791353, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.3767208322096849, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Fax),Customer.Phone))", "score": -0.44457953005621675, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Fax))", "score": -0.44761209237913135, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Phone),Customer.Phone))", "score": -0.5424744262084275, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.State),Customer.Phone))", "score": -0.5567836347181583, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.City))", "score": -0.5872149621282006, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Album.Title))", "score": -0.6037616287503624, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.State))", "score": -0.6071009789739037, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.City),Customer.Phone))", "score": -0.7032355847914005, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Employee.Phone))", "score": -0.706642345074215, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Employee.HireDate),Customer.Phone))", "score": -0.713176209028461, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.737574981074431, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))", "score": -0.7595334514189744, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}, {"orig_question": "Whats the phone number of customers named Stanis\u0142aw?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Employee.Phone),Customer.Phone))", "score": -0.7683587256033206, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,Stanis\u0142aw), Customer.Phone),Customer.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 196, "beams": [{"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.34474695965506896, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.35594060748757667, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.35877759213635807, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3620885009518969, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3699712399688658, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3732821487844046, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,>,1),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.376119133433186, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,>,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3873127812656937, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.387490826383907, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,0.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.39030181461802715, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,1), Track.TrackId),Invoice.Total)", "score": -0.40816782110418254, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.TrackId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,0.99), Track.TrackId),Invoice.Total)", "score": -0.41097880933830266, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.42062451442234894, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),InvoiceLine.UnitPrice,<,0.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4279397685687644, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on a purchase of tracks that cost more than 0.99 that were purchased more than once per invoice?", "inferred_code": "avg(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Track.TrackId),getData(InvoiceLine),Track.TrackId,Track.TrackId),Track.UnitPrice,<,0.99), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.4307507568028846, "correct_code": "avg(distinct(merge(filter(getData(Track),Track.UnitPrice,>,0.99),filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,!=,1),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 197, "beams": [{"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.26942005952640513, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32530192641291117, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3299418236665513, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.35084864805458643, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36102036952898253, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)", "score": -0.36566026678262264, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blues),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3659194917405532, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,Blues),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3850985170363206, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,Track.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3876309578183953, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Composer,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4013020454283718, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.403227295436606, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Genre.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.403358103225003, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4078672019058164, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Track.Name,=,Blues),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Track.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.40799800969421335, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "Whats the average total invoice for Blues tracks?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.4214956144390531, "correct_code": "avg(distinct(merge(merge(merge(filter(getData(Genre),Genre.Name,=,Blues),getData(Track),Genre.GenreId,Track.GenreId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 198, "beams": [{"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.10284213105114759, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Employee.Address))", "score": -0.18303338194164098, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.37226549664410413, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.45187757292660535, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Invoice.BillingAddress),Employee.Address))", "score": -0.4524567475345975, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.4872012523737794, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.FirstName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.5140277495411283, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Track.Milliseconds),Employee.Address))", "score": -0.5320688238170987, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Country),Employee.Address))", "score": -0.5326794771281129, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Address),Track.Milliseconds))", "score": -0.5673925032642728, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Invoice.BillingAddress))", "score": -0.6054839281168825, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,!=,Michael), Employee.Country),Employee.Address))", "score": -0.6128707280186063, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Invoice.Total),Employee.Address))", "score": -0.6300230411616212, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6304863145378476, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}, {"orig_question": "What are the addresses of the employees that don't have Michael as their first name?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,!=,Michael), Employee.Address),Employee.Address))", "score": -0.6326580693748838, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,!=,Michael), Employee.Address),Employee.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 199, "beams": [{"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Customer.Email),Customer.Email))", "score": -0.28193751350045204, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))", "score": -0.325912032276392, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Customer.Email),Customer.Email))", "score": -0.3283878304064274, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Invoice.Total),Customer.Email))", "score": -0.3545711971819401, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Invoice.Total),Customer.Email))", "score": -0.39854571595788, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Invoice.Total),Customer.Email))", "score": -0.4010215140879154, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Customer.Email),Employee.Email))", "score": -0.40261583402752876, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Employee.Email))", "score": -0.4465903528034687, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Customer.Email),Employee.Email))", "score": -0.4490661509335041, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NY), Customer.Email),Customer.Email))", "score": -0.45564695075154305, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.InvoiceDate,=,NY), Invoice.Total),Employee.Email))", "score": -0.4752495177090168, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Invoice.Total),Employee.Email))", "score": -0.5192240364849567, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.City,=,NY), Invoice.Total),Employee.Email))", "score": -0.5216998346149921, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,=,NY), Customer.Email),Customer.Email))", "score": -0.525376470759511, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}, {"orig_question": "What are the email addresses of customers from New York?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingState,=,NY), Invoice.Total),Customer.Email))", "score": -0.5282806344330311, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,NY), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 200, "beams": [{"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.20544547100121316, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.24101284614695725, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.25244764108996826, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Employee.Address),Employee.Address))", "score": -0.27470636080761324, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.31145854991457994, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.32472474222447023, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,AB), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.33132081232777455, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3379846613368628, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.CustomerId,!=,AB),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34626362452590265, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.Total,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.34702592506032404, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Employee),Employee.Address,=,683 10 Street SW),filter(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingState,!=,AB),Employee.EmployeeId,Customer.SupportRepId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.35056918475580845, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Customer.Address,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.3569424362627552, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Invoice.BillingAddress,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.BillingAddress),Invoice.BillingAddress))", "score": -0.360292180806902, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Employee.Address),Invoice.BillingAddress))", "score": -0.38182435884496985, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the billing addresses of our customers who's rep is the employee with the address 683 10 Street SW and status AB?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Employee.Address))", "score": -0.3978397780265368, "correct_code": "done(extractValues(distinct(filter(merge(filter(getData(Employee),Employee.State,=,AB),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.Address,=,683 10 Street SW), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 201, "beams": [{"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)", "score": -0.03271010118058554, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.6720582435895107, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.7086260783929075, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.7646586883575517, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.771176043093711, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.7740834004089275, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.7806007551450869, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8363170826809635, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8428344374171228, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.8457417947323393, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.8522591494684987, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(getData(InvoiceLine), Invoice.InvoiceId),Invoice.Total)", "score": -0.8735370750810069, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8788004788017328, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.8853178335378922, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average cost of an invoice?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,=,None),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.8882251908531087, "correct_code": "avg(distinct(getData(Invoice), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 202, "beams": [{"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(Track),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.16495936213220522, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.21529891877125903, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24241385445473962, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24805262344858175, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.24929537002869065, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Composer,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2582414025700182, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.27734983280243375, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(merge(filter(getData(Genre),Genre.Name,=,R&B/Soul),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.29000224368616057, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Artist.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3054100211939386, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Artist.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.30765992852465085, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)", "score": -0.3175339219151304, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Track.Composer,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32137772506474144, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3235962259654342, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32362768556160404, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average value of an order that contains track from the R&B/Soul genre?", "inferred_code": "avg(distinct(filter(merge(filter(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,=,R&B/Soul),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.32584618646229685, "correct_code": "avg(distinct(filter(merge(merge(getData(Genre),getData(Track),Genre.GenreId,Track.GenreId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Genre.Name,=,R&B/Soul), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 203, "beams": [{"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.08248681536497315, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.28426276853861054, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.37087102754594525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.3849677961188718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Invoice.InvoiceDate))", "score": -0.4761095732319518, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.Total,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.BirthDate))", "score": -0.480110361786501, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.HireDate),Employee.BirthDate))", "score": -0.48764344079972943, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.HireDate))", "score": -0.5034362166989013, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.State),Employee.BirthDate))", "score": -0.523765762882249, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.City),Employee.BirthDate))", "score": -0.537401279048936, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.5726469807195826, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.City))", "score": -0.6005797475445434, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Employee.State))", "score": -0.6364193647968932, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,1973-07-01 00:00:00), Employee.BirthDate),Track.UnitPrice))", "score": -0.6624992579090758, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}, {"orig_question": "What are the hire dates of employees who are born before 1973-07-01 00:00:00?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Invoice.InvoiceDate),Employee.BirthDate))", "score": -0.6733520082998439, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<=,1973-07-01 00:00:00), Employee.HireDate),Employee.HireDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 204, "beams": [{"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.04756592646299396, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3375296535449385, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3437447525373857, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.34959565400848436, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3558107530009315, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.36427501722831107, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3704901162207582, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.3763410176918569, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Track),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.38255611668430406, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.43214550619007597, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4383606051825231, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.44421150665362175, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Track),InvoiceLine.TrackId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4447068275098469, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),Track.AlbumId,Genre.GenreId),Playlist.PlaylistId,PlaylistTrack.TrackId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.45042660564606896, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}, {"orig_question": "What's the name of the track which contains 5264376 bytes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(Album),getData(Track),Track.AlbumId,Album.AlbumId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Track.Bytes,=,5264376), Track.Name),Track.Name))", "score": -0.4509219265022941, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Bytes,=,5264376), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 205, "beams": [{"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.10930922121224285, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.25612976640877605, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.27832122572181106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.4207782881003368, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.42514177091834426, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.46455730364141345, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5289184102457511, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Customer.PostalCode),Employee.PostalCode))", "score": -0.5469111367729056, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))", "score": -0.5597752580088127, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.56759883329687, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.City))", "score": -0.589690102789973, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Track.Composer))", "score": -0.589790292609905, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Artist.Name))", "score": -0.6101059453230846, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Customer.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6113778488379467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "Which distinct postal codes are associated to employees that have the phone number +1 (403) 262-3443?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Invoice.BillingPostalCode))", "score": -0.6335693081509817, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Phone,=,+1 (403) 262-3443), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 206, "beams": [{"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.1361759541396168, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.19906602183618816, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.PostalCode))", "score": -0.37388185540476115, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.PostalCode))", "score": -0.4367719231013325, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Address,=,IT Manager), Employee.City),Employee.City))", "score": -0.4727720705632237, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.LastName,=,IT Manager), Employee.City),Employee.City))", "score": -0.4734029456813005, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.PostalCode),Employee.City))", "score": -0.47875531519093784, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.City),Employee.Phone))", "score": -0.4952292827729252, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.PostalCode,=,IT Manager), Employee.City),Employee.City))", "score": -0.4985818354252842, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Employee.FirstName,=,IT Manager), Employee.City),Employee.City))", "score": -0.5362930133778718, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.PostalCode),Employee.City))", "score": -0.5416453828875092, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.FirstName,=,IT Manager), Employee.City),Employee.Phone))", "score": -0.5581193504694966, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.City,=,IT Manager), Employee.City),Employee.City))", "score": -0.587291189825919, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,IT Manager), Employee.City),Employee.City))", "score": -0.6118111697796849, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}, {"orig_question": "Which city does our IT Manager come from?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.LastName,=,IT Manager), Employee.Phone),Employee.City))", "score": -0.6203382810417679, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Title,=,IT Manager), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 207, "beams": [{"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))", "score": -0.03896508098114282, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.3608170116959525, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.4014340314315632, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.4382994108204011, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.43903779361762474, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.45233052912168065, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.FirstName),Employee.Phone))", "score": -0.45378288824576885, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.47043657484988294, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.City),Employee.Phone))", "score": -0.47177860338706523, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Customer.SupportRepId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.4948952178793562, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.SupportRepId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.5165201927420733, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Employee.EmployeeId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Employee.Phone))", "score": -0.5165802300227763, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Employee.EmployeeId),Invoice.BillingState,=,AB), Customer.Phone),Employee.Phone))", "score": -0.5305513066132111, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.Country,=,AB), Employee.Phone),Employee.Phone))", "score": -0.53738936514128, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}, {"orig_question": "What are the phone numbers of employees that live in the AB state?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Employee),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId),Invoice.BillingState,=,AB), Employee.Phone),Customer.Phone))", "score": -0.5387574541704637, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.State,=,AB), Employee.Phone),Employee.Phone))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 208, "beams": [{"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.FirstName),Customer.FirstName))", "score": -0.23966948290433523, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.FirstName))", "score": -0.44564457298747584, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.State))", "score": -0.4639052903794436, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.Email))", "score": -0.49214536012641474, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.FirstName))", "score": -0.5012863433503298, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.FirstName))", "score": -0.5017463123940615, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.FirstName),Customer.FirstName))", "score": -0.5135656154297976, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.State))", "score": -0.5195470607422976, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.State))", "score": -0.5200070297860293, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Address),Customer.FirstName))", "score": -0.5219568914317279, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.FirstName),Customer.State))", "score": -0.5318263328217654, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Email),Customer.Country))", "score": -0.5318377173089175, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Address),Customer.State))", "score": -0.5402176088236956, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.Country),Customer.Email))", "score": -0.5477871304892687, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}, {"orig_question": "Is empty?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,192992), Customer.State),Customer.Email))", "score": -0.5482470995330004, "correct_code": "sum(distinct(filter(getData(Track),Track.Milliseconds,>,192992), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 209, "beams": [{"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.10221392512982012, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.14792364727733318, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.163537476734209, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.1943485576211131, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.21018799011291867, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.2200381996339816, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.22528564725365777, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2371092619053198, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Album),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.24364032700024296, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26505798519399704, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), Invoice.BillingCity),Invoice.Total)", "score": -0.26536767060640193, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)", "score": -0.26970871797598023, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.2757241014730309, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Album),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27688159984565913, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average total of invoices containig songs in albums of other artists than Alice In Chains?", "inferred_code": "avg(distinct(merge(filter(getData(Artist),Artist.Name,!=,Alice In Chains),merge(merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Artist.ArtistId,Album.ArtistId), Invoice.BillingCity),Invoice.Total)", "score": -0.27719128525806397, "correct_code": "avg(distinct(filter(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId),Artist.Name,!=,Alice In Chains), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 210, "beams": [{"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.21264268143246576, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2419720903438764, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2571552330169617, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2728036320609354, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.2864846419283723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,Album.ArtistId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.29208991448042504, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.InvoiceDate,!=,Creedence Clearwater Revival),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Genre.GenreId),Invoice.InvoiceId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.3021330334701395, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Track.Composer,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.30269750135483336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3027407343752194, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.30707469792027203, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3182054149944849, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3225393785395375, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.3320647621917707, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,Album.ArtistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,!=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.33639872573682333, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there any genre that the songs from Creedence Clearwater Revival are not of?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),Album.AlbumId,Track.TrackId),Invoice.InvoiceDate,=,Creedence Clearwater Revival), Genre.Name),Genre.Name))", "score": -0.34752944281103615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,!=,Creedence Clearwater Revival),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Genre),Track.GenreId,Genre.GenreId),Artist.ArtistId,Album.ArtistId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 211, "beams": [{"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),Track.UnitPrice),Customer.Address))", "score": -0.23555210466722848, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.23789712667442703, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.23867218883009084, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.27052777858899396, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2706921545676838, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2713028407446577, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,<=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2714672167233476, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.2798281505293652, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.30332280648225074, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.TrackId),getData(Customer),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.30409786863791455, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,!=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.308751358061956, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),Track.Milliseconds),Customer.Address))", "score": -0.3212786032655812, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Name,<=,1),Track.UnitPrice),Customer.Address))", "score": -0.34833338798290175, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Composer,=,1),Track.UnitPrice),Customer.Address))", "score": -0.34966836024611964, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}, {"orig_question": "What is the address of our customer that spent the most money on a single track?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Name,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice),Customer.Address))", "score": -0.35917705477148343, "correct_code": "done(extractValues(max(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),Invoice.Total),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 212, "beams": [{"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.09165944180931389, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.11079490639881294, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.12839838514479843, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.1357976232310299, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2503422210208997, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,!=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.27606761437364186, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.2831111071964424, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Album.AlbumId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.28525200317606425, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2856726090550739, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.2907854386118362, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(PlaylistTrack),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.30072779132542304, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,=,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.30398655796860846, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.31526595842746935, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.Total,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3245033421948554, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}, {"orig_question": "What media type are tracks purchased before 2011-06-24?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Invoice.InvoiceDate,<,2011-06-24 00:00:00), MediaType.Name),MediaType.Name))", "score": -0.3266279033147367, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,<,2011-06-24 00:00:00),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 213, "beams": [{"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.1687784352845787, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.20222643840730592, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.20495696433544966, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.20538449690723043, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.22673222326065362, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.23946253931766626, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2567330436691613, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Wilhelm Kempff),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.26341431584045877, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2700814304713538, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.2729105424403935, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Artist.Name,=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.27449143399524484, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.2934197374878573, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Album.AlbumId,Track.AlbumId), Track.Name),Album.Title))", "score": -0.2981414489097761, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,!=,Wilhelm Kempff),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.AlbumId), Album.Title),Album.Title))", "score": -0.3003273777573728, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}, {"orig_question": "Which tracks are in album not created by Wilhelm Kempff?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Wilhelm Kempff),merge(getData(Album),getData(Track),Album.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId), Track.Name),Album.Title))", "score": -0.302643963531441, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,!=,Wilhelm Kempff),getData(Track),Album.AlbumId,Track.AlbumId), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 214, "beams": [{"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.11530325893287247, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.13145695191418702, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),getData(Album),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.15641906069867656, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.15964657543501137, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.184580657699415, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Album.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.19461566179855083, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.1959868912348141, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))", "score": -0.20578420329428604, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Album),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.20823557772123238, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.2411074484529963, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.AlbumId,InvoiceLine.TrackId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.24514209081111876, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(Artist),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name))", "score": -0.2453595199606421, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Artist),merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),Artist.ArtistId,Album.ArtistId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name)", "score": -0.2708132057896643, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Artist),Artist.Name,=,Santana Feat. Rob Thomas),merge(merge(getData(Album),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Album.ArtistId), MediaType.Name),MediaType.Name))", "score": -0.2737821015134385, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are used for tracks in albums of the artist Santana Feat. Rob Thomas?", "inferred_code": "sum(distinct(filter(merge(merge(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),getData(Track),Album.AlbumId,Track.AlbumId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Artist.Name,=,Santana Feat. Rob Thomas), MediaType.Name),MediaType.Name)", "score": -0.30004858724363453, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(Artist),getData(Album),Artist.ArtistId,Album.ArtistId),Artist.Name,=,Santana Feat. Rob Thomas),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Album.AlbumId,Track.AlbumId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 215, "beams": [{"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.10260822600321262, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.14648153609232395, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.3228582737465331, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Customer.City))", "score": -0.5471599928532669, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingCity),Customer.City))", "score": -0.5910333029423782, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,>=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6312550303955504, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.6800616017972061, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.6902452670001367, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7184720360080248, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.7192419997845718, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Invoice.BillingCity),Customer.City))", "score": -0.7207087204990837, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.7239349118863174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,!=,India), Invoice.BillingPostalCode),Invoice.BillingCity))", "score": -0.734118577089248, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.737184938039718, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in India?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,India), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.7513709467566514, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,India), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 216, "beams": [{"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))", "score": -0.17690090673036113, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.21655996140054096, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.State),Customer.Address))", "score": -0.4268133757874079, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.City),Customer.Address))", "score": -0.5921655392247905, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Address))", "score": -0.5936918745719595, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Address),Customer.Address))", "score": -0.7438093985401792, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Address))", "score": -0.7823197546968004, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Email))", "score": -0.7841978601520223, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.PostalCode),Customer.Address))", "score": -0.7949762395983752, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Invoice.Total),Customer.Address))", "score": -0.8021457030408783, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Invoice.InvoiceId),Customer.Address))", "score": -0.8053870552563575, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.8238569148222021, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), InvoiceLine.UnitPrice),Customer.Address))", "score": -0.8297934289582182, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(getData(Customer), InvoiceLine.InvoiceLineId),Customer.Address))", "score": -0.8649420301515703, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}, {"orig_question": "How many different addresses of costumers exist in the customer database?", "inferred_code": "count(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Invoice.InvoiceId))", "score": -0.8726469728135271, "correct_code": "count(extractValues(distinct(getData(Customer), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 217, "beams": [{"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.08819882737084324, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.LastName))", "score": -0.4639999425188478, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.ArtistId))", "score": -0.48732717518732216, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.Phone))", "score": -0.6612149696039479, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "isEmpty(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.6917633915738655, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Employee.FirstName))", "score": -0.7473921512984345, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.LastName))", "score": -0.7650392393440139, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "count(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))", "score": -0.8291303020095199, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Album.Title))", "score": -0.8410047840503476, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Customer.Phone))", "score": -0.8442203788103528, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Customer), Artist.Name),Artist.Name))", "score": -0.870431726253436, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Genre.Name))", "score": -0.9092344913184776, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Album), Artist.Name),Artist.Name))", "score": -0.9304572933210047, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Customer.Phone),Artist.Name))", "score": -1.004300265082351, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}, {"orig_question": "What are all different artist names?", "inferred_code": "done(extractValues(distinct(getData(Artist), Album.Title),Artist.Name))", "score": -1.0183070333407025, "correct_code": "done(extractValues(distinct(getData(Artist), Artist.Name),Artist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 218, "beams": [{"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.13697138982206525, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.30760586815267743, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.PostalCode))", "score": -0.35540696041971387, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.37016900437265576, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.3736845459261531, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Employee.City))", "score": -0.4204342569628352, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.Company))", "score": -0.447762539557516, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Employee.City),Invoice.BillingCity))", "score": -0.5062176463598007, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Employee.PostalCode))", "score": -0.526041438750326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.540803482703268, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Customer.PostalCode))", "score": -0.54119568126589, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Artist.Name))", "score": -0.5443190242567653, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.5444940131076882, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingPostalCode))", "score": -0.5614236201563472, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Name cities with an invoice created after 2013-03-01 00:00:00.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.InvoiceDate,<,2013-03-01 00:00:00), Invoice.BillingCity),Customer.City))", "score": -0.5717345407195831, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.InvoiceDate,>=,2013-03-01 00:00:00), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 219, "beams": [{"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.06750913062842301, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.2563223438874047, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.30400558845849446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.46621074626000336, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.Total))", "score": -0.485143148393945, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.Total),Invoice.BillingState))", "score": -0.49281880171747616, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.509353722499327, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.5910039200052779, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.BillingState))", "score": -0.6160987513676446, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Employee.State))", "score": -0.6550239595189851, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Customer.State))", "score": -0.6667593950942319, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingAddress),Invoice.BillingState))", "score": -0.6728839530214827, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,S\u00c3\u00b8nder Boulevard 51), Employee.State),Invoice.BillingState))", "score": -0.6734700454935592, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.BillingState),Invoice.Total))", "score": -0.6739563616529267, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}, {"orig_question": "In which state is the address S\u00c3\u00b8nder Boulevard 51?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,S\u00c3\u00b8nder Boulevard 51), Invoice.InvoiceDate),Invoice.BillingState))", "score": -0.6981669357583087, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Address,=,S\u00c3\u00b8nder Boulevard 51), Customer.State),Customer.State))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 220, "beams": [{"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.1569790481171367, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3191482587299106, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.33329060809228395, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.3421074314555881, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.36412616209599946, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.37513719634625886, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>=,2002-05-01 00:00:00), Employee.PostalCode),Track.Composer))", "score": -0.43052859367344354, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,<=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.43792079524610017, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.49545981870505784, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.504276642068362, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Invoice.InvoiceDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5373064069590328, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,<,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5404377220711467, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5492545454344508, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Track.UnitPrice,>=,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5599768566480634, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}, {"orig_question": "What are the distinct postal codes of employees that were hired after May 1st 2002?", "inferred_code": "done(extractValues(distinct(filter(getData(Employee),Employee.BirthDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))", "score": -0.5822842749348638, "correct_code": "done(extractValues(distinct(filter(getData(Employee),Employee.HireDate,>,2002-05-01 00:00:00), Employee.PostalCode),Employee.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 221, "beams": [{"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.07677541842898826, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.13885732050438823, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.1977544519704443, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.1994561250595013, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2030620643460674, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(merge(filter(getData(Employee),Employee.State,=,AB),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.22608176037829716, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2445479507854507, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),Invoice.InvoiceId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.24483460205651952, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.Country,=,AB),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.Milliseconds)", "score": -0.24638283643055942, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Track.TrackId),Track.Milliseconds)", "score": -0.25552235899608444, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),Employee.State,=,AB),merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.258173272907072, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.2598989931500189, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Milliseconds)", "score": -0.2706602022674909, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(merge(filter(getData(Employee),Employee.State,=,AB),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Employee.EmployeeId,Customer.SupportRepId), Track.TrackId),Track.Milliseconds)", "score": -0.2707373976830467, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}, {"orig_question": "What is the average length of tracks sold by employees with the status AB?", "inferred_code": "avg(distinct(filter(merge(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.Country,=,AB), Track.TrackId),Track.Milliseconds)", "score": -0.3092344530657633, "correct_code": "avg(distinct(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Customer.CustomerId,Invoice.CustomerId),Employee.State,=,AB), Track.TrackId),Track.Milliseconds)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 222, "beams": [{"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.046990922847963496, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.08748686952599179, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.29815028779444186, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.32877269685137167, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(merge(getData(Track),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.35265796612416317, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.35628952994145546, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file), Album.Title),Album.Title))", "score": -0.36828062059691696, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),merge(merge(getData(Track),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4019800543369555, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.GenreId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.40899783957791325, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Track),Album.AlbumId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4161479045922281, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Track),PlaylistTrack.TrackId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.4210222794904746, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.423941352454884, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4333419872213954, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),Genre.GenreId,Track.MediaTypeId),MediaType.Name,=,AAC audio file),getData(Album),Track.AlbumId,Album.AlbumId), Album.Title),Album.Title))", "score": -0.456250775658743, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}, {"orig_question": "What are the albums with the shortes tracks in AAC audio file format?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(MediaType),Customer.LastName,=,AAC audio file),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),MediaType.MediaTypeId,Track.MediaTypeId), Album.Title),Album.Title))", "score": -0.4880007606763303, "correct_code": "done(extractValues(min(merge(merge(filter(getData(MediaType),MediaType.Name,=,AAC audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 223, "beams": [{"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.16330167630285936, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Milliseconds,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.18105157518476905, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.21746930855346314, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.2442309042761285, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.24936248252509127, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.Bytes,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2554837805303149, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.25635875743156483, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Bytes,>=,153600),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.26154969609646733, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2735849200966541, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),Track.UnitPrice,>=,153600),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId), Playlist.Name),Playlist.Name))", "score": -0.2756976312085741, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Composer,<=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2913348189785638, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.UnitPrice,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.2970535291737454, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Track),Track.Bytes,>=,153600),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId), Playlist.Name),Playlist.Name))", "score": -0.30592309820757113, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Invoice.Total,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.31212364279407256, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}, {"orig_question": "Which playlists contain tracks as long as or longer than 153600?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(PlaylistTrack),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.TrackId,PlaylistTrack.TrackId),Track.Composer,>=,153600), Playlist.Name),Playlist.Name))", "score": -0.33129424105801836, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(PlaylistTrack),Track.TrackId,PlaylistTrack.TrackId),getData(Playlist),PlaylistTrack.PlaylistId,Playlist.PlaylistId),Track.Milliseconds,>=,153600), Playlist.Name),Playlist.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 224, "beams": [{"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.10765070974550009, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.17956788087273445, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.18470623877234296, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24067720445410587, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.26727521494913026, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.27365619999169793, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2958591171703567, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3113404113350556, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(filter(getData(Track),Track.Milliseconds,>=,260231),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.31141650328969517, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.Milliseconds,>=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3124328661166339, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3268271621002261, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,<=,260231), Invoice.InvoiceId),Invoice.Total)", "score": -0.3322977854139145, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,<=,260231),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.3421387592942914, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.3682048115012979, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the sum of all invoices in which tracks, longer or equal 260231 milliseconds, has been ordered more than once?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,>=,260231),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.38160042025903573, "correct_code": "sum(distinct(merge(filter(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Milliseconds,>=,260231),InvoiceLine.Quantity,>,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 225, "beams": [{"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.12132866282575026, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.17425710900998023, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.19897376282433007, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.Quantity)", "score": -0.2369244835869571, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,<,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.24551677290126026, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),Track.UnitPrice)", "score": -0.2519022090085601, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,!=,12,Community Centre), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3033730323026244, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Invoice.Total)", "score": -0.311539383874035, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.3138285870901996, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Track.TrackId),InvoiceLine.Quantity)", "score": -0.31456958358553694, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.Milliseconds)", "score": -0.32135822515471285, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3352342742435854, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingAddress,<,12,Community Centre), Invoice.InvoiceId),InvoiceLine.UnitPrice)", "score": -0.3400878980303207, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Track),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), InvoiceLine.InvoiceLineId),Track.UnitPrice)", "score": -0.3667570332744296, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}, {"orig_question": "How much is the average unit price of the tracks sold with the exception of those containing the billing address 12,Community Centre?", "inferred_code": "avg(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,=,12,Community Centre),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Track.UnitPrice)", "score": -0.38816272042781536, "correct_code": "avg(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,!=,12,Community Centre), Track.TrackId),Track.UnitPrice)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 226, "beams": [{"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.18499227951064962, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.20328095891588596, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.24894034756695588, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.LastName))", "score": -0.25175925110315633, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.27219162521388834, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.PostalCode))", "score": -0.27431643637645375, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.PostalCode))", "score": -0.28413089921171514, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.LastName))", "score": -0.2846706012277752, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.2945285969788975, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.PostalCode),Customer.LastName))", "score": -0.30213116095469955, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))", "score": -0.3040554163018687, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.PostalCode))", "score": -0.317042249336334, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.LastName),Customer.PostalCode))", "score": -0.32193863916235604, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,=,1), Customer.PostalCode),Customer.LastName))", "score": -0.3363334278040671, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}, {"orig_question": "Which customers ordered tracks once per invoice?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.LastName))", "score": -0.3412877650590304, "correct_code": "done(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,=,1), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 227, "beams": [{"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.3239130036571244, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.32535081501535407, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.Bytes,<,1.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Track.Name))", "score": -0.3455693316057323, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,<,1.99), Track.Composer),Track.Name))", "score": -0.35182296742819563, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceDate,<,1.99), Track.Composer),Track.Name))", "score": -0.3532607787864253, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.BirthDate,<,1.99), Track.Composer),Track.Name))", "score": -0.3563564555028168, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Employee.BirthDate,<,1.99), Track.Composer),Track.Name))", "score": -0.3577942668610465, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.37861979163788506, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Composer),Track.Name))", "score": -0.38005760299611474, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.38415754411077135, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Name),Track.Name))", "score": -0.38559535546900103, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,<,1.99), Track.Composer),Track.Name))", "score": -0.3883540578849649, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,<,1.99), Track.Composer),Track.Name))", "score": -0.38979186453616904, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Track.UnitPrice,<,1.99), Track.Milliseconds),Track.Name))", "score": -0.40536274947741524, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}, {"orig_question": "What are the addresses on invoices that had a total cost of lower than 1.99?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.TrackId),Invoice.InvoiceDate,<,1.99), Track.Composer),Track.Name))", "score": -0.4065297507019307, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.Total,<=,1.99), Invoice.BillingAddress),Invoice.BillingAddress))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 228, "beams": [{"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.02988007670137449, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.3801821651867194, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.3917879575890378, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.State),Customer.City))", "score": -0.4358865120993869, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4371905757106182, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.44859137880995176, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.45008106934289166, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.45303326313732584, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.4645286127401601, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(Invoice),Invoice.CustomerId,Invoice.CustomerId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.46726047612453503, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler),getData(Customer),Customer.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.46942792419814416, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Customer),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.4855642740108674, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(merge(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),Invoice.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.4867203603936628, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))", "score": -0.5077485088804679, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}, {"orig_question": "Which is the city of customers with last name equal to K\u00c3\u00b6hler", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Customer.LastName,=,K\u00c3\u00b6hler),getData(Customer),Invoice.CustomerId,Invoice.CustomerId), Customer.City),Customer.City))", "score": -0.5135337983486749, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,K\u00c3\u00b6hler), Customer.City),Customer.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 229, "beams": [{"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2571893179432944, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2658497178354146, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2728161998759874, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.AlbumId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.28147659976810757, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.28398639467106235, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.29264679456318254, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.MediaTypeId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2935108095346105, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.29580688772693975, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.2996132766037553, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.MediaTypeId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3021712094267307, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3082736764958755, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.AlbumId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.30913769146730347, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Playlist),Track.AlbumId,Invoice.InvoiceId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.31779809135942366, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(MediaType),Track.TrackId,MediaType.MediaTypeId),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))", "score": -0.3288537625606783, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}, {"orig_question": "What byte size do the tracks have that aren't 291866 milliseconds long? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Track),Track.Milliseconds,!=,291866),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),Track.AlbumId,MediaType.MediaTypeId), Track.Bytes),Track.Bytes))", "score": -0.4386455620783007, "correct_code": "done(extractValues(distinct(filter(getData(Track),Track.Milliseconds,!=,291866), Track.Bytes),Track.Bytes))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 230, "beams": [{"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.0464860365500499, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.30053539069456764, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3177584869062656, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.3188045687168876, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38849092617890985, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.38945395873949706, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4051683498705219, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4244368164223421, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4270080352907826, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43003141268547174, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.43180256511929993, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(InvoiceLine),Customer.CustomerId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4411152790151448, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingAddress,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))", "score": -0.4434770370608021, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Employee.PostalCode))", "score": -0.5189016057884146, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}, {"orig_question": "To which postal codes in Brazil did we send invoices?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Track.Composer),Invoice.BillingPostalCode))", "score": -0.5205324941089202, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingCountry,=,Brazil), Invoice.BillingPostalCode),Invoice.BillingPostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 231, "beams": [{"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.2596149871382212, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.30325091445539926, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.31061445531500304, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.31062453320198535, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3161309431075931, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,InvoiceLine.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3306082800678391, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Track),Track.Name,=,1.99),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33242369306262876, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,Track.GenreId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3326922187368697, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.33589897907799204, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Track.AlbumId,PlaylistTrack.TrackId),Playlist.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.33605411706768035, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),InvoiceLine.TrackId,PlaylistTrack.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3363628757954399, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.3439089147495694, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(Track),getData(Track),Genre.GenreId,PlaylistTrack.TrackId),Track.Name,=,1.99),getData(Album),Track.AlbumId,Album.AlbumId),Track.Milliseconds),Album.Title))", "score": -0.3564200412210497, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(merge(filter(getData(Track),Track.Name,=,1.99),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.TrackId,Track.TrackId),Track.Milliseconds),Album.Title))", "score": -0.35806161372200074, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}, {"orig_question": "In what album can I find a song that cost 1.99 and is the longest ever?", "inferred_code": "done(extractValues(max(filter(merge(getData(Track),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Track.AlbumId,PlaylistTrack.TrackId),Track.Name,=,1.99),Track.Milliseconds),Album.Title))", "score": -0.3775482880012957, "correct_code": "done(extractValues(max(filter(merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.UnitPrice,=,1.99),Track.Milliseconds),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 232, "beams": [{"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.014851087526039919, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.City))", "score": -0.5305397406300472, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.LastName),Customer.PostalCode))", "score": -0.6133818268390314, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),InvoiceLine.InvoiceLineId))", "score": -0.6426638260563777, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6550480784462707, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Phone,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6629129709290282, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Employee.PostalCode))", "score": -0.6792813435276912, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,!=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.685096995843196, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.City),Customer.PostalCode))", "score": -0.6861628532024042, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.LastName))", "score": -0.6870285168370174, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Album.Title,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.6952394308136718, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Email,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7102702917145507, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Employee.PostalCode),Customer.PostalCode))", "score": -0.7235085606189386, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.Company),Customer.PostalCode))", "score": -0.7398094176860468, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}, {"orig_question": "What is the postal code of the customer with the fax number +55 (12) 3923-5566?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.State,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))", "score": -0.7429930628823058, "correct_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Fax,=,+55 (12) 3923-5566), Customer.PostalCode),Customer.PostalCode))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 233, "beams": [{"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.Name))", "score": -0.031153935884406223, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Employee.FirstName))", "score": -0.6610787639619832, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Employee.FirstName),Playlist.Name))", "score": -0.7308575000968957, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), MediaType.Name),Playlist.Name))", "score": -0.7587131462689063, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), PlaylistTrack.PlaylistId),Playlist.Name))", "score": -0.7609236110945998, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(PlaylistTrack), Playlist.Name),Playlist.Name))", "score": -0.7700731814099229, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.FirstName),Playlist.Name))", "score": -0.8119652964943437, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(MediaType), Playlist.Name),Playlist.Name))", "score": -0.8192141038950873, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),MediaType.Name))", "score": -0.8394631569776898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Invoice.BillingState),Playlist.Name))", "score": -0.8528735795717297, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),PlaylistTrack.PlaylistId))", "score": -0.9242409565471676, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Customer.FirstName))", "score": -0.9315953309125946, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Playlist.Name),Playlist.PlaylistId))", "score": -0.9430605382924327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Playlist), Customer.Country),Playlist.Name))", "score": -0.9549777918967167, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any playlists named Audiobooks?", "inferred_code": "isEmpty(extractValues(distinct(getData(Customer), Playlist.Name),Playlist.Name))", "score": -0.9806869015633778, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 234, "beams": [{"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),InvoiceLine.UnitPrice)", "score": -0.1742360232103765, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Invoice.Total)", "score": -0.25027355748700275, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Track.UnitPrice)", "score": -0.27317589051893604, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),Track.Milliseconds)", "score": -0.36393327094126754, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(getData(Track),Track.Milliseconds,<,182883), Track.TrackId),InvoiceLine.Quantity)", "score": -0.4327698176207037, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4403084020483712, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.4550623337275299, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5127304582555832, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5191354378618313, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,182883),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5202301206602368, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.Quantity,<,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5245982149484116, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.InvoiceId,InvoiceLine.TrackId),InvoiceLine.UnitPrice,<,182883),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5256929355144282, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,>=,1),getData(Track),Track.TrackId,InvoiceLine.TrackId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5274843990085342, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(filter(filter(merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),InvoiceLine.Quantity,<,1), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5325352962601242, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the average sum spent on an order of tracks shorter than 182883 ordered more than once or once per order?", "inferred_code": "avg(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),InvoiceLine.Quantity,<=,1),getData(InvoiceLine),Track.TrackId,Invoice.InvoiceId), InvoiceLine.InvoiceLineId),InvoiceLine.UnitPrice)", "score": -0.5448365430315512, "correct_code": "sum(distinct(merge(filter(getData(Track),Track.Milliseconds,<,182883),merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,>=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 235, "beams": [{"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.08158578083016493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))", "score": -0.1284955696804257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.14956173034408238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.15983163295224412, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.18840875165927554, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,1016),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.21664150510565458, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.23578189696537996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.24507251974835842, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,1016),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Genre.Name),Genre.Name))", "score": -0.24843084552188222, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.2572724152698251, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Genre),Track.GenreId,Genre.GenreId),Genre.Name,!=,1016), Genre.Name),Genre.Name))", "score": -0.28880837912768426, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,=,1016),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId), Genre.Name),Genre.Name))", "score": -0.2943972459002721, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(MediaType),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.30666191547851923, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),Invoice.BillingPostalCode,!=,1016), Genre.Name),Genre.Name))", "score": -0.31114464359105054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}, {"orig_question": "Are there genre names of tracks for whom there are invoices issued in a Postal Code different than 1016 ? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),InvoiceLine.TrackId,Track.TrackId),Invoice.BillingPostalCode,=,1016), Genre.Name),Genre.Name))", "score": -0.3136784358896813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingPostalCode,!=,1016),getData(Genre),Track.GenreId,Genre.GenreId), Genre.Name),Genre.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 236, "beams": [{"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.Company))", "score": -0.38076454407541044, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingCountry),Customer.Company))", "score": -0.4304873827404664, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4480586208031039, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4535095380679722, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Company),Customer.LastName))", "score": -0.456296329646144, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4729545022081369, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<=,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4784054194730052, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.4822465449112563, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,<=,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Customer.Company),Customer.Company))", "score": -0.48544439952400664, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingCountry),Customer.Company))", "score": -0.48900162738518416, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4901774490218808, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,>,1),getData(Invoice),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.49562836628674906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.4959642707079493, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Customer),Invoice.CustomerId,Invoice.InvoiceId), Invoice.BillingAddress),Customer.Company))", "score": -0.49839871997545865, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}, {"orig_question": "Are there any companies that ordered more than one track per invoice?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(InvoiceLine),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.Quantity,<,1),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingPostalCode),Customer.Company))", "score": -0.5014151879728176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.Quantity,>,1), Customer.Company),Customer.Company))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 237, "beams": [{"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.16541313726868445, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(getData(Track),Track.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.18367746296636472, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.20227704683865744, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.26919670441395105, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.UnitPrice,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.3060606139839241, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3064093279634554, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.32668964010171897, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.33004562694980977, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.3374582554539916, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Invoice),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Invoice.Total,>=,0.99),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.34531078479396576, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceDate,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.363553549671692, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.Total,>=,0.99), Track.TrackId),Track.UnitPrice)", "score": -0.36690953651978275, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),Track.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.37518134426007266, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(Track),InvoiceLine.UnitPrice,>=,0.99),getData(InvoiceLine),Track.TrackId,Track.TrackId),getData(Track),InvoiceLine.TrackId,Track.TrackId), Track.TrackId),Track.Bytes)", "score": -0.375385109874677, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}, {"orig_question": "How much is the sum of all tracks wit a unit price of 1.99 or more?", "inferred_code": "sum(distinct(filter(merge(getData(Track),merge(getData(InvoiceLine),getData(Track),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.BirthDate,>=,0.99), Track.TrackId),Track.Bytes)", "score": -0.3795031746295452, "correct_code": "count(extractValues(distinct(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId), Customer.LastName),Customer.LastName))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 238, "beams": [{"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.16010785421938564, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.16607270523885004, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.TrackId), Track.Name),Track.Name))", "score": -0.18114766553793687, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.18405381441809796, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20214967123924604, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20376516251092713, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20811452225871044, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Album),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.20907951727267488, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Track.TrackId), Track.Name),Track.Name))", "score": -0.23731768742972378, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.25683746045080774, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),merge(getData(Track),getData(Album),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.26215186978470356, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.262853007320824, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks),getData(Track),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2788706352214277, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(InvoiceLine),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.GenreId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.2809328709269158, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}, {"orig_question": "What are the tracks contained on all the playlists except Audiobooks?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(Playlist),Playlist.Name,!=,Audiobooks),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(merge(getData(Track),getData(Track),PlaylistTrack.TrackId,Track.TrackId),getData(Genre),Track.AlbumId,Genre.GenreId),PlaylistTrack.TrackId,Track.TrackId), Track.Name),Track.Name))", "score": -0.28780287616158284, "correct_code": "done(extractValues(distinct(filter(merge(getData(Playlist),merge(getData(PlaylistTrack),getData(Track),PlaylistTrack.TrackId,Track.TrackId),Playlist.PlaylistId,PlaylistTrack.PlaylistId),Playlist.Name,!=,Audiobooks), Track.Name),Track.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 239, "beams": [{"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Address))", "score": -0.28132597382179797, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.2857943565335789, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.3281947704227622, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Invoice.BillingState),Customer.Address))", "score": -0.3411811225380871, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Address))", "score": -0.3456541081671238, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,<,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))", "score": -0.3501224908789047, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.35816007186786564, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,>,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.FirstName),Customer.Address))", "score": -0.3608086616791619, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(InvoiceLine),InvoiceLine.UnitPrice,!=,0.99),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Country),Customer.Address))", "score": -0.36202389828681597, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Invoice.BillingCountry))", "score": -0.40216821157023563, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Country))", "score": -0.4056727000826612, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Customer.Address))", "score": -0.41645634391622577, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Customer.Country))", "score": -0.41864242352798164, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(InvoiceLine),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.UnitPrice,!=,0.99), Customer.Address),Invoice.BillingState))", "score": -0.42765961149941056, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}, {"orig_question": "How many customers have purchased track more expensive than 0.99?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(InvoiceLine),merge(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),getData(Customer),Invoice.CustomerId,Customer.CustomerId),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,!=,0.99), Invoice.BillingCountry),Invoice.BillingState))", "score": -0.4311734628588887, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),InvoiceLine.UnitPrice,>,0.99),getData(Customer),Invoice.CustomerId,Customer.CustomerId), Customer.Address),Customer.Address))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 240, "beams": [{"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))", "score": -0.03348198561246974, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Email))", "score": -0.5218697158634313, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Email))", "score": -0.5416215030491003, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "sum(distinct(getData(Customer), Customer.Email),Customer.Email)", "score": -0.7531279880438486, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Address))", "score": -0.7736910583335899, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Address),Customer.Email))", "score": -0.779039579574584, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Fax))", "score": -0.8238126377496388, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.State))", "score": -0.8644506125569115, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.State),Customer.Email))", "score": -0.9952919586628661, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Fax),Customer.Email))", "score": -1.052890593242168, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.FirstName))", "score": -1.08027621404349, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Country,=,None), Customer.Email),Customer.Address))", "score": -1.0955144703402766, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Invoice), Customer.Email),Customer.Email))", "score": -1.1083650929917335, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.FirstName,=,None), Customer.Email),Customer.Address))", "score": -1.1152662575259455, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}, {"orig_question": "What are the Emails of all Customers?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.LastName))", "score": -1.1409114746770883, "correct_code": "done(extractValues(distinct(getData(Customer), Customer.Email),Customer.Email))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 241, "beams": [{"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.06651138556936834, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.09939481591694808, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(InvoiceLine),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.17280754047485883, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.17776768822554867, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(MediaType),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.20271583199592547, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2370723821705556, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.26014748944670363, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Playlist.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.2697570823735197, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.27247173375984635, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.MediaTypeId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.30476917666140396, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.Name,=,MPEG audio file), Track.UnitPrice),Invoice.InvoiceDate))", "score": -0.30679184506853135, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(MediaType),MediaType.Name,=,MPEG audio file),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3197694457691667, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3245134326143587, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.32502194993099587, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}, {"orig_question": "On which dates did we sell tracks with the media type MPEG audio file?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(MediaType),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),Track.TrackId,Invoice.InvoiceId),MediaType.Name,=,MPEG audio file), Invoice.InvoiceDate),Invoice.InvoiceDate))", "score": -0.3351195578567441, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,=,MPEG audio file),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.InvoiceDate),Invoice.InvoiceDate))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 242, "beams": [{"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.125270429867669, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.17525058599130716, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.2611601761163911, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Customer.City))", "score": -0.4179604815872153, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.4202378651680192, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.BillingCity),Customer.City))", "score": -0.4679406377108535, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,NS), Invoice.BillingCity),Customer.City))", "score": -0.5538502278359374, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.570003345477744, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,null,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.573840197044774, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,!=,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.6199835016013822, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<=,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6311070284427842, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingState),Invoice.BillingCity))", "score": -0.665481850373908, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.InvoiceDate))", "score": -0.6764139699371299, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,<,NS), Invoice.BillingCity),Invoice.BillingCity))", "score": -0.6789112648548326, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}, {"orig_question": "Which billing cities are in the state NS?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,>,NS), Invoice.InvoiceDate),Invoice.BillingCity))", "score": -0.7058930917264661, "correct_code": "done(extractValues(distinct(filter(getData(Invoice),Invoice.BillingState,=,NS), Invoice.BillingCity),Invoice.BillingCity))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 243, "beams": [{"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.1957308117076743, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.Total))", "score": -0.2267117070082862, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.227763030621227, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.25759882597125444, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.BillingAddress))", "score": -0.26058124960726486, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), MediaType.Name),Invoice.Total))", "score": -0.26231025936315533, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.Total),Invoice.Total))", "score": -0.2626144393638401, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Customer.Address))", "score": -0.2674508609357759, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.2756306564760537, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),Playlist.PlaylistId,Track.MediaTypeId), MediaType.Name),Invoice.Total))", "score": -0.2896310448848071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Invoice.BillingAddress))", "score": -0.2926134685208175, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(Playlist),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),Customer.Address))", "score": -0.2994830798493286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId), Invoice.BillingState),Invoice.Total))", "score": -0.3005001679079198, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(MediaType),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),MediaType.Name,!=,Portugal),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Track.TrackId,InvoiceLine.TrackId), Invoice.BillingState),Customer.Address))", "score": -0.3019412259678313, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}, {"orig_question": "Are there any orders from Portugal for which the file type was not specified?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(MediaType),MediaType.Name,!=,Portugal),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),MediaType.MediaTypeId,Track.MediaTypeId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId), Invoice.BillingState),Invoice.BillingAddress))", "score": -0.3031613527092833, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(Invoice),merge(getData(InvoiceLine),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),InvoiceLine.TrackId,Track.TrackId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.BillingCountry,=,Portugal), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 244, "beams": [{"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(getData(Customer), MediaType.Name),MediaType.Name))", "score": -0.2447684000754339, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(getData(InvoiceLine), MediaType.Name),MediaType.Name))", "score": -0.3231172896667528, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3251260943267302, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3619306370464257, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),MediaType.MediaTypeId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38225693704672037, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),Genre.GenreId,Track.MediaTypeId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.38245143798916326, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.3991841279690218, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4034393015114331, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.40787764687938716, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Invoice.InvoiceId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4085172412959331, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),MediaType.MediaTypeId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.41176179287665543, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.GenreId), MediaType.Name),MediaType.Name))", "score": -0.43010631006190436, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(Invoice),getData(Track),Genre.GenreId,Track.GenreId),Genre.Name,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId), MediaType.Name),MediaType.Name))", "score": -0.4406927924340292, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(Invoice),Invoice.BillingCountry,!=,Audiobooks),getData(Track),MediaType.MediaTypeId,Track.GenreId),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.4434888896221924, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}, {"orig_question": "How many different media types are there which are not Audiobooks?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingAddress,!=,Audiobooks),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),MediaType.MediaTypeId,Track.MediaTypeId), MediaType.Name),MediaType.Name))", "score": -0.44364268564045434, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(Playlist),getData(PlaylistTrack),Playlist.PlaylistId,PlaylistTrack.PlaylistId),merge(getData(Track),getData(MediaType),Track.MediaTypeId,MediaType.MediaTypeId),PlaylistTrack.TrackId,Track.TrackId),Playlist.Name,!=,Audiobooks), MediaType.Name),MediaType.Name))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 245, "beams": [{"orig_question": "who are you", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.UnitPrice))", "score": -0.40552627136639785, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.44408519165499827, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.4682982559806719, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.UnitPrice))", "score": -0.4759599463795894, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.UnitPrice)", "score": -0.4840830099585694, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.UnitPrice,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.4845435761162543, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(getData(Track), Track.TrackId),Track.Milliseconds)", "score": -0.4873601553612039, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "count(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.Bytes))", "score": -0.5145468621485634, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.5642768904330449, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.UnitPrice),Track.Bytes))", "score": -0.5883595170234912, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Bytes,=,None), Track.TrackId),Track.UnitPrice)", "score": -0.6199135439742764, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "avg(distinct(filter(getData(Track),Track.Name,=,None), Track.TrackId),Track.Milliseconds)", "score": -0.6499344350071053, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "done(extractValues(distinct(filter(getData(Track),Track.Name,=,None), Track.Bytes),Track.UnitPrice))", "score": -0.674075291470217, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(Track),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.6981801005197141, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}, {"orig_question": "who are you", "inferred_code": "sum(distinct(merge(filter(getData(Track),Track.Name,=,None),merge(getData(Track),getData(InvoiceLine),Track.TrackId,InvoiceLine.TrackId),Album.AlbumId,Track.AlbumId), Track.TrackId),Track.UnitPrice)", "score": -0.7115101659033277, "correct_code": "sum(distinct(getData(Track), Track.TrackId),Track.Bytes)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 246, "beams": [{"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.12443892689119933, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.1654868436595494, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.21658077574840554, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,=,1),getData(Track),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.25762869251675563, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.26592449728230716, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,<=,1),Track.UnitPrice),Album.Title))", "score": -0.29692007421179767, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(filter(merge(getData(Genre),merge(getData(Track),getData(Album),Track.AlbumId,Album.AlbumId),Genre.GenreId,Track.GenreId),Album.Title,=,1),Track.UnitPrice),Album.Title))", "score": -0.3014489948102969, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Track),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3060217948637189, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Genre.GenreId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3069724140506572, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Genre),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.31096430402523034, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Album.Title,!=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3243376232368861, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Artist),Album.Title,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3316801340460607, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Genre),Artist.Name,=,1),getData(Track),Album.AlbumId,Track.AlbumId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3466777848823999, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(Album),Album.Title,=,1),getData(Track),Album.AlbumId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.35806633250298336, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}, {"orig_question": "What is the album which has been ordered the most?", "inferred_code": "done(extractValues(max(merge(merge(getData(Album),getData(Album),Genre.GenreId,Track.GenreId),getData(Album),Track.AlbumId,Album.AlbumId),Track.UnitPrice),Album.Title))", "score": -0.3625255715922396, "correct_code": "done(extractValues(max(merge(merge(filter(getData(InvoiceLine),InvoiceLine.Quantity,=,1),getData(Track),InvoiceLine.TrackId,Track.TrackId),getData(Album),Track.AlbumId,Album.AlbumId),InvoiceLine.Quantity),Album.Title))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 247, "beams": [{"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.03698568744948716, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingPostalCode,=,560001), Customer.City),Customer.City))", "score": -0.29378548404565663, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.Company,=,560001), Customer.City),Customer.City))", "score": -0.5417653932272515, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.LastName,=,560001), Customer.City),Customer.City))", "score": -0.5478088273703179, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.State),Customer.City))", "score": -0.5644837245381495, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(getData(Customer), Customer.City),Customer.City))", "score": -0.5741809789063794, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Invoice),Customer.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.5924524542679137, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Employee.PostalCode,=,560001), Customer.City),Customer.City))", "score": -0.6444426788984856, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), InvoiceLine.UnitPrice),Customer.City))", "score": -0.6817728504574916, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,!=,560001), Customer.City),Customer.City))", "score": -0.7037824866165465, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.City),Customer.State))", "score": -0.7180366767606756, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Customer.Fax),Customer.City))", "score": -0.7592084631360194, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Employee.HireDate),Customer.City))", "score": -0.772246740762057, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Customer.PostalCode,=,560001), Invoice.BillingCity),Customer.City))", "score": -0.7741912230885646, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}, {"orig_question": "What is the city with 560001 postal code?", "inferred_code": "done(extractValues(distinct(filter(getData(Customer),Invoice.BillingCity,=,560001), Customer.City),Customer.City))", "score": -0.7817222490011773, "correct_code": "done(extractValues(distinct(merge(filter(getData(Invoice),Invoice.BillingPostalCode,=,560001),merge(getData(Customer),getData(Employee),Customer.SupportRepId,Employee.EmployeeId),Invoice.CustomerId,Customer.CustomerId), Employee.City),Employee.City))"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
{"index": 248, "beams": [{"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.1985554544352097, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.20635729490197488, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21545092432200152, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.21992072574107577, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24195242895282063, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(Invoice),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24295451016847927, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24541943643107197, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),InvoiceLine.InvoiceId,Invoice.CustomerId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24570962963894682, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.24988923785014622, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2520273611062724, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId),getData(Invoice),InvoiceLine.InvoiceId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2565526794521844, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Invoice.BillingCity,=,Lethbridge),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.26658609814036643, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(getData(Employee),merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.EmployeeId,Customer.SupportRepId),Employee.City,=,Lethbridge),merge(merge(getData(Invoice),getData(InvoiceLine),Invoice.InvoiceId,InvoiceLine.InvoiceId),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)", "score": -0.2673375600707347, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(getData(Employee),Employee.City,=,Lethbridge),merge(merge(getData(Customer),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),merge(getData(InvoiceLine),getData(Invoice),InvoiceLine.InvoiceId,Invoice.InvoiceId),Customer.CustomerId,InvoiceLine.InvoiceId),Employee.EmployeeId,Customer.SupportRepId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28199927505070754, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}, {"orig_question": "What is the summed total in invoices of customers advised by an employee from the city Lethbridge?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(Employee),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId),Employee.City,=,Lethbridge),merge(getData(Invoice),getData(Invoice),Invoice.InvoiceId,InvoiceLine.InvoiceId),Invoice.InvoiceId,InvoiceLine.InvoiceId), Invoice.InvoiceId),Invoice.Total)", "score": -0.28635150170377915, "correct_code": "sum(distinct(merge(merge(filter(getData(Employee),Employee.City,=,Lethbridge),getData(Customer),Employee.EmployeeId,Customer.SupportRepId),getData(Invoice),Customer.CustomerId,Invoice.CustomerId), Invoice.InvoiceId),Invoice.Total)"}], "gold_nubia_score": -1, "db_name": "chinook_1"}
